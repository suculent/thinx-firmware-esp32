        -:    0:Source:/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/utility
        -:    0:Graph:../020-TestCase.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:// -*- C++ -*-
        -:    2://===-------------------------- utility -----------------------------------===//
        -:    3://
        -:    4://                     The LLVM Compiler Infrastructure
        -:    5://
        -:    6:// This file is dual licensed under the MIT and the University of Illinois Open
        -:    7:// Source Licenses. See LICENSE.TXT for details.
        -:    8://
        -:    9://===----------------------------------------------------------------------===//
        -:   10:
        -:   11:#ifndef _LIBCPP_UTILITY
        -:   12:#define _LIBCPP_UTILITY
        -:   13:
        -:   14:/*
        -:   15:    utility synopsis
        -:   16:
        -:   17:#include <initializer_list>
        -:   18:
        -:   19:namespace std
        -:   20:{
        -:   21:
        -:   22:template <class T>
        -:   23:    void
        -:   24:    swap(T& a, T& b);
        -:   25:
        -:   26:namespace rel_ops
        -:   27:{
        -:   28:    template<class T> bool operator!=(const T&, const T&);
        -:   29:    template<class T> bool operator> (const T&, const T&);
        -:   30:    template<class T> bool operator<=(const T&, const T&);
        -:   31:    template<class T> bool operator>=(const T&, const T&);
        -:   32:}
        -:   33:
        -:   34:template<class T>
        -:   35:void
        -:   36:swap(T& a, T& b) noexcept(is_nothrow_move_constructible<T>::value &&
        -:   37:                          is_nothrow_move_assignable<T>::value);
        -:   38:
        -:   39:template <class T, size_t N>
        -:   40:void
        -:   41:swap(T (&a)[N], T (&b)[N]) noexcept(noexcept(swap(*a, *b)));
        -:   42:
        -:   43:template <class T> T&& forward(typename remove_reference<T>::type& t) noexcept;  // constexpr in C++14
        -:   44:template <class T> T&& forward(typename remove_reference<T>::type&& t) noexcept; // constexpr in C++14
        -:   45:
        -:   46:template <class T> typename remove_reference<T>::type&& move(T&&) noexcept;      // constexpr in C++14
        -:   47:
        -:   48:template <class T>
        -:   49:    typename conditional
        -:   50:    <
        -:   51:        !is_nothrow_move_constructible<T>::value && is_copy_constructible<T>::value,
        -:   52:        const T&,
        -:   53:        T&&
        -:   54:    >::type
        -:   55:    move_if_noexcept(T& x) noexcept; // constexpr in C++14
        -:   56:
        -:   57:template <class T> constexpr add_const_t<T>& as_const(T& t) noexcept;      // C++17
        -:   58:template <class T>                      void as_const(const T&&) = delete; // C++17
        -:   59:
        -:   60:template <class T> typename add_rvalue_reference<T>::type declval() noexcept;
        -:   61:
        -:   62:template <class T1, class T2>
        -:   63:struct pair
        -:   64:{
        -:   65:    typedef T1 first_type;
        -:   66:    typedef T2 second_type;
        -:   67:
        -:   68:    T1 first;
        -:   69:    T2 second;
        -:   70:
        -:   71:    pair(const pair&) = default;
        -:   72:    pair(pair&&) = default;
        -:   73:    constexpr pair();
        -:   74:    pair(const T1& x, const T2& y);                          // constexpr in C++14
        -:   75:    template <class U, class V> pair(U&& x, V&& y);          // constexpr in C++14
        -:   76:    template <class U, class V> pair(const pair<U, V>& p);   // constexpr in C++14
        -:   77:    template <class U, class V> pair(pair<U, V>&& p);        // constexpr in C++14
        -:   78:    template <class... Args1, class... Args2>
        -:   79:        pair(piecewise_construct_t, tuple<Args1...> first_args,
        -:   80:             tuple<Args2...> second_args);
        -:   81:
        -:   82:    template <class U, class V> pair& operator=(const pair<U, V>& p);
        -:   83:    pair& operator=(pair&& p) noexcept(is_nothrow_move_assignable<T1>::value &&
        -:   84:                                       is_nothrow_move_assignable<T2>::value);
        -:   85:    template <class U, class V> pair& operator=(pair<U, V>&& p);
        -:   86:
        -:   87:    void swap(pair& p) noexcept(is_nothrow_swappable_v<T1> &&
        -:   88:                                is_nothrow_swappable_v<T2>);
        -:   89:};
        -:   90:
        -:   91:template <class T1, class T2> bool operator==(const pair<T1,T2>&, const pair<T1,T2>&); // constexpr in C++14
        -:   92:template <class T1, class T2> bool operator!=(const pair<T1,T2>&, const pair<T1,T2>&); // constexpr in C++14
        -:   93:template <class T1, class T2> bool operator< (const pair<T1,T2>&, const pair<T1,T2>&); // constexpr in C++14
        -:   94:template <class T1, class T2> bool operator> (const pair<T1,T2>&, const pair<T1,T2>&); // constexpr in C++14
        -:   95:template <class T1, class T2> bool operator>=(const pair<T1,T2>&, const pair<T1,T2>&); // constexpr in C++14
        -:   96:template <class T1, class T2> bool operator<=(const pair<T1,T2>&, const pair<T1,T2>&); // constexpr in C++14
        -:   97:
        -:   98:template <class T1, class T2> pair<V1, V2> make_pair(T1&&, T2&&);   // constexpr in C++14
        -:   99:template <class T1, class T2>
        -:  100:void
        -:  101:swap(pair<T1, T2>& x, pair<T1, T2>& y) noexcept(noexcept(x.swap(y)));
        -:  102:
        -:  103:struct piecewise_construct_t { };
        -:  104:inline constexpr piecewise_construct_t piecewise_construct = piecewise_construct_t();
        -:  105:
        -:  106:template <class T> class tuple_size;
        -:  107:template <size_t I, class T> class tuple_element;
        -:  108:
        -:  109:template <class T1, class T2> struct tuple_size<pair<T1, T2> >;
        -:  110:template <class T1, class T2> struct tuple_element<0, pair<T1, T2> >;
        -:  111:template <class T1, class T2> struct tuple_element<1, pair<T1, T2> >;
        -:  112:
        -:  113:template<size_t I, class T1, class T2>
        -:  114:    typename tuple_element<I, pair<T1, T2> >::type&
        -:  115:    get(pair<T1, T2>&) noexcept; // constexpr in C++14
        -:  116:
        -:  117:template<size_t I, class T1, class T2>
        -:  118:    const typename tuple_element<I, pair<T1, T2> >::type&
        -:  119:    get(const pair<T1, T2>&) noexcept; // constexpr in C++14
        -:  120:
        -:  121:template<size_t I, class T1, class T2>
        -:  122:    typename tuple_element<I, pair<T1, T2> >::type&&
        -:  123:    get(pair<T1, T2>&&) noexcept; // constexpr in C++14
        -:  124:
        -:  125:template<size_t I, class T1, class T2>
        -:  126:    const typename tuple_element<I, pair<T1, T2> >::type&&
        -:  127:    get(const pair<T1, T2>&&) noexcept; // constexpr in C++14
        -:  128:
        -:  129:template<class T1, class T2>
        -:  130:    constexpr T1& get(pair<T1, T2>&) noexcept; // C++14
        -:  131:
        -:  132:template<class T1, class T2>
        -:  133:    constexpr const T1& get(const pair<T1, T2>&) noexcept; // C++14
        -:  134:
        -:  135:template<class T1, class T2>
        -:  136:    constexpr T1&& get(pair<T1, T2>&&) noexcept; // C++14
        -:  137:
        -:  138:template<class T1, class T2>
        -:  139:    constexpr const T1&& get(const pair<T1, T2>&&) noexcept; // C++14
        -:  140:
        -:  141:template<class T1, class T2>
        -:  142:    constexpr T1& get(pair<T2, T1>&) noexcept; // C++14
        -:  143:
        -:  144:template<class T1, class T2>
        -:  145:    constexpr const T1& get(const pair<T2, T1>&) noexcept; // C++14
        -:  146:
        -:  147:template<class T1, class T2>
        -:  148:    constexpr T1&& get(pair<T2, T1>&&) noexcept; // C++14
        -:  149:
        -:  150:template<class T1, class T2>
        -:  151:    constexpr const T1&& get(const pair<T2, T1>&&) noexcept; // C++14
        -:  152:
        -:  153:// C++14
        -:  154:
        -:  155:template<class T, T... I>
        -:  156:struct integer_sequence
        -:  157:{
        -:  158:    typedef T value_type;
        -:  159:
        -:  160:    static constexpr size_t size() noexcept;
        -:  161:};
        -:  162:
        -:  163:template<size_t... I>
        -:  164:  using index_sequence = integer_sequence<size_t, I...>;
        -:  165:
        -:  166:template<class T, T N>
        -:  167:  using make_integer_sequence = integer_sequence<T, 0, 1, ..., N-1>;
        -:  168:template<size_t N>
        -:  169:  using make_index_sequence = make_integer_sequence<size_t, N>;
        -:  170:
        -:  171:template<class... T>
        -:  172:  using index_sequence_for = make_index_sequence<sizeof...(T)>;
        -:  173:
        -:  174:template<class T, class U=T>
        -:  175:    T exchange(T& obj, U&& new_value);
        -:  176:
        -:  177:// 20.2.7, in-place construction // C++17
        -:  178:struct in_place_t {
        -:  179:  explicit in_place_t() = default;
        -:  180:};
        -:  181:inline constexpr in_place_t in_place{};
        -:  182:template <class T>
        -:  183:  struct in_place_type_t {
        -:  184:    explicit in_place_type_t() = default;
        -:  185:  };
        -:  186:template <class T>
        -:  187:  inline constexpr in_place_type_t<T> in_place_type{};
        -:  188:template <size_t I>
        -:  189:  struct in_place_index_t {
        -:  190:    explicit in_place_index_t() = default;
        -:  191:  };
        -:  192:template <size_t I>
        -:  193:  inline constexpr in_place_index_t<I> in_place_index{};
        -:  194:
        -:  195:}  // std
        -:  196:
        -:  197:*/
        -:  198:
        -:  199:#include <__config>
        -:  200:#include <__tuple>
        -:  201:#include <type_traits>
        -:  202:#include <initializer_list>
        -:  203:#include <cstddef>
        -:  204:#include <cstring>
        -:  205:#include <cstdint>
        -:  206:#include <__debug>
        -:  207:
        -:  208:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:  209:#pragma GCC system_header
        -:  210:#endif
        -:  211:
        -:  212:_LIBCPP_BEGIN_NAMESPACE_STD
        -:  213:
        -:  214:namespace rel_ops
        -:  215:{
        -:  216:
        -:  217:template<class _Tp>
        -:  218:inline _LIBCPP_INLINE_VISIBILITY
        -:  219:bool
        -:  220:operator!=(const _Tp& __x, const _Tp& __y)
        -:  221:{
        -:  222:    return !(__x == __y);
        -:  223:}
        -:  224:
        -:  225:template<class _Tp>
        -:  226:inline _LIBCPP_INLINE_VISIBILITY
        -:  227:bool
        -:  228:operator> (const _Tp& __x, const _Tp& __y)
        -:  229:{
        -:  230:    return __y < __x;
        -:  231:}
        -:  232:
        -:  233:template<class _Tp>
        -:  234:inline _LIBCPP_INLINE_VISIBILITY
        -:  235:bool
        -:  236:operator<=(const _Tp& __x, const _Tp& __y)
        -:  237:{
        -:  238:    return !(__y < __x);
        -:  239:}
        -:  240:
        -:  241:template<class _Tp>
        -:  242:inline _LIBCPP_INLINE_VISIBILITY
        -:  243:bool
        -:  244:operator>=(const _Tp& __x, const _Tp& __y)
        -:  245:{
        -:  246:    return !(__x < __y);
        -:  247:}
        -:  248:
        -:  249:}  // rel_ops
        -:  250:
        -:  251:// swap_ranges
        -:  252:
        -:  253:
        -:  254:template <class _ForwardIterator1, class _ForwardIterator2>
        -:  255:inline _LIBCPP_INLINE_VISIBILITY
        -:  256:_ForwardIterator2
        -:  257:swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2)
        -:  258:{
        -:  259:    for(; __first1 != __last1; ++__first1, (void) ++__first2)
        -:  260:        swap(*__first1, *__first2);
        -:  261:    return __first2;
        -:  262:}
        -:  263:
        -:  264:// forward declared in <type_traits>
        -:  265:template<class _Tp, size_t _Np>
        -:  266:inline _LIBCPP_INLINE_VISIBILITY
        -:  267:typename enable_if<
        -:  268:    __is_swappable<_Tp>::value
        -:  269:>::type
        -:  270:swap(_Tp (&__a)[_Np], _Tp (&__b)[_Np]) _NOEXCEPT_(__is_nothrow_swappable<_Tp>::value)
        -:  271:{
        -:  272:    _VSTD::swap_ranges(__a, __a + _Np, __b);
        -:  273:}
        -:  274:
        -:  275:template <class _Tp>
        -:  276:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  277:#ifndef _LIBCPP_CXX03_LANG
        -:  278:typename conditional
        -:  279:<
        -:  280:    !is_nothrow_move_constructible<_Tp>::value && is_copy_constructible<_Tp>::value,
        -:  281:    const _Tp&,
        -:  282:    _Tp&&
        -:  283:>::type
        -:  284:#else  // _LIBCPP_CXX03_LANG
        -:  285:const _Tp&
        -:  286:#endif
        -:  287:move_if_noexcept(_Tp& __x) _NOEXCEPT
        -:  288:{
    #####:  289:    return _VSTD::move(__x);
        -:  290:}
        -:  291:
        -:  292:#if _LIBCPP_STD_VER > 14
        -:  293:template <class _Tp> constexpr add_const_t<_Tp>& as_const(_Tp& __t) noexcept { return __t; }
        -:  294:template <class _Tp>                        void as_const(const _Tp&&) = delete;
        -:  295:#endif
        -:  296:
        -:  297:struct _LIBCPP_TEMPLATE_VIS piecewise_construct_t { };
        -:  298:#if defined(_LIBCPP_CXX03_LANG) || defined(_LIBCPP_BUILDING_LIBRARY)
        -:  299:extern const piecewise_construct_t piecewise_construct;// = piecewise_construct_t();
        -:  300:#else
        -:  301:/* _LIBCPP_INLINE_VAR */ constexpr piecewise_construct_t piecewise_construct = piecewise_construct_t();
        -:  302:#endif
        -:  303:
        -:  304:#if defined(_LIBCPP_DEPRECATED_ABI_DISABLE_PAIR_TRIVIAL_COPY_CTOR)
        -:  305:struct __non_trivially_copyable_base {
        -:  306:  _LIBCPP_CONSTEXPR _LIBCPP_INLINE_VISIBILITY
        -:  307:  __non_trivially_copyable_base() _NOEXCEPT {}
        -:  308:  _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY
        -:  309:  __non_trivially_copyable_base(__non_trivially_copyable_base const&) _NOEXCEPT {}
        -:  310:};
        -:  311:#endif
        -:  312:
        -:  313:template <class _T1, class _T2>
    #####:  314:struct _LIBCPP_TEMPLATE_VIS pair
        -:  315:#if defined(_LIBCPP_DEPRECATED_ABI_DISABLE_PAIR_TRIVIAL_COPY_CTOR)
        -:  316:: private __non_trivially_copyable_base
        -:  317:#endif
        -:  318:{
        -:  319:    typedef _T1 first_type;
        -:  320:    typedef _T2 second_type;
        -:  321:
        -:  322:    _T1 first;
        -:  323:    _T2 second;
        -:  324:
        -:  325:#if !defined(_LIBCPP_CXX03_LANG)
        -:  326:    pair(pair const&) = default;
    #####:  327:    pair(pair&&) = default;
        -:  328:#else
        -:  329:  // Use the implicitly declared copy constructor in C++03
        -:  330:#endif
        -:  331:
        -:  332:#ifdef _LIBCPP_CXX03_LANG
        -:  333:    _LIBCPP_INLINE_VISIBILITY
        -:  334:    pair() : first(), second() {}
        -:  335:
        -:  336:    _LIBCPP_INLINE_VISIBILITY
        -:  337:    pair(_T1 const& __t1, _T2 const& __t2) : first(__t1), second(__t2) {}
        -:  338:
        -:  339:    template <class _U1, class _U2>
        -:  340:    _LIBCPP_INLINE_VISIBILITY
        -:  341:    pair(const pair<_U1, _U2>& __p) : first(__p.first), second(__p.second) {}
        -:  342:
        -:  343:    _LIBCPP_INLINE_VISIBILITY
        -:  344:    pair& operator=(pair const& __p) {
        -:  345:        first = __p.first;
        -:  346:        second = __p.second;
        -:  347:        return *this;
        -:  348:    }
        -:  349:#else
        -:  350:    template <bool _Val>
        -:  351:    using _EnableB = typename enable_if<_Val, bool>::type;
        -:  352:
        -:  353:    struct _CheckArgs {
        -:  354:      template <class _U1, class _U2>
        -:  355:      static constexpr bool __enable_default() {
        -:  356:          return is_default_constructible<_U1>::value
        -:  357:              && is_default_constructible<_U2>::value;
        -:  358:      }
        -:  359:
        -:  360:      template <class _U1, class _U2>
        -:  361:      static constexpr bool __enable_explicit() {
        -:  362:          return is_constructible<first_type, _U1>::value
        -:  363:              && is_constructible<second_type, _U2>::value
        -:  364:              && (!is_convertible<_U1, first_type>::value
        -:  365:                  || !is_convertible<_U2, second_type>::value);
        -:  366:      }
        -:  367:
        -:  368:      template <class _U1, class _U2>
        -:  369:      static constexpr bool __enable_implicit() {
        -:  370:          return is_constructible<first_type, _U1>::value
        -:  371:              && is_constructible<second_type, _U2>::value
        -:  372:              && is_convertible<_U1, first_type>::value
        -:  373:              && is_convertible<_U2, second_type>::value;
        -:  374:      }
        -:  375:    };
        -:  376:
        -:  377:    template <bool _MaybeEnable>
        -:  378:    using _CheckArgsDep = typename conditional<
        -:  379:      _MaybeEnable, _CheckArgs, __check_tuple_constructor_fail>::type;
        -:  380:
        -:  381:    struct _CheckTupleLikeConstructor {
        -:  382:        template <class _Tuple>
        -:  383:        static constexpr bool __enable_implicit() {
        -:  384:            return __tuple_convertible<_Tuple, pair>::value;
        -:  385:        }
        -:  386:
        -:  387:        template <class _Tuple>
        -:  388:        static constexpr bool __enable_explicit() {
        -:  389:            return __tuple_constructible<_Tuple, pair>::value
        -:  390:               && !__tuple_convertible<_Tuple, pair>::value;
        -:  391:        }
        -:  392:
        -:  393:        template <class _Tuple>
        -:  394:        static constexpr bool __enable_assign() {
        -:  395:            return __tuple_assignable<_Tuple, pair>::value;
        -:  396:        }
        -:  397:    };
        -:  398:
        -:  399:    template <class _Tuple>
        -:  400:    using _CheckTLC = typename conditional<
        -:  401:        __tuple_like_with_size<_Tuple, 2>::value
        -:  402:            && !is_same<typename decay<_Tuple>::type, pair>::value,
        -:  403:        _CheckTupleLikeConstructor,
        -:  404:        __check_tuple_constructor_fail
        -:  405:    >::type;
        -:  406:
        -:  407:    template<bool _Dummy = true, _EnableB<
        -:  408:            _CheckArgsDep<_Dummy>::template __enable_default<_T1, _T2>()
        -:  409:    > = false>
        -:  410:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -:  411:    pair() _NOEXCEPT_(is_nothrow_default_constructible<first_type>::value &&
        -:  412:                      is_nothrow_default_constructible<second_type>::value)
    #####:  413:        : first(), second() {}
        -:  414:
        -:  415:    template <bool _Dummy = true, _EnableB<
        -:  416:             _CheckArgsDep<_Dummy>::template __enable_explicit<_T1 const&, _T2 const&>()
        -:  417:    > = false>
        -:  418:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  419:    explicit pair(_T1 const& __t1, _T2 const& __t2)
        -:  420:        _NOEXCEPT_(is_nothrow_copy_constructible<first_type>::value &&
        -:  421:                   is_nothrow_copy_constructible<second_type>::value)
        -:  422:        : first(__t1), second(__t2) {}
        -:  423:
        -:  424:    template<bool _Dummy = true, _EnableB<
        -:  425:            _CheckArgsDep<_Dummy>::template __enable_implicit<_T1 const&, _T2 const&>()
        -:  426:    > = false>
        -:  427:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  428:    pair(_T1 const& __t1, _T2 const& __t2)
        -:  429:        _NOEXCEPT_(is_nothrow_copy_constructible<first_type>::value &&
        -:  430:                   is_nothrow_copy_constructible<second_type>::value)
    #####:  431:        : first(__t1), second(__t2) {}
        -:  432:
        -:  433:    template<class _U1, class _U2, _EnableB<
        -:  434:             _CheckArgs::template __enable_explicit<_U1, _U2>()
        -:  435:    > = false>
        -:  436:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  437:    explicit pair(_U1&& __u1, _U2&& __u2)
        -:  438:        _NOEXCEPT_((is_nothrow_constructible<first_type, _U1>::value &&
        -:  439:                    is_nothrow_constructible<second_type, _U2>::value))
        -:  440:        : first(_VSTD::forward<_U1>(__u1)), second(_VSTD::forward<_U2>(__u2)) {}
        -:  441:
        -:  442:    template<class _U1, class _U2, _EnableB<
        -:  443:            _CheckArgs::template __enable_implicit<_U1, _U2>()
        -:  444:    > = false>
        -:  445:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  446:    pair(_U1&& __u1, _U2&& __u2)
        -:  447:        _NOEXCEPT_((is_nothrow_constructible<first_type, _U1>::value &&
        -:  448:                    is_nothrow_constructible<second_type, _U2>::value))
    #####:  449:        : first(_VSTD::forward<_U1>(__u1)), second(_VSTD::forward<_U2>(__u2)) {}
        -:  450:
        -:  451:    template<class _U1, class _U2, _EnableB<
        -:  452:            _CheckArgs::template __enable_explicit<_U1 const&, _U2 const&>()
        -:  453:    > = false>
        -:  454:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  455:    explicit pair(pair<_U1, _U2> const& __p)
        -:  456:        _NOEXCEPT_((is_nothrow_constructible<first_type, _U1 const&>::value &&
        -:  457:                    is_nothrow_constructible<second_type, _U2 const&>::value))
        -:  458:        : first(__p.first), second(__p.second) {}
        -:  459:
        -:  460:    template<class _U1, class _U2, _EnableB<
        -:  461:            _CheckArgs::template __enable_implicit<_U1 const&, _U2 const&>()
        -:  462:    > = false>
        -:  463:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  464:    pair(pair<_U1, _U2> const& __p)
        -:  465:        _NOEXCEPT_((is_nothrow_constructible<first_type, _U1 const&>::value &&
        -:  466:                    is_nothrow_constructible<second_type, _U2 const&>::value))
        -:  467:        : first(__p.first), second(__p.second) {}
        -:  468:
        -:  469:    template<class _U1, class _U2, _EnableB<
        -:  470:            _CheckArgs::template __enable_explicit<_U1, _U2>()
        -:  471:    > = false>
        -:  472:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  473:    explicit pair(pair<_U1, _U2>&&__p)
        -:  474:        _NOEXCEPT_((is_nothrow_constructible<first_type, _U1&&>::value &&
        -:  475:                    is_nothrow_constructible<second_type, _U2&&>::value))
        -:  476:        : first(_VSTD::forward<_U1>(__p.first)), second(_VSTD::forward<_U2>(__p.second)) {}
        -:  477:
        -:  478:    template<class _U1, class _U2, _EnableB<
        -:  479:            _CheckArgs::template __enable_implicit<_U1, _U2>()
        -:  480:    > = false>
        -:  481:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  482:    pair(pair<_U1, _U2>&& __p)
        -:  483:        _NOEXCEPT_((is_nothrow_constructible<first_type, _U1&&>::value &&
        -:  484:                    is_nothrow_constructible<second_type, _U2&&>::value))
    #####:  485:        : first(_VSTD::forward<_U1>(__p.first)), second(_VSTD::forward<_U2>(__p.second)) {}
        -:  486:
        -:  487:    template<class _Tuple, _EnableB<
        -:  488:            _CheckTLC<_Tuple>::template __enable_explicit<_Tuple>()
        -:  489:    > = false>
        -:  490:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  491:    explicit pair(_Tuple&& __p)
        -:  492:        : first(_VSTD::get<0>(_VSTD::forward<_Tuple>(__p))),
        -:  493:          second(_VSTD::get<1>(_VSTD::forward<_Tuple>(__p))) {}
        -:  494:
        -:  495:    template<class _Tuple, _EnableB<
        -:  496:            _CheckTLC<_Tuple>::template __enable_implicit<_Tuple>()
        -:  497:    > = false>
        -:  498:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  499:    pair(_Tuple&& __p)
        -:  500:        : first(_VSTD::get<0>(_VSTD::forward<_Tuple>(__p))),
        -:  501:          second(_VSTD::get<1>(_VSTD::forward<_Tuple>(__p))) {}
        -:  502:
        -:  503:    template <class... _Args1, class... _Args2>
        -:  504:    _LIBCPP_INLINE_VISIBILITY
        -:  505:    pair(piecewise_construct_t __pc,
        -:  506:         tuple<_Args1...> __first_args, tuple<_Args2...> __second_args)
        -:  507:        _NOEXCEPT_((is_nothrow_constructible<first_type, _Args1...>::value &&
        -:  508:                    is_nothrow_constructible<second_type, _Args2...>::value))
        -:  509:        : pair(__pc, __first_args, __second_args,
        -:  510:                typename __make_tuple_indices<sizeof...(_Args1)>::type(),
        -:  511:                typename __make_tuple_indices<sizeof...(_Args2) >::type()) {}
        -:  512:
        -:  513:    _LIBCPP_INLINE_VISIBILITY
        -:  514:    pair& operator=(typename conditional<
        -:  515:                        is_copy_assignable<first_type>::value &&
        -:  516:                        is_copy_assignable<second_type>::value,
        -:  517:                    pair, __nat>::type const& __p)
        -:  518:        _NOEXCEPT_(is_nothrow_copy_assignable<first_type>::value &&
        -:  519:                   is_nothrow_copy_assignable<second_type>::value)
        -:  520:    {
    #####:  521:        first = __p.first;
    #####:  522:        second = __p.second;
    #####:  523:        return *this;
        -:  524:    }
        -:  525:
        -:  526:    _LIBCPP_INLINE_VISIBILITY
        -:  527:    pair& operator=(typename conditional<
        -:  528:                        is_move_assignable<first_type>::value &&
        -:  529:                        is_move_assignable<second_type>::value,
        -:  530:                    pair, __nat>::type&& __p)
        -:  531:        _NOEXCEPT_(is_nothrow_move_assignable<first_type>::value &&
        -:  532:                   is_nothrow_move_assignable<second_type>::value)
        -:  533:    {
        -:  534:        first = _VSTD::forward<first_type>(__p.first);
        -:  535:        second = _VSTD::forward<second_type>(__p.second);
        -:  536:        return *this;
        -:  537:    }
        -:  538:
        -:  539:    template <class _Tuple, _EnableB<
        -:  540:            _CheckTLC<_Tuple>::template __enable_assign<_Tuple>()
        -:  541:     > = false>
        -:  542:    _LIBCPP_INLINE_VISIBILITY
        -:  543:    pair& operator=(_Tuple&& __p) {
        -:  544:        first = _VSTD::get<0>(_VSTD::forward<_Tuple>(__p));
        -:  545:        second = _VSTD::get<1>(_VSTD::forward<_Tuple>(__p));
        -:  546:        return *this;
        -:  547:    }
        -:  548:#endif
        -:  549:
        -:  550:    _LIBCPP_INLINE_VISIBILITY
        -:  551:    void
        -:  552:    swap(pair& __p) _NOEXCEPT_(__is_nothrow_swappable<first_type>::value &&
        -:  553:                               __is_nothrow_swappable<second_type>::value)
        -:  554:    {
        -:  555:        using _VSTD::swap;
        -:  556:        swap(first,  __p.first);
        -:  557:        swap(second, __p.second);
        -:  558:    }
        -:  559:private:
        -:  560:
        -:  561:#ifndef _LIBCPP_CXX03_LANG
        -:  562:    template <class... _Args1, class... _Args2, size_t... _I1, size_t... _I2>
        -:  563:        _LIBCPP_INLINE_VISIBILITY
        -:  564:        pair(piecewise_construct_t,
        -:  565:             tuple<_Args1...>& __first_args, tuple<_Args2...>& __second_args,
        -:  566:             __tuple_indices<_I1...>, __tuple_indices<_I2...>);
        -:  567:#endif
        -:  568:};
        -:  569:
        -:  570:#ifndef _LIBCPP_HAS_NO_DEDUCTION_GUIDES
        -:  571:template<class _T1, class _T2>
        -:  572:pair(_T1, _T2) -> pair<_T1, _T2>;
        -:  573:#endif // _LIBCPP_HAS_NO_DEDUCTION_GUIDES
        -:  574:
        -:  575:template <class _T1, class _T2>
        -:  576:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  577:bool
        -:  578:operator==(const pair<_T1,_T2>& __x, const pair<_T1,_T2>& __y)
        -:  579:{
    #####:  580:    return __x.first == __y.first && __x.second == __y.second;
        -:  581:}
        -:  582:
        -:  583:template <class _T1, class _T2>
        -:  584:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  585:bool
        -:  586:operator!=(const pair<_T1,_T2>& __x, const pair<_T1,_T2>& __y)
        -:  587:{
        -:  588:    return !(__x == __y);
        -:  589:}
        -:  590:
        -:  591:template <class _T1, class _T2>
        -:  592:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  593:bool
        -:  594:operator< (const pair<_T1,_T2>& __x, const pair<_T1,_T2>& __y)
        -:  595:{
        -:  596:    return __x.first < __y.first || (!(__y.first < __x.first) && __x.second < __y.second);
        -:  597:}
        -:  598:
        -:  599:template <class _T1, class _T2>
        -:  600:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  601:bool
        -:  602:operator> (const pair<_T1,_T2>& __x, const pair<_T1,_T2>& __y)
        -:  603:{
        -:  604:    return __y < __x;
        -:  605:}
        -:  606:
        -:  607:template <class _T1, class _T2>
        -:  608:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  609:bool
        -:  610:operator>=(const pair<_T1,_T2>& __x, const pair<_T1,_T2>& __y)
        -:  611:{
        -:  612:    return !(__x < __y);
        -:  613:}
        -:  614:
        -:  615:template <class _T1, class _T2>
        -:  616:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  617:bool
        -:  618:operator<=(const pair<_T1,_T2>& __x, const pair<_T1,_T2>& __y)
        -:  619:{
        -:  620:    return !(__y < __x);
        -:  621:}
        -:  622:
        -:  623:template <class _T1, class _T2>
        -:  624:inline _LIBCPP_INLINE_VISIBILITY
        -:  625:typename enable_if
        -:  626:<
        -:  627:    __is_swappable<_T1>::value &&
        -:  628:    __is_swappable<_T2>::value,
        -:  629:    void
        -:  630:>::type
        -:  631:swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)
        -:  632:                     _NOEXCEPT_((__is_nothrow_swappable<_T1>::value &&
        -:  633:                                 __is_nothrow_swappable<_T2>::value))
        -:  634:{
        -:  635:    __x.swap(__y);
        -:  636:}
        -:  637:
        -:  638:#ifndef _LIBCPP_CXX03_LANG
        -:  639:
        -:  640:template <class _Tp>
        -:  641:struct __make_pair_return_impl
        -:  642:{
        -:  643:    typedef _Tp type;
        -:  644:};
        -:  645:
        -:  646:template <class _Tp>
        -:  647:struct __make_pair_return_impl<reference_wrapper<_Tp>>
        -:  648:{
        -:  649:    typedef _Tp& type;
        -:  650:};
        -:  651:
        -:  652:template <class _Tp>
        -:  653:struct __make_pair_return
        -:  654:{
        -:  655:    typedef typename __make_pair_return_impl<typename decay<_Tp>::type>::type type;
        -:  656:};
        -:  657:
        -:  658:template <class _T1, class _T2>
        -:  659:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  660:pair<typename __make_pair_return<_T1>::type, typename __make_pair_return<_T2>::type>
        -:  661:make_pair(_T1&& __t1, _T2&& __t2)
        -:  662:{
    #####:  663:    return pair<typename __make_pair_return<_T1>::type, typename __make_pair_return<_T2>::type>
    #####:  664:               (_VSTD::forward<_T1>(__t1), _VSTD::forward<_T2>(__t2));
        -:  665:}
        -:  666:
        -:  667:#else  // _LIBCPP_CXX03_LANG
        -:  668:
        -:  669:template <class _T1, class _T2>
        -:  670:inline _LIBCPP_INLINE_VISIBILITY
        -:  671:pair<_T1,_T2>
        -:  672:make_pair(_T1 __x, _T2 __y)
        -:  673:{
        -:  674:    return pair<_T1, _T2>(__x, __y);
        -:  675:}
        -:  676:
        -:  677:#endif  // _LIBCPP_CXX03_LANG
        -:  678:
        -:  679:template <class _T1, class _T2>
        -:  680:  class _LIBCPP_TEMPLATE_VIS tuple_size<pair<_T1, _T2> >
        -:  681:    : public integral_constant<size_t, 2> {};
        -:  682:
        -:  683:template <size_t _Ip, class _T1, class _T2>
        -:  684:class _LIBCPP_TEMPLATE_VIS tuple_element<_Ip, pair<_T1, _T2> >
        -:  685:{
        -:  686:    static_assert(_Ip < 2, "Index out of bounds in std::tuple_element<std::pair<T1, T2>>");
        -:  687:};
        -:  688:
        -:  689:template <class _T1, class _T2>
        -:  690:class _LIBCPP_TEMPLATE_VIS tuple_element<0, pair<_T1, _T2> >
        -:  691:{
        -:  692:public:
        -:  693:    typedef _T1 type;
        -:  694:};
        -:  695:
        -:  696:template <class _T1, class _T2>
        -:  697:class _LIBCPP_TEMPLATE_VIS tuple_element<1, pair<_T1, _T2> >
        -:  698:{
        -:  699:public:
        -:  700:    typedef _T2 type;
        -:  701:};
        -:  702:
        -:  703:template <size_t _Ip> struct __get_pair;
        -:  704:
        -:  705:template <>
        -:  706:struct __get_pair<0>
        -:  707:{
        -:  708:    template <class _T1, class _T2>
        -:  709:    static
        -:  710:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  711:    _T1&
        -:  712:    get(pair<_T1, _T2>& __p) _NOEXCEPT {return __p.first;}
        -:  713:
        -:  714:    template <class _T1, class _T2>
        -:  715:    static
        -:  716:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  717:    const _T1&
        -:  718:    get(const pair<_T1, _T2>& __p) _NOEXCEPT {return __p.first;}
        -:  719:
        -:  720:#ifndef _LIBCPP_CXX03_LANG
        -:  721:    template <class _T1, class _T2>
        -:  722:    static
        -:  723:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  724:    _T1&&
        -:  725:    get(pair<_T1, _T2>&& __p) _NOEXCEPT {return _VSTD::forward<_T1>(__p.first);}
        -:  726:
        -:  727:    template <class _T1, class _T2>
        -:  728:    static
        -:  729:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  730:    const _T1&&
        -:  731:    get(const pair<_T1, _T2>&& __p) _NOEXCEPT {return _VSTD::forward<const _T1>(__p.first);}
        -:  732:#endif  // _LIBCPP_CXX03_LANG
        -:  733:};
        -:  734:
        -:  735:template <>
        -:  736:struct __get_pair<1>
        -:  737:{
        -:  738:    template <class _T1, class _T2>
        -:  739:    static
        -:  740:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  741:    _T2&
        -:  742:    get(pair<_T1, _T2>& __p) _NOEXCEPT {return __p.second;}
        -:  743:
        -:  744:    template <class _T1, class _T2>
        -:  745:    static
        -:  746:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  747:    const _T2&
        -:  748:    get(const pair<_T1, _T2>& __p) _NOEXCEPT {return __p.second;}
        -:  749:
        -:  750:#ifndef _LIBCPP_CXX03_LANG
        -:  751:    template <class _T1, class _T2>
        -:  752:    static
        -:  753:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  754:    _T2&&
        -:  755:    get(pair<_T1, _T2>&& __p) _NOEXCEPT {return _VSTD::forward<_T2>(__p.second);}
        -:  756:
        -:  757:    template <class _T1, class _T2>
        -:  758:    static
        -:  759:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  760:    const _T2&&
        -:  761:    get(const pair<_T1, _T2>&& __p) _NOEXCEPT {return _VSTD::forward<const _T2>(__p.second);}
        -:  762:#endif  // _LIBCPP_CXX03_LANG
        -:  763:};
        -:  764:
        -:  765:template <size_t _Ip, class _T1, class _T2>
        -:  766:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  767:typename tuple_element<_Ip, pair<_T1, _T2> >::type&
        -:  768:get(pair<_T1, _T2>& __p) _NOEXCEPT
        -:  769:{
        -:  770:    return __get_pair<_Ip>::get(__p);
        -:  771:}
        -:  772:
        -:  773:template <size_t _Ip, class _T1, class _T2>
        -:  774:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  775:const typename tuple_element<_Ip, pair<_T1, _T2> >::type&
        -:  776:get(const pair<_T1, _T2>& __p) _NOEXCEPT
        -:  777:{
        -:  778:    return __get_pair<_Ip>::get(__p);
        -:  779:}
        -:  780:
        -:  781:#ifndef _LIBCPP_CXX03_LANG
        -:  782:template <size_t _Ip, class _T1, class _T2>
        -:  783:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  784:typename tuple_element<_Ip, pair<_T1, _T2> >::type&&
        -:  785:get(pair<_T1, _T2>&& __p) _NOEXCEPT
        -:  786:{
        -:  787:    return __get_pair<_Ip>::get(_VSTD::move(__p));
        -:  788:}
        -:  789:
        -:  790:template <size_t _Ip, class _T1, class _T2>
        -:  791:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:  792:const typename tuple_element<_Ip, pair<_T1, _T2> >::type&&
        -:  793:get(const pair<_T1, _T2>&& __p) _NOEXCEPT
        -:  794:{
        -:  795:    return __get_pair<_Ip>::get(_VSTD::move(__p));
        -:  796:}
        -:  797:#endif  // _LIBCPP_CXX03_LANG
        -:  798:
        -:  799:#if _LIBCPP_STD_VER > 11
        -:  800:template <class _T1, class _T2>
        -:  801:inline _LIBCPP_INLINE_VISIBILITY
        -:  802:constexpr _T1 & get(pair<_T1, _T2>& __p) _NOEXCEPT
        -:  803:{
        -:  804:    return __get_pair<0>::get(__p);
        -:  805:}
        -:  806:
        -:  807:template <class _T1, class _T2>
        -:  808:inline _LIBCPP_INLINE_VISIBILITY
        -:  809:constexpr _T1 const & get(pair<_T1, _T2> const& __p) _NOEXCEPT
        -:  810:{
        -:  811:    return __get_pair<0>::get(__p);
        -:  812:}
        -:  813:
        -:  814:template <class _T1, class _T2>
        -:  815:inline _LIBCPP_INLINE_VISIBILITY
        -:  816:constexpr _T1 && get(pair<_T1, _T2>&& __p) _NOEXCEPT
        -:  817:{
        -:  818:    return __get_pair<0>::get(_VSTD::move(__p));
        -:  819:}
        -:  820:
        -:  821:template <class _T1, class _T2>
        -:  822:inline _LIBCPP_INLINE_VISIBILITY
        -:  823:constexpr _T1 const && get(pair<_T1, _T2> const&& __p) _NOEXCEPT
        -:  824:{
        -:  825:    return __get_pair<0>::get(_VSTD::move(__p));
        -:  826:}
        -:  827:
        -:  828:template <class _T1, class _T2>
        -:  829:inline _LIBCPP_INLINE_VISIBILITY
        -:  830:constexpr _T1 & get(pair<_T2, _T1>& __p) _NOEXCEPT
        -:  831:{
        -:  832:    return __get_pair<1>::get(__p);
        -:  833:}
        -:  834:
        -:  835:template <class _T1, class _T2>
        -:  836:inline _LIBCPP_INLINE_VISIBILITY
        -:  837:constexpr _T1 const & get(pair<_T2, _T1> const& __p) _NOEXCEPT
        -:  838:{
        -:  839:    return __get_pair<1>::get(__p);
        -:  840:}
        -:  841:
        -:  842:template <class _T1, class _T2>
        -:  843:inline _LIBCPP_INLINE_VISIBILITY
        -:  844:constexpr _T1 && get(pair<_T2, _T1>&& __p) _NOEXCEPT
        -:  845:{
        -:  846:    return __get_pair<1>::get(_VSTD::move(__p));
        -:  847:}
        -:  848:
        -:  849:template <class _T1, class _T2>
        -:  850:inline _LIBCPP_INLINE_VISIBILITY
        -:  851:constexpr _T1 const && get(pair<_T2, _T1> const&& __p) _NOEXCEPT
        -:  852:{
        -:  853:    return __get_pair<1>::get(_VSTD::move(__p));
        -:  854:}
        -:  855:
        -:  856:#endif
        -:  857:
        -:  858:#if _LIBCPP_STD_VER > 11
        -:  859:
        -:  860:template<class _Tp, _Tp... _Ip>
        -:  861:struct _LIBCPP_TEMPLATE_VIS integer_sequence
        -:  862:{
        -:  863:    typedef _Tp value_type;
        -:  864:    static_assert( is_integral<_Tp>::value,
        -:  865:                  "std::integer_sequence can only be instantiated with an integral type" );
        -:  866:    static
        -:  867:    _LIBCPP_INLINE_VISIBILITY
        -:  868:    constexpr
        -:  869:    size_t
        -:  870:    size() noexcept { return sizeof...(_Ip); }
        -:  871:};
        -:  872:
        -:  873:template<size_t... _Ip>
        -:  874:    using index_sequence = integer_sequence<size_t, _Ip...>;
        -:  875:
        -:  876:#if __has_builtin(__make_integer_seq) && !defined(_LIBCPP_TESTING_FALLBACK_MAKE_INTEGER_SEQUENCE)
        -:  877:
        -:  878:template <class _Tp, _Tp _Ep>
        -:  879:using __make_integer_sequence = __make_integer_seq<integer_sequence, _Tp, _Ep>;
        -:  880:
        -:  881:#else
        -:  882:
        -:  883:template<typename _Tp, _Tp _Np> using __make_integer_sequence_unchecked =
        -:  884:  typename __detail::__make<_Np>::type::template __convert<integer_sequence, _Tp>;
        -:  885:
        -:  886:template <class _Tp, _Tp _Ep>
        -:  887:struct __make_integer_sequence_checked
        -:  888:{
        -:  889:    static_assert(is_integral<_Tp>::value,
        -:  890:                  "std::make_integer_sequence can only be instantiated with an integral type" );
        -:  891:    static_assert(0 <= _Ep, "std::make_integer_sequence must have a non-negative sequence length");
        -:  892:    // Workaround GCC bug by preventing bad installations when 0 <= _Ep
        -:  893:    // https://gcc.gnu.org/bugzilla/show_bug.cgi?id=68929
        -:  894:    typedef __make_integer_sequence_unchecked<_Tp, 0 <= _Ep ? _Ep : 0> type;
        -:  895:};
        -:  896:
        -:  897:template <class _Tp, _Tp _Ep>
        -:  898:using __make_integer_sequence = typename __make_integer_sequence_checked<_Tp, _Ep>::type;
        -:  899:
        -:  900:#endif
        -:  901:
        -:  902:template<class _Tp, _Tp _Np>
        -:  903:    using make_integer_sequence = __make_integer_sequence<_Tp, _Np>;
        -:  904:
        -:  905:template<size_t _Np>
        -:  906:    using make_index_sequence = make_integer_sequence<size_t, _Np>;
        -:  907:
        -:  908:template<class... _Tp>
        -:  909:    using index_sequence_for = make_index_sequence<sizeof...(_Tp)>;
        -:  910:
        -:  911:#endif  // _LIBCPP_STD_VER > 11
        -:  912:
        -:  913:#if _LIBCPP_STD_VER > 11
        -:  914:template<class _T1, class _T2 = _T1>
        -:  915:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  916:_T1 exchange(_T1& __obj, _T2 && __new_value)
        -:  917:{
        -:  918:    _T1 __old_value = _VSTD::move(__obj);
        -:  919:    __obj = _VSTD::forward<_T2>(__new_value);
        -:  920:    return __old_value;
        -:  921:}
        -:  922:#endif  // _LIBCPP_STD_VER > 11
        -:  923:
        -:  924:#if _LIBCPP_STD_VER > 14
        -:  925:
        -:  926:struct _LIBCPP_TYPE_VIS in_place_t {
        -:  927:    explicit in_place_t() = default;
        -:  928:};
        -:  929:_LIBCPP_INLINE_VAR constexpr in_place_t in_place{};
        -:  930:
        -:  931:template <class _Tp>
        -:  932:struct _LIBCPP_TEMPLATE_VIS in_place_type_t {
        -:  933:    explicit in_place_type_t() = default;
        -:  934:};
        -:  935:template <class _Tp>
        -:  936:_LIBCPP_INLINE_VAR constexpr in_place_type_t<_Tp> in_place_type{};
        -:  937:
        -:  938:template <size_t _Idx>
        -:  939:struct _LIBCPP_TYPE_VIS in_place_index_t {
        -:  940:    explicit in_place_index_t() = default;
        -:  941:};
        -:  942:template <size_t _Idx>
        -:  943:_LIBCPP_INLINE_VAR constexpr in_place_index_t<_Idx> in_place_index{};
        -:  944:
        -:  945:template <class _Tp> struct __is_inplace_type_imp : false_type {};
        -:  946:template <class _Tp> struct __is_inplace_type_imp<in_place_type_t<_Tp>> : true_type {};
        -:  947:
        -:  948:template <class _Tp>
        -:  949:using __is_inplace_type = __is_inplace_type_imp<__uncvref_t<_Tp>>;
        -:  950:
        -:  951:template <class _Tp> struct __is_inplace_index_imp : false_type {};
        -:  952:template <size_t _Idx> struct __is_inplace_index_imp<in_place_index_t<_Idx>> : true_type {};
        -:  953:
        -:  954:template <class _Tp>
        -:  955:using __is_inplace_index = __is_inplace_index_imp<__uncvref_t<_Tp>>;
        -:  956:
        -:  957:#endif // _LIBCPP_STD_VER > 14
        -:  958:
        -:  959:template <class _Arg, class _Result>
        -:  960:struct _LIBCPP_TEMPLATE_VIS unary_function
        -:  961:{
        -:  962:    typedef _Arg    argument_type;
        -:  963:    typedef _Result result_type;
        -:  964:};
        -:  965:
        -:  966:template <class _Size>
        -:  967:inline _LIBCPP_INLINE_VISIBILITY
        -:  968:_Size
        -:  969:__loadword(const void* __p)
        -:  970:{
        -:  971:    _Size __r;
        -:  972:    std::memcpy(&__r, __p, sizeof(__r));
        -:  973:    return __r;
        -:  974:}
        -:  975:
        -:  976:// We use murmur2 when size_t is 32 bits, and cityhash64 when size_t
        -:  977:// is 64 bits.  This is because cityhash64 uses 64bit x 64bit
        -:  978:// multiplication, which can be very slow on 32-bit systems.
        -:  979:template <class _Size, size_t = sizeof(_Size)*__CHAR_BIT__>
        -:  980:struct __murmur2_or_cityhash;
        -:  981:
        -:  982:template <class _Size>
        -:  983:struct __murmur2_or_cityhash<_Size, 32>
        -:  984:{
        -:  985:    inline _Size operator()(const void* __key, _Size __len)
        -:  986:         _LIBCPP_DISABLE_UBSAN_UNSIGNED_INTEGER_CHECK;
        -:  987:};
        -:  988:
        -:  989:// murmur2
        -:  990:template <class _Size>
        -:  991:_Size
        -:  992:__murmur2_or_cityhash<_Size, 32>::operator()(const void* __key, _Size __len)
        -:  993:{
        -:  994:    const _Size __m = 0x5bd1e995;
        -:  995:    const _Size __r = 24;
        -:  996:    _Size __h = __len;
        -:  997:    const unsigned char* __data = static_cast<const unsigned char*>(__key);
        -:  998:    for (; __len >= 4; __data += 4, __len -= 4)
        -:  999:    {
        -: 1000:        _Size __k = __loadword<_Size>(__data);
        -: 1001:        __k *= __m;
        -: 1002:        __k ^= __k >> __r;
        -: 1003:        __k *= __m;
        -: 1004:        __h *= __m;
        -: 1005:        __h ^= __k;
        -: 1006:    }
        -: 1007:    switch (__len)
        -: 1008:    {
        -: 1009:    case 3:
        -: 1010:        __h ^= __data[2] << 16;
        -: 1011:    case 2:
        -: 1012:        __h ^= __data[1] << 8;
        -: 1013:    case 1:
        -: 1014:        __h ^= __data[0];
        -: 1015:        __h *= __m;
        -: 1016:    }
        -: 1017:    __h ^= __h >> 13;
        -: 1018:    __h *= __m;
        -: 1019:    __h ^= __h >> 15;
        -: 1020:    return __h;
        -: 1021:}
        -: 1022:
        -: 1023:template <class _Size>
        -: 1024:struct __murmur2_or_cityhash<_Size, 64>
        -: 1025:{
        -: 1026:    inline _Size operator()(const void* __key, _Size __len)  _LIBCPP_DISABLE_UBSAN_UNSIGNED_INTEGER_CHECK;
        -: 1027:
        -: 1028: private:
        -: 1029:  // Some primes between 2^63 and 2^64.
        -: 1030:  static const _Size __k0 = 0xc3a5c85c97cb3127ULL;
        -: 1031:  static const _Size __k1 = 0xb492b66fbe98f273ULL;
        -: 1032:  static const _Size __k2 = 0x9ae16a3b2f90404fULL;
        -: 1033:  static const _Size __k3 = 0xc949d7c7509e6557ULL;
        -: 1034:
        -: 1035:  static _Size __rotate(_Size __val, int __shift) {
        -: 1036:    return __shift == 0 ? __val : ((__val >> __shift) | (__val << (64 - __shift)));
        -: 1037:  }
        -: 1038:
        -: 1039:  static _Size __rotate_by_at_least_1(_Size __val, int __shift) {
        -: 1040:    return (__val >> __shift) | (__val << (64 - __shift));
        -: 1041:  }
        -: 1042:
        -: 1043:  static _Size __shift_mix(_Size __val) {
        -: 1044:    return __val ^ (__val >> 47);
        -: 1045:  }
        -: 1046:
        -: 1047:  static _Size __hash_len_16(_Size __u, _Size __v)
        -: 1048:     _LIBCPP_DISABLE_UBSAN_UNSIGNED_INTEGER_CHECK
        -: 1049:  {
        -: 1050:    const _Size __mul = 0x9ddfea08eb382d69ULL;
        -: 1051:    _Size __a = (__u ^ __v) * __mul;
        -: 1052:    __a ^= (__a >> 47);
        -: 1053:    _Size __b = (__v ^ __a) * __mul;
        -: 1054:    __b ^= (__b >> 47);
        -: 1055:    __b *= __mul;
        -: 1056:    return __b;
        -: 1057:  }
        -: 1058:
        -: 1059:  static _Size __hash_len_0_to_16(const char* __s, _Size __len)
        -: 1060:     _LIBCPP_DISABLE_UBSAN_UNSIGNED_INTEGER_CHECK
        -: 1061:  {
        -: 1062:    if (__len > 8) {
        -: 1063:      const _Size __a = __loadword<_Size>(__s);
        -: 1064:      const _Size __b = __loadword<_Size>(__s + __len - 8);
        -: 1065:      return __hash_len_16(__a, __rotate_by_at_least_1(__b + __len, __len)) ^ __b;
        -: 1066:    }
        -: 1067:    if (__len >= 4) {
        -: 1068:      const uint32_t __a = __loadword<uint32_t>(__s);
        -: 1069:      const uint32_t __b = __loadword<uint32_t>(__s + __len - 4);
        -: 1070:      return __hash_len_16(__len + (__a << 3), __b);
        -: 1071:    }
        -: 1072:    if (__len > 0) {
        -: 1073:      const unsigned char __a = __s[0];
        -: 1074:      const unsigned char __b = __s[__len >> 1];
        -: 1075:      const unsigned char __c = __s[__len - 1];
        -: 1076:      const uint32_t __y = static_cast<uint32_t>(__a) +
        -: 1077:                           (static_cast<uint32_t>(__b) << 8);
        -: 1078:      const uint32_t __z = __len + (static_cast<uint32_t>(__c) << 2);
        -: 1079:      return __shift_mix(__y * __k2 ^ __z * __k3) * __k2;
        -: 1080:    }
        -: 1081:    return __k2;
        -: 1082:  }
        -: 1083:
        -: 1084:  static _Size __hash_len_17_to_32(const char *__s, _Size __len)
        -: 1085:     _LIBCPP_DISABLE_UBSAN_UNSIGNED_INTEGER_CHECK
        -: 1086:  {
        -: 1087:    const _Size __a = __loadword<_Size>(__s) * __k1;
        -: 1088:    const _Size __b = __loadword<_Size>(__s + 8);
        -: 1089:    const _Size __c = __loadword<_Size>(__s + __len - 8) * __k2;
        -: 1090:    const _Size __d = __loadword<_Size>(__s + __len - 16) * __k0;
        -: 1091:    return __hash_len_16(__rotate(__a - __b, 43) + __rotate(__c, 30) + __d,
        -: 1092:                         __a + __rotate(__b ^ __k3, 20) - __c + __len);
        -: 1093:  }
        -: 1094:
        -: 1095:  // Return a 16-byte hash for 48 bytes.  Quick and dirty.
        -: 1096:  // Callers do best to use "random-looking" values for a and b.
        -: 1097:  static pair<_Size, _Size> __weak_hash_len_32_with_seeds(
        -: 1098:      _Size __w, _Size __x, _Size __y, _Size __z, _Size __a, _Size __b)
        -: 1099:        _LIBCPP_DISABLE_UBSAN_UNSIGNED_INTEGER_CHECK
        -: 1100:  {
        -: 1101:    __a += __w;
        -: 1102:    __b = __rotate(__b + __a + __z, 21);
        -: 1103:    const _Size __c = __a;
        -: 1104:    __a += __x;
        -: 1105:    __a += __y;
        -: 1106:    __b += __rotate(__a, 44);
        -: 1107:    return pair<_Size, _Size>(__a + __z, __b + __c);
        -: 1108:  }
        -: 1109:
        -: 1110:  // Return a 16-byte hash for s[0] ... s[31], a, and b.  Quick and dirty.
        -: 1111:  static pair<_Size, _Size> __weak_hash_len_32_with_seeds(
        -: 1112:      const char* __s, _Size __a, _Size __b)
        -: 1113:    _LIBCPP_DISABLE_UBSAN_UNSIGNED_INTEGER_CHECK
        -: 1114:  {
        -: 1115:    return __weak_hash_len_32_with_seeds(__loadword<_Size>(__s),
        -: 1116:                                         __loadword<_Size>(__s + 8),
        -: 1117:                                         __loadword<_Size>(__s + 16),
        -: 1118:                                         __loadword<_Size>(__s + 24),
        -: 1119:                                         __a,
        -: 1120:                                         __b);
        -: 1121:  }
        -: 1122:
        -: 1123:  // Return an 8-byte hash for 33 to 64 bytes.
        -: 1124:  static _Size __hash_len_33_to_64(const char *__s, size_t __len)
        -: 1125:    _LIBCPP_DISABLE_UBSAN_UNSIGNED_INTEGER_CHECK
        -: 1126:  {
        -: 1127:    _Size __z = __loadword<_Size>(__s + 24);
        -: 1128:    _Size __a = __loadword<_Size>(__s) +
        -: 1129:                (__len + __loadword<_Size>(__s + __len - 16)) * __k0;
        -: 1130:    _Size __b = __rotate(__a + __z, 52);
        -: 1131:    _Size __c = __rotate(__a, 37);
        -: 1132:    __a += __loadword<_Size>(__s + 8);
        -: 1133:    __c += __rotate(__a, 7);
        -: 1134:    __a += __loadword<_Size>(__s + 16);
        -: 1135:    _Size __vf = __a + __z;
        -: 1136:    _Size __vs = __b + __rotate(__a, 31) + __c;
        -: 1137:    __a = __loadword<_Size>(__s + 16) + __loadword<_Size>(__s + __len - 32);
        -: 1138:    __z += __loadword<_Size>(__s + __len - 8);
        -: 1139:    __b = __rotate(__a + __z, 52);
        -: 1140:    __c = __rotate(__a, 37);
        -: 1141:    __a += __loadword<_Size>(__s + __len - 24);
        -: 1142:    __c += __rotate(__a, 7);
        -: 1143:    __a += __loadword<_Size>(__s + __len - 16);
        -: 1144:    _Size __wf = __a + __z;
        -: 1145:    _Size __ws = __b + __rotate(__a, 31) + __c;
        -: 1146:    _Size __r = __shift_mix((__vf + __ws) * __k2 + (__wf + __vs) * __k0);
        -: 1147:    return __shift_mix(__r * __k0 + __vs) * __k2;
        -: 1148:  }
        -: 1149:};
        -: 1150:
        -: 1151:// cityhash64
        -: 1152:template <class _Size>
        -: 1153:_Size
        -: 1154:__murmur2_or_cityhash<_Size, 64>::operator()(const void* __key, _Size __len)
        -: 1155:{
        -: 1156:  const char* __s = static_cast<const char*>(__key);
        -: 1157:  if (__len <= 32) {
        -: 1158:    if (__len <= 16) {
        -: 1159:      return __hash_len_0_to_16(__s, __len);
        -: 1160:    } else {
        -: 1161:      return __hash_len_17_to_32(__s, __len);
        -: 1162:    }
        -: 1163:  } else if (__len <= 64) {
        -: 1164:    return __hash_len_33_to_64(__s, __len);
        -: 1165:  }
        -: 1166:
        -: 1167:  // For strings over 64 bytes we hash the end first, and then as we
        -: 1168:  // loop we keep 56 bytes of state: v, w, x, y, and z.
        -: 1169:  _Size __x = __loadword<_Size>(__s + __len - 40);
        -: 1170:  _Size __y = __loadword<_Size>(__s + __len - 16) +
        -: 1171:              __loadword<_Size>(__s + __len - 56);
        -: 1172:  _Size __z = __hash_len_16(__loadword<_Size>(__s + __len - 48) + __len,
        -: 1173:                          __loadword<_Size>(__s + __len - 24));
        -: 1174:  pair<_Size, _Size> __v = __weak_hash_len_32_with_seeds(__s + __len - 64, __len, __z);
        -: 1175:  pair<_Size, _Size> __w = __weak_hash_len_32_with_seeds(__s + __len - 32, __y + __k1, __x);
        -: 1176:  __x = __x * __k1 + __loadword<_Size>(__s);
        -: 1177:
        -: 1178:  // Decrease len to the nearest multiple of 64, and operate on 64-byte chunks.
        -: 1179:  __len = (__len - 1) & ~static_cast<_Size>(63);
        -: 1180:  do {
        -: 1181:    __x = __rotate(__x + __y + __v.first + __loadword<_Size>(__s + 8), 37) * __k1;
        -: 1182:    __y = __rotate(__y + __v.second + __loadword<_Size>(__s + 48), 42) * __k1;
        -: 1183:    __x ^= __w.second;
        -: 1184:    __y += __v.first + __loadword<_Size>(__s + 40);
        -: 1185:    __z = __rotate(__z + __w.first, 33) * __k1;
        -: 1186:    __v = __weak_hash_len_32_with_seeds(__s, __v.second * __k1, __x + __w.first);
        -: 1187:    __w = __weak_hash_len_32_with_seeds(__s + 32, __z + __w.second,
        -: 1188:                                        __y + __loadword<_Size>(__s + 16));
        -: 1189:    std::swap(__z, __x);
        -: 1190:    __s += 64;
        -: 1191:    __len -= 64;
        -: 1192:  } while (__len != 0);
        -: 1193:  return __hash_len_16(
        -: 1194:      __hash_len_16(__v.first, __w.first) + __shift_mix(__y) * __k1 + __z,
        -: 1195:      __hash_len_16(__v.second, __w.second) + __x);
        -: 1196:}
        -: 1197:
        -: 1198:template <class _Tp, size_t = sizeof(_Tp) / sizeof(size_t)>
        -: 1199:struct __scalar_hash;
        -: 1200:
        -: 1201:template <class _Tp>
        -: 1202:struct __scalar_hash<_Tp, 0>
        -: 1203:    : public unary_function<_Tp, size_t>
        -: 1204:{
        -: 1205:    _LIBCPP_INLINE_VISIBILITY
        -: 1206:    size_t operator()(_Tp __v) const _NOEXCEPT
        -: 1207:    {
        -: 1208:        union
        -: 1209:        {
        -: 1210:            _Tp    __t;
        -: 1211:            size_t __a;
        -: 1212:        } __u;
        -: 1213:        __u.__a = 0;
        -: 1214:        __u.__t = __v;
        -: 1215:        return __u.__a;
        -: 1216:    }
        -: 1217:};
        -: 1218:
        -: 1219:template <class _Tp>
        -: 1220:struct __scalar_hash<_Tp, 1>
        -: 1221:    : public unary_function<_Tp, size_t>
        -: 1222:{
        -: 1223:    _LIBCPP_INLINE_VISIBILITY
        -: 1224:    size_t operator()(_Tp __v) const _NOEXCEPT
        -: 1225:    {
        -: 1226:        union
        -: 1227:        {
        -: 1228:            _Tp    __t;
        -: 1229:            size_t __a;
        -: 1230:        } __u;
        -: 1231:        __u.__t = __v;
        -: 1232:        return __u.__a;
        -: 1233:    }
        -: 1234:};
        -: 1235:
        -: 1236:template <class _Tp>
        -: 1237:struct __scalar_hash<_Tp, 2>
        -: 1238:    : public unary_function<_Tp, size_t>
        -: 1239:{
        -: 1240:    _LIBCPP_INLINE_VISIBILITY
        -: 1241:    size_t operator()(_Tp __v) const _NOEXCEPT
        -: 1242:    {
        -: 1243:        union
        -: 1244:        {
        -: 1245:            _Tp __t;
        -: 1246:            struct
        -: 1247:            {
        -: 1248:                size_t __a;
        -: 1249:                size_t __b;
        -: 1250:            } __s;
        -: 1251:        } __u;
        -: 1252:        __u.__t = __v;
        -: 1253:        return __murmur2_or_cityhash<size_t>()(&__u, sizeof(__u));
        -: 1254:    }
        -: 1255:};
        -: 1256:
        -: 1257:template <class _Tp>
        -: 1258:struct __scalar_hash<_Tp, 3>
        -: 1259:    : public unary_function<_Tp, size_t>
        -: 1260:{
        -: 1261:    _LIBCPP_INLINE_VISIBILITY
        -: 1262:    size_t operator()(_Tp __v) const _NOEXCEPT
        -: 1263:    {
        -: 1264:        union
        -: 1265:        {
        -: 1266:            _Tp __t;
        -: 1267:            struct
        -: 1268:            {
        -: 1269:                size_t __a;
        -: 1270:                size_t __b;
        -: 1271:                size_t __c;
        -: 1272:            } __s;
        -: 1273:        } __u;
        -: 1274:        __u.__t = __v;
        -: 1275:        return __murmur2_or_cityhash<size_t>()(&__u, sizeof(__u));
        -: 1276:    }
        -: 1277:};
        -: 1278:
        -: 1279:template <class _Tp>
        -: 1280:struct __scalar_hash<_Tp, 4>
        -: 1281:    : public unary_function<_Tp, size_t>
        -: 1282:{
        -: 1283:    _LIBCPP_INLINE_VISIBILITY
        -: 1284:    size_t operator()(_Tp __v) const _NOEXCEPT
        -: 1285:    {
        -: 1286:        union
        -: 1287:        {
        -: 1288:            _Tp __t;
        -: 1289:            struct
        -: 1290:            {
        -: 1291:                size_t __a;
        -: 1292:                size_t __b;
        -: 1293:                size_t __c;
        -: 1294:                size_t __d;
        -: 1295:            } __s;
        -: 1296:        } __u;
        -: 1297:        __u.__t = __v;
        -: 1298:        return __murmur2_or_cityhash<size_t>()(&__u, sizeof(__u));
        -: 1299:    }
        -: 1300:};
        -: 1301:
        -: 1302:struct _PairT {
        -: 1303:  size_t first;
        -: 1304:  size_t second;
        -: 1305:};
        -: 1306:
        -: 1307:_LIBCPP_INLINE_VISIBILITY
        -: 1308:inline size_t __hash_combine(size_t __lhs, size_t __rhs) _NOEXCEPT {
        -: 1309:    typedef __scalar_hash<_PairT> _HashT;
        -: 1310:    const _PairT __p = {__lhs, __rhs};
        -: 1311:    return _HashT()(__p);
        -: 1312:}
        -: 1313:
        -: 1314:template<class _Tp>
        -: 1315:struct _LIBCPP_TEMPLATE_VIS hash<_Tp*>
        -: 1316:    : public unary_function<_Tp*, size_t>
        -: 1317:{
        -: 1318:    _LIBCPP_INLINE_VISIBILITY
        -: 1319:    size_t operator()(_Tp* __v) const _NOEXCEPT
        -: 1320:    {
        -: 1321:        union
        -: 1322:        {
        -: 1323:            _Tp* __t;
        -: 1324:            size_t __a;
        -: 1325:        } __u;
        -: 1326:        __u.__t = __v;
        -: 1327:        return __murmur2_or_cityhash<size_t>()(&__u, sizeof(__u));
        -: 1328:    }
        -: 1329:};
        -: 1330:
        -: 1331:
        -: 1332:template <>
        -: 1333:struct _LIBCPP_TEMPLATE_VIS hash<bool>
        -: 1334:    : public unary_function<bool, size_t>
        -: 1335:{
        -: 1336:    _LIBCPP_INLINE_VISIBILITY
        -: 1337:    size_t operator()(bool __v) const _NOEXCEPT {return static_cast<size_t>(__v);}
        -: 1338:};
        -: 1339:
        -: 1340:template <>
        -: 1341:struct _LIBCPP_TEMPLATE_VIS hash<char>
        -: 1342:    : public unary_function<char, size_t>
        -: 1343:{
        -: 1344:    _LIBCPP_INLINE_VISIBILITY
        -: 1345:    size_t operator()(char __v) const _NOEXCEPT {return static_cast<size_t>(__v);}
        -: 1346:};
        -: 1347:
        -: 1348:template <>
        -: 1349:struct _LIBCPP_TEMPLATE_VIS hash<signed char>
        -: 1350:    : public unary_function<signed char, size_t>
        -: 1351:{
        -: 1352:    _LIBCPP_INLINE_VISIBILITY
        -: 1353:    size_t operator()(signed char __v) const _NOEXCEPT {return static_cast<size_t>(__v);}
        -: 1354:};
        -: 1355:
        -: 1356:template <>
        -: 1357:struct _LIBCPP_TEMPLATE_VIS hash<unsigned char>
        -: 1358:    : public unary_function<unsigned char, size_t>
        -: 1359:{
        -: 1360:    _LIBCPP_INLINE_VISIBILITY
        -: 1361:    size_t operator()(unsigned char __v) const _NOEXCEPT {return static_cast<size_t>(__v);}
        -: 1362:};
        -: 1363:
        -: 1364:#ifndef _LIBCPP_HAS_NO_UNICODE_CHARS
        -: 1365:
        -: 1366:template <>
        -: 1367:struct _LIBCPP_TEMPLATE_VIS hash<char16_t>
        -: 1368:    : public unary_function<char16_t, size_t>
        -: 1369:{
        -: 1370:    _LIBCPP_INLINE_VISIBILITY
        -: 1371:    size_t operator()(char16_t __v) const _NOEXCEPT {return static_cast<size_t>(__v);}
        -: 1372:};
        -: 1373:
        -: 1374:template <>
        -: 1375:struct _LIBCPP_TEMPLATE_VIS hash<char32_t>
        -: 1376:    : public unary_function<char32_t, size_t>
        -: 1377:{
        -: 1378:    _LIBCPP_INLINE_VISIBILITY
        -: 1379:    size_t operator()(char32_t __v) const _NOEXCEPT {return static_cast<size_t>(__v);}
        -: 1380:};
        -: 1381:
        -: 1382:#endif  // _LIBCPP_HAS_NO_UNICODE_CHARS
        -: 1383:
        -: 1384:template <>
        -: 1385:struct _LIBCPP_TEMPLATE_VIS hash<wchar_t>
        -: 1386:    : public unary_function<wchar_t, size_t>
        -: 1387:{
        -: 1388:    _LIBCPP_INLINE_VISIBILITY
        -: 1389:    size_t operator()(wchar_t __v) const _NOEXCEPT {return static_cast<size_t>(__v);}
        -: 1390:};
        -: 1391:
        -: 1392:template <>
        -: 1393:struct _LIBCPP_TEMPLATE_VIS hash<short>
        -: 1394:    : public unary_function<short, size_t>
        -: 1395:{
        -: 1396:    _LIBCPP_INLINE_VISIBILITY
        -: 1397:    size_t operator()(short __v) const _NOEXCEPT {return static_cast<size_t>(__v);}
        -: 1398:};
        -: 1399:
        -: 1400:template <>
        -: 1401:struct _LIBCPP_TEMPLATE_VIS hash<unsigned short>
        -: 1402:    : public unary_function<unsigned short, size_t>
        -: 1403:{
        -: 1404:    _LIBCPP_INLINE_VISIBILITY
        -: 1405:    size_t operator()(unsigned short __v) const _NOEXCEPT {return static_cast<size_t>(__v);}
        -: 1406:};
        -: 1407:
        -: 1408:template <>
        -: 1409:struct _LIBCPP_TEMPLATE_VIS hash<int>
        -: 1410:    : public unary_function<int, size_t>
        -: 1411:{
        -: 1412:    _LIBCPP_INLINE_VISIBILITY
        -: 1413:    size_t operator()(int __v) const _NOEXCEPT {return static_cast<size_t>(__v);}
        -: 1414:};
        -: 1415:
        -: 1416:template <>
        -: 1417:struct _LIBCPP_TEMPLATE_VIS hash<unsigned int>
        -: 1418:    : public unary_function<unsigned int, size_t>
        -: 1419:{
        -: 1420:    _LIBCPP_INLINE_VISIBILITY
        -: 1421:    size_t operator()(unsigned int __v) const _NOEXCEPT {return static_cast<size_t>(__v);}
        -: 1422:};
        -: 1423:
        -: 1424:template <>
        -: 1425:struct _LIBCPP_TEMPLATE_VIS hash<long>
        -: 1426:    : public unary_function<long, size_t>
        -: 1427:{
        -: 1428:    _LIBCPP_INLINE_VISIBILITY
        -: 1429:    size_t operator()(long __v) const _NOEXCEPT {return static_cast<size_t>(__v);}
        -: 1430:};
        -: 1431:
        -: 1432:template <>
        -: 1433:struct _LIBCPP_TEMPLATE_VIS hash<unsigned long>
        -: 1434:    : public unary_function<unsigned long, size_t>
        -: 1435:{
        -: 1436:    _LIBCPP_INLINE_VISIBILITY
        -: 1437:    size_t operator()(unsigned long __v) const _NOEXCEPT {return static_cast<size_t>(__v);}
        -: 1438:};
        -: 1439:
        -: 1440:template <>
        -: 1441:struct _LIBCPP_TEMPLATE_VIS hash<long long>
        -: 1442:    : public __scalar_hash<long long>
        -: 1443:{
        -: 1444:};
        -: 1445:
        -: 1446:template <>
        -: 1447:struct _LIBCPP_TEMPLATE_VIS hash<unsigned long long>
        -: 1448:    : public __scalar_hash<unsigned long long>
        -: 1449:{
        -: 1450:};
        -: 1451:
        -: 1452:#ifndef _LIBCPP_HAS_NO_INT128
        -: 1453:
        -: 1454:template <>
        -: 1455:struct _LIBCPP_TEMPLATE_VIS hash<__int128_t>
        -: 1456:    : public __scalar_hash<__int128_t>
        -: 1457:{
        -: 1458:};
        -: 1459:
        -: 1460:template <>
        -: 1461:struct _LIBCPP_TEMPLATE_VIS hash<__uint128_t>
        -: 1462:    : public __scalar_hash<__uint128_t>
        -: 1463:{
        -: 1464:};
        -: 1465:
        -: 1466:#endif
        -: 1467:
        -: 1468:template <>
        -: 1469:struct _LIBCPP_TEMPLATE_VIS hash<float>
        -: 1470:    : public __scalar_hash<float>
        -: 1471:{
        -: 1472:    _LIBCPP_INLINE_VISIBILITY
        -: 1473:    size_t operator()(float __v) const _NOEXCEPT
        -: 1474:    {
        -: 1475:        // -0.0 and 0.0 should return same hash
        -: 1476:       if (__v == 0)
        -: 1477:           return 0;
        -: 1478:        return __scalar_hash<float>::operator()(__v);
        -: 1479:    }
        -: 1480:};
        -: 1481:
        -: 1482:template <>
        -: 1483:struct _LIBCPP_TEMPLATE_VIS hash<double>
        -: 1484:    : public __scalar_hash<double>
        -: 1485:{
        -: 1486:    _LIBCPP_INLINE_VISIBILITY
        -: 1487:    size_t operator()(double __v) const _NOEXCEPT
        -: 1488:    {
        -: 1489:        // -0.0 and 0.0 should return same hash
        -: 1490:       if (__v == 0)
        -: 1491:           return 0;
        -: 1492:        return __scalar_hash<double>::operator()(__v);
        -: 1493:    }
        -: 1494:};
        -: 1495:
        -: 1496:template <>
        -: 1497:struct _LIBCPP_TEMPLATE_VIS hash<long double>
        -: 1498:    : public __scalar_hash<long double>
        -: 1499:{
        -: 1500:    _LIBCPP_INLINE_VISIBILITY
        -: 1501:    size_t operator()(long double __v) const _NOEXCEPT
        -: 1502:    {
        -: 1503:        // -0.0 and 0.0 should return same hash
        -: 1504:        if (__v == 0)
        -: 1505:            return 0;
        -: 1506:#if defined(__i386__)
        -: 1507:        // Zero out padding bits
        -: 1508:        union
        -: 1509:        {
        -: 1510:            long double __t;
        -: 1511:            struct
        -: 1512:            {
        -: 1513:                size_t __a;
        -: 1514:                size_t __b;
        -: 1515:                size_t __c;
        -: 1516:                size_t __d;
        -: 1517:            } __s;
        -: 1518:        } __u;
        -: 1519:        __u.__s.__a = 0;
        -: 1520:        __u.__s.__b = 0;
        -: 1521:        __u.__s.__c = 0;
        -: 1522:        __u.__s.__d = 0;
        -: 1523:        __u.__t = __v;
        -: 1524:        return __u.__s.__a ^ __u.__s.__b ^ __u.__s.__c ^ __u.__s.__d;
        -: 1525:#elif defined(__x86_64__)
        -: 1526:        // Zero out padding bits
        -: 1527:        union
        -: 1528:        {
        -: 1529:            long double __t;
        -: 1530:            struct
        -: 1531:            {
        -: 1532:                size_t __a;
        -: 1533:                size_t __b;
        -: 1534:            } __s;
        -: 1535:        } __u;
        -: 1536:        __u.__s.__a = 0;
        -: 1537:        __u.__s.__b = 0;
        -: 1538:        __u.__t = __v;
        -: 1539:        return __u.__s.__a ^ __u.__s.__b;
        -: 1540:#else
        -: 1541:        return __scalar_hash<long double>::operator()(__v);
        -: 1542:#endif
        -: 1543:    }
        -: 1544:};
        -: 1545:
        -: 1546:#if _LIBCPP_STD_VER > 11
        -: 1547:
        -: 1548:template <class _Tp, bool = is_enum<_Tp>::value>
        -: 1549:struct _LIBCPP_TEMPLATE_VIS __enum_hash
        -: 1550:    : public unary_function<_Tp, size_t>
        -: 1551:{
        -: 1552:    _LIBCPP_INLINE_VISIBILITY
        -: 1553:    size_t operator()(_Tp __v) const _NOEXCEPT
        -: 1554:    {
        -: 1555:        typedef typename underlying_type<_Tp>::type type;
        -: 1556:        return hash<type>{}(static_cast<type>(__v));
        -: 1557:    }
        -: 1558:};
        -: 1559:template <class _Tp>
        -: 1560:struct _LIBCPP_TEMPLATE_VIS __enum_hash<_Tp, false> {
        -: 1561:    __enum_hash() = delete;
        -: 1562:    __enum_hash(__enum_hash const&) = delete;
        -: 1563:    __enum_hash& operator=(__enum_hash const&) = delete;
        -: 1564:};
        -: 1565:
        -: 1566:template <class _Tp>
        -: 1567:struct _LIBCPP_TEMPLATE_VIS hash : public __enum_hash<_Tp>
        -: 1568:{
        -: 1569:};
        -: 1570:#endif
        -: 1571:
        -: 1572:#if _LIBCPP_STD_VER > 14
        -: 1573:
        -: 1574:template <>
        -: 1575:struct _LIBCPP_TEMPLATE_VIS hash<nullptr_t>
        -: 1576:  : public unary_function<nullptr_t, size_t>
        -: 1577:{
        -: 1578:  _LIBCPP_INLINE_VISIBILITY
        -: 1579:  size_t operator()(nullptr_t) const _NOEXCEPT {
        -: 1580:    return 662607004ull;
        -: 1581:  }
        -: 1582:};
        -: 1583:#endif
        -: 1584:
        -: 1585:#ifndef _LIBCPP_CXX03_LANG
        -: 1586:template <class _Key, class _Hash>
        -: 1587:using __check_hash_requirements = integral_constant<bool,
        -: 1588:    is_copy_constructible<_Hash>::value &&
        -: 1589:    is_move_constructible<_Hash>::value &&
        -: 1590:    __invokable_r<size_t, _Hash, _Key const&>::value
        -: 1591:>;
        -: 1592:
        -: 1593:template <class _Key, class _Hash = std::hash<_Key> >
        -: 1594:using __has_enabled_hash = integral_constant<bool,
        -: 1595:    __check_hash_requirements<_Key, _Hash>::value &&
        -: 1596:    is_default_constructible<_Hash>::value
        -: 1597:>;
        -: 1598:
        -: 1599:#if _LIBCPP_STD_VER > 14
        -: 1600:template <class _Type, class>
        -: 1601:using __enable_hash_helper_imp = _Type;
        -: 1602:
        -: 1603:template <class _Type, class ..._Keys>
        -: 1604:using __enable_hash_helper = __enable_hash_helper_imp<_Type,
        -: 1605:  typename enable_if<__all<__has_enabled_hash<_Keys>::value...>::value>::type
        -: 1606:>;
        -: 1607:#else
        -: 1608:template <class _Type, class ...>
        -: 1609:using __enable_hash_helper = _Type;
        -: 1610:#endif
        -: 1611:
        -: 1612:#endif // !_LIBCPP_CXX03_LANG
        -: 1613:
        -: 1614:_LIBCPP_END_NAMESPACE_STD
        -: 1615:
        -: 1616:#endif  // _LIBCPP_UTILITY
