        -:    0:Source:/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__tree
        -:    0:Graph:../020-TestCase.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:// -*- C++ -*-
        -:    2://===----------------------------------------------------------------------===//
        -:    3://
        -:    4://                     The LLVM Compiler Infrastructure
        -:    5://
        -:    6:// This file is dual licensed under the MIT and the University of Illinois Open
        -:    7:// Source Licenses. See LICENSE.TXT for details.
        -:    8://
        -:    9://===----------------------------------------------------------------------===//
        -:   10:
        -:   11:#ifndef _LIBCPP___TREE
        -:   12:#define _LIBCPP___TREE
        -:   13:
        -:   14:#include <__config>
        -:   15:#include <iterator>
        -:   16:#include <memory>
        -:   17:#include <stdexcept>
        -:   18:#include <algorithm>
        -:   19:
        -:   20:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:   21:#pragma GCC system_header
        -:   22:#endif
        -:   23:
        -:   24:_LIBCPP_PUSH_MACROS
        -:   25:#include <__undef_macros>
        -:   26:
        -:   27:
        -:   28:_LIBCPP_BEGIN_NAMESPACE_STD
        -:   29:
        -:   30:template <class _Tp, class _Compare, class _Allocator> class __tree;
        -:   31:template <class _Tp, class _NodePtr, class _DiffType>
        -:   32:    class _LIBCPP_TEMPLATE_VIS __tree_iterator;
        -:   33:template <class _Tp, class _ConstNodePtr, class _DiffType>
        -:   34:    class _LIBCPP_TEMPLATE_VIS __tree_const_iterator;
        -:   35:
        -:   36:template <class _Pointer> class __tree_end_node;
        -:   37:template <class _VoidPtr> class __tree_node_base;
        -:   38:template <class _Tp, class _VoidPtr> class __tree_node;
        -:   39:
        -:   40:template <class _Key, class _Value>
        -:   41:struct __value_type;
        -:   42:
        -:   43:template <class _Allocator> class __map_node_destructor;
        -:   44:template <class _TreeIterator> class _LIBCPP_TEMPLATE_VIS __map_iterator;
        -:   45:template <class _TreeIterator> class _LIBCPP_TEMPLATE_VIS __map_const_iterator;
        -:   46:
        -:   47:/*
        -:   48:
        -:   49:_NodePtr algorithms
        -:   50:
        -:   51:The algorithms taking _NodePtr are red black tree algorithms.  Those
        -:   52:algorithms taking a parameter named __root should assume that __root
        -:   53:points to a proper red black tree (unless otherwise specified).
        -:   54:
        -:   55:Each algorithm herein assumes that __root->__parent_ points to a non-null
        -:   56:structure which has a member __left_ which points back to __root.  No other
        -:   57:member is read or written to at __root->__parent_.
        -:   58:
        -:   59:__root->__parent_ will be referred to below (in comments only) as end_node.
        -:   60:end_node->__left_ is an externably accessible lvalue for __root, and can be
        -:   61:changed by node insertion and removal (without explicit reference to end_node).
        -:   62:
        -:   63:All nodes (with the exception of end_node), even the node referred to as
        -:   64:__root, have a non-null __parent_ field.
        -:   65:
        -:   66:*/
        -:   67:
        -:   68:// Returns:  true if __x is a left child of its parent, else false
        -:   69:// Precondition:  __x != nullptr.
        -:   70:template <class _NodePtr>
        -:   71:inline _LIBCPP_INLINE_VISIBILITY
        -:   72:bool
        -:   73:__tree_is_left_child(_NodePtr __x) _NOEXCEPT
        -:   74:{
    #####:   75:    return __x == __x->__parent_->__left_;
        -:   76:}
        -:   77:
        -:   78:// Determines if the subtree rooted at __x is a proper red black subtree.  If
        -:   79://    __x is a proper subtree, returns the black height (null counts as 1).  If
        -:   80://    __x is an improper subtree, returns 0.
        -:   81:template <class _NodePtr>
        -:   82:unsigned
        -:   83:__tree_sub_invariant(_NodePtr __x)
        -:   84:{
        -:   85:    if (__x == nullptr)
        -:   86:        return 1;
        -:   87:    // parent consistency checked by caller
        -:   88:    // check __x->__left_ consistency
        -:   89:    if (__x->__left_ != nullptr && __x->__left_->__parent_ != __x)
        -:   90:        return 0;
        -:   91:    // check __x->__right_ consistency
        -:   92:    if (__x->__right_ != nullptr && __x->__right_->__parent_ != __x)
        -:   93:        return 0;
        -:   94:    // check __x->__left_ != __x->__right_ unless both are nullptr
        -:   95:    if (__x->__left_ == __x->__right_ && __x->__left_ != nullptr)
        -:   96:        return 0;
        -:   97:    // If this is red, neither child can be red
        -:   98:    if (!__x->__is_black_)
        -:   99:    {
        -:  100:        if (__x->__left_ && !__x->__left_->__is_black_)
        -:  101:            return 0;
        -:  102:        if (__x->__right_ && !__x->__right_->__is_black_)
        -:  103:            return 0;
        -:  104:    }
        -:  105:    unsigned __h = __tree_sub_invariant(__x->__left_);
        -:  106:    if (__h == 0)
        -:  107:        return 0;  // invalid left subtree
        -:  108:    if (__h != __tree_sub_invariant(__x->__right_))
        -:  109:        return 0;  // invalid or different height right subtree
        -:  110:    return __h + __x->__is_black_;  // return black height of this node
        -:  111:}
        -:  112:
        -:  113:// Determines if the red black tree rooted at __root is a proper red black tree.
        -:  114://    __root == nullptr is a proper tree.  Returns true is __root is a proper
        -:  115://    red black tree, else returns false.
        -:  116:template <class _NodePtr>
        -:  117:bool
        -:  118:__tree_invariant(_NodePtr __root)
        -:  119:{
        -:  120:    if (__root == nullptr)
        -:  121:        return true;
        -:  122:    // check __x->__parent_ consistency
        -:  123:    if (__root->__parent_ == nullptr)
        -:  124:        return false;
        -:  125:    if (!__tree_is_left_child(__root))
        -:  126:        return false;
        -:  127:    // root must be black
        -:  128:    if (!__root->__is_black_)
        -:  129:        return false;
        -:  130:    // do normal node checks
        -:  131:    return __tree_sub_invariant(__root) != 0;
        -:  132:}
        -:  133:
        -:  134:// Returns:  pointer to the left-most node under __x.
        -:  135:// Precondition:  __x != nullptr.
        -:  136:template <class _NodePtr>
        -:  137:inline _LIBCPP_INLINE_VISIBILITY
        -:  138:_NodePtr
        -:  139:__tree_min(_NodePtr __x) _NOEXCEPT
        -:  140:{
    #####:  141:    while (__x->__left_ != nullptr)
    #####:  142:        __x = __x->__left_;
    #####:  143:    return __x;
        -:  144:}
        -:  145:
        -:  146:// Returns:  pointer to the right-most node under __x.
        -:  147:// Precondition:  __x != nullptr.
        -:  148:template <class _NodePtr>
        -:  149:inline _LIBCPP_INLINE_VISIBILITY
        -:  150:_NodePtr
        -:  151:__tree_max(_NodePtr __x) _NOEXCEPT
        -:  152:{
    #####:  153:    while (__x->__right_ != nullptr)
    #####:  154:        __x = __x->__right_;
    #####:  155:    return __x;
        -:  156:}
        -:  157:
        -:  158:// Returns:  pointer to the next in-order node after __x.
        -:  159:// Precondition:  __x != nullptr.
        -:  160:template <class _NodePtr>
        -:  161:_NodePtr
        -:  162:__tree_next(_NodePtr __x) _NOEXCEPT
        -:  163:{
        -:  164:    if (__x->__right_ != nullptr)
        -:  165:        return __tree_min(__x->__right_);
        -:  166:    while (!__tree_is_left_child(__x))
        -:  167:        __x = __x->__parent_unsafe();
        -:  168:    return __x->__parent_unsafe();
        -:  169:}
        -:  170:
        -:  171:template <class _EndNodePtr, class _NodePtr>
        -:  172:inline _LIBCPP_INLINE_VISIBILITY
        -:  173:_EndNodePtr
        -:  174:__tree_next_iter(_NodePtr __x) _NOEXCEPT
        -:  175:{
    #####:  176:    if (__x->__right_ != nullptr)
    #####:  177:        return static_cast<_EndNodePtr>(__tree_min(__x->__right_));
    #####:  178:    while (!__tree_is_left_child(__x))
    #####:  179:        __x = __x->__parent_unsafe();
    #####:  180:    return static_cast<_EndNodePtr>(__x->__parent_);
    #####:  181:}
        -:  182:
        -:  183:// Returns:  pointer to the previous in-order node before __x.
        -:  184:// Precondition:  __x != nullptr.
        -:  185:// Note: __x may be the end node.
        -:  186:template <class _NodePtr, class _EndNodePtr>
        -:  187:inline _LIBCPP_INLINE_VISIBILITY
        -:  188:_NodePtr
        -:  189:__tree_prev_iter(_EndNodePtr __x) _NOEXCEPT
        -:  190:{
    #####:  191:    if (__x->__left_ != nullptr)
    #####:  192:        return __tree_max(__x->__left_);
    #####:  193:    _NodePtr __xx = static_cast<_NodePtr>(__x);
    #####:  194:    while (__tree_is_left_child(__xx))
    #####:  195:        __xx = __xx->__parent_unsafe();
    #####:  196:    return __xx->__parent_unsafe();
    #####:  197:}
        -:  198:
        -:  199:// Returns:  pointer to a node which has no children
        -:  200:// Precondition:  __x != nullptr.
        -:  201:template <class _NodePtr>
        -:  202:_NodePtr
        -:  203:__tree_leaf(_NodePtr __x) _NOEXCEPT
        -:  204:{
        -:  205:    while (true)
        -:  206:    {
        -:  207:        if (__x->__left_ != nullptr)
        -:  208:        {
        -:  209:            __x = __x->__left_;
        -:  210:            continue;
        -:  211:        }
        -:  212:        if (__x->__right_ != nullptr)
        -:  213:        {
        -:  214:            __x = __x->__right_;
        -:  215:            continue;
        -:  216:        }
        -:  217:        break;
        -:  218:    }
        -:  219:    return __x;
        -:  220:}
        -:  221:
        -:  222:// Effects:  Makes __x->__right_ the subtree root with __x as its left child
        -:  223://           while preserving in-order order.
        -:  224:// Precondition:  __x->__right_ != nullptr
        -:  225:template <class _NodePtr>
        -:  226:void
        -:  227:__tree_left_rotate(_NodePtr __x) _NOEXCEPT
        -:  228:{
    #####:  229:    _NodePtr __y = __x->__right_;
    #####:  230:    __x->__right_ = __y->__left_;
    #####:  231:    if (__x->__right_ != nullptr)
    #####:  232:        __x->__right_->__set_parent(__x);
    #####:  233:    __y->__parent_ = __x->__parent_;
    #####:  234:    if (__tree_is_left_child(__x))
    #####:  235:        __x->__parent_->__left_ = __y;
        -:  236:    else
    #####:  237:        __x->__parent_unsafe()->__right_ = __y;
    #####:  238:    __y->__left_ = __x;
    #####:  239:    __x->__set_parent(__y);
    #####:  240:}
        -:  241:
        -:  242:// Effects:  Makes __x->__left_ the subtree root with __x as its right child
        -:  243://           while preserving in-order order.
        -:  244:// Precondition:  __x->__left_ != nullptr
        -:  245:template <class _NodePtr>
        -:  246:void
        -:  247:__tree_right_rotate(_NodePtr __x) _NOEXCEPT
        -:  248:{
    #####:  249:    _NodePtr __y = __x->__left_;
    #####:  250:    __x->__left_ = __y->__right_;
    #####:  251:    if (__x->__left_ != nullptr)
    #####:  252:        __x->__left_->__set_parent(__x);
    #####:  253:    __y->__parent_ = __x->__parent_;
    #####:  254:    if (__tree_is_left_child(__x))
    #####:  255:        __x->__parent_->__left_ = __y;
        -:  256:    else
    #####:  257:        __x->__parent_unsafe()->__right_ = __y;
    #####:  258:    __y->__right_ = __x;
    #####:  259:    __x->__set_parent(__y);
    #####:  260:}
        -:  261:
        -:  262:// Effects:  Rebalances __root after attaching __x to a leaf.
        -:  263:// Precondition:  __root != nulptr && __x != nullptr.
        -:  264://                __x has no children.
        -:  265://                __x == __root or == a direct or indirect child of __root.
        -:  266://                If __x were to be unlinked from __root (setting __root to
        -:  267://                  nullptr if __root == __x), __tree_invariant(__root) == true.
        -:  268:// Postcondition: __tree_invariant(end_node->__left_) == true.  end_node->__left_
        -:  269://                may be different than the value passed in as __root.
        -:  270:template <class _NodePtr>
        -:  271:void
        -:  272:__tree_balance_after_insert(_NodePtr __root, _NodePtr __x) _NOEXCEPT
        -:  273:{
    #####:  274:    __x->__is_black_ = __x == __root;
    #####:  275:    while (__x != __root && !__x->__parent_unsafe()->__is_black_)
        -:  276:    {
        -:  277:        // __x->__parent_ != __root because __x->__parent_->__is_black == false
    #####:  278:        if (__tree_is_left_child(__x->__parent_unsafe()))
        -:  279:        {
    #####:  280:            _NodePtr __y = __x->__parent_unsafe()->__parent_unsafe()->__right_;
    #####:  281:            if (__y != nullptr && !__y->__is_black_)
        -:  282:            {
    #####:  283:                __x = __x->__parent_unsafe();
    #####:  284:                __x->__is_black_ = true;
    #####:  285:                __x = __x->__parent_unsafe();
    #####:  286:                __x->__is_black_ = __x == __root;
    #####:  287:                __y->__is_black_ = true;
    #####:  288:            }
        -:  289:            else
        -:  290:            {
    #####:  291:                if (!__tree_is_left_child(__x))
        -:  292:                {
    #####:  293:                    __x = __x->__parent_unsafe();
    #####:  294:                    __tree_left_rotate(__x);
    #####:  295:                }
    #####:  296:                __x = __x->__parent_unsafe();
    #####:  297:                __x->__is_black_ = true;
    #####:  298:                __x = __x->__parent_unsafe();
    #####:  299:                __x->__is_black_ = false;
    #####:  300:                __tree_right_rotate(__x);
    #####:  301:                break;
        -:  302:            }
    #####:  303:        }
        -:  304:        else
        -:  305:        {
    #####:  306:            _NodePtr __y = __x->__parent_unsafe()->__parent_->__left_;
    #####:  307:            if (__y != nullptr && !__y->__is_black_)
        -:  308:            {
    #####:  309:                __x = __x->__parent_unsafe();
    #####:  310:                __x->__is_black_ = true;
    #####:  311:                __x = __x->__parent_unsafe();
    #####:  312:                __x->__is_black_ = __x == __root;
    #####:  313:                __y->__is_black_ = true;
    #####:  314:            }
        -:  315:            else
        -:  316:            {
    #####:  317:                if (__tree_is_left_child(__x))
        -:  318:                {
    #####:  319:                    __x = __x->__parent_unsafe();
    #####:  320:                    __tree_right_rotate(__x);
    #####:  321:                }
    #####:  322:                __x = __x->__parent_unsafe();
    #####:  323:                __x->__is_black_ = true;
    #####:  324:                __x = __x->__parent_unsafe();
    #####:  325:                __x->__is_black_ = false;
    #####:  326:                __tree_left_rotate(__x);
    #####:  327:                break;
        -:  328:            }
        -:  329:        }
        -:  330:    }
    #####:  331:}
        -:  332:
        -:  333:// Precondition:  __root != nullptr && __z != nullptr.
        -:  334://                __tree_invariant(__root) == true.
        -:  335://                __z == __root or == a direct or indirect child of __root.
        -:  336:// Effects:  unlinks __z from the tree rooted at __root, rebalancing as needed.
        -:  337:// Postcondition: __tree_invariant(end_node->__left_) == true && end_node->__left_
        -:  338://                nor any of its children refer to __z.  end_node->__left_
        -:  339://                may be different than the value passed in as __root.
        -:  340:template <class _NodePtr>
        -:  341:void
        -:  342:__tree_remove(_NodePtr __root, _NodePtr __z) _NOEXCEPT
        -:  343:{
        -:  344:    // __z will be removed from the tree.  Client still needs to destruct/deallocate it
        -:  345:    // __y is either __z, or if __z has two children, __tree_next(__z).
        -:  346:    // __y will have at most one child.
        -:  347:    // __y will be the initial hole in the tree (make the hole at a leaf)
        -:  348:    _NodePtr __y = (__z->__left_ == nullptr || __z->__right_ == nullptr) ?
        -:  349:                    __z : __tree_next(__z);
        -:  350:    // __x is __y's possibly null single child
        -:  351:    _NodePtr __x = __y->__left_ != nullptr ? __y->__left_ : __y->__right_;
        -:  352:    // __w is __x's possibly null uncle (will become __x's sibling)
        -:  353:    _NodePtr __w = nullptr;
        -:  354:    // link __x to __y's parent, and find __w
        -:  355:    if (__x != nullptr)
        -:  356:        __x->__parent_ = __y->__parent_;
        -:  357:    if (__tree_is_left_child(__y))
        -:  358:    {
        -:  359:        __y->__parent_->__left_ = __x;
        -:  360:        if (__y != __root)
        -:  361:            __w = __y->__parent_unsafe()->__right_;
        -:  362:        else
        -:  363:            __root = __x;  // __w == nullptr
        -:  364:    }
        -:  365:    else
        -:  366:    {
        -:  367:        __y->__parent_unsafe()->__right_ = __x;
        -:  368:        // __y can't be root if it is a right child
        -:  369:        __w = __y->__parent_->__left_;
        -:  370:    }
        -:  371:    bool __removed_black = __y->__is_black_;
        -:  372:    // If we didn't remove __z, do so now by splicing in __y for __z,
        -:  373:    //    but copy __z's color.  This does not impact __x or __w.
        -:  374:    if (__y != __z)
        -:  375:    {
        -:  376:        // __z->__left_ != nulptr but __z->__right_ might == __x == nullptr
        -:  377:        __y->__parent_ = __z->__parent_;
        -:  378:        if (__tree_is_left_child(__z))
        -:  379:            __y->__parent_->__left_ = __y;
        -:  380:        else
        -:  381:            __y->__parent_unsafe()->__right_ = __y;
        -:  382:        __y->__left_ = __z->__left_;
        -:  383:        __y->__left_->__set_parent(__y);
        -:  384:        __y->__right_ = __z->__right_;
        -:  385:        if (__y->__right_ != nullptr)
        -:  386:            __y->__right_->__set_parent(__y);
        -:  387:        __y->__is_black_ = __z->__is_black_;
        -:  388:        if (__root == __z)
        -:  389:            __root = __y;
        -:  390:    }
        -:  391:    // There is no need to rebalance if we removed a red, or if we removed
        -:  392:    //     the last node.
        -:  393:    if (__removed_black && __root != nullptr)
        -:  394:    {
        -:  395:        // Rebalance:
        -:  396:        // __x has an implicit black color (transferred from the removed __y)
        -:  397:        //    associated with it, no matter what its color is.
        -:  398:        // If __x is __root (in which case it can't be null), it is supposed
        -:  399:        //    to be black anyway, and if it is doubly black, then the double
        -:  400:        //    can just be ignored.
        -:  401:        // If __x is red (in which case it can't be null), then it can absorb
        -:  402:        //    the implicit black just by setting its color to black.
        -:  403:        // Since __y was black and only had one child (which __x points to), __x
        -:  404:        //   is either red with no children, else null, otherwise __y would have
        -:  405:        //   different black heights under left and right pointers.
        -:  406:        // if (__x == __root || __x != nullptr && !__x->__is_black_)
        -:  407:        if (__x != nullptr)
        -:  408:            __x->__is_black_ = true;
        -:  409:        else
        -:  410:        {
        -:  411:            //  Else __x isn't root, and is "doubly black", even though it may
        -:  412:            //     be null.  __w can not be null here, else the parent would
        -:  413:            //     see a black height >= 2 on the __x side and a black height
        -:  414:            //     of 1 on the __w side (__w must be a non-null black or a red
        -:  415:            //     with a non-null black child).
        -:  416:            while (true)
        -:  417:            {
        -:  418:                if (!__tree_is_left_child(__w))  // if x is left child
        -:  419:                {
        -:  420:                    if (!__w->__is_black_)
        -:  421:                    {
        -:  422:                        __w->__is_black_ = true;
        -:  423:                        __w->__parent_unsafe()->__is_black_ = false;
        -:  424:                        __tree_left_rotate(__w->__parent_unsafe());
        -:  425:                        // __x is still valid
        -:  426:                        // reset __root only if necessary
        -:  427:                        if (__root == __w->__left_)
        -:  428:                            __root = __w;
        -:  429:                        // reset sibling, and it still can't be null
        -:  430:                        __w = __w->__left_->__right_;
        -:  431:                    }
        -:  432:                    // __w->__is_black_ is now true, __w may have null children
        -:  433:                    if ((__w->__left_  == nullptr || __w->__left_->__is_black_) &&
        -:  434:                        (__w->__right_ == nullptr || __w->__right_->__is_black_))
        -:  435:                    {
        -:  436:                        __w->__is_black_ = false;
        -:  437:                        __x = __w->__parent_unsafe();
        -:  438:                        // __x can no longer be null
        -:  439:                        if (__x == __root || !__x->__is_black_)
        -:  440:                        {
        -:  441:                            __x->__is_black_ = true;
        -:  442:                            break;
        -:  443:                        }
        -:  444:                        // reset sibling, and it still can't be null
        -:  445:                        __w = __tree_is_left_child(__x) ?
        -:  446:                                    __x->__parent_unsafe()->__right_ :
        -:  447:                                    __x->__parent_->__left_;
        -:  448:                        // continue;
        -:  449:                    }
        -:  450:                    else  // __w has a red child
        -:  451:                    {
        -:  452:                        if (__w->__right_ == nullptr || __w->__right_->__is_black_)
        -:  453:                        {
        -:  454:                            // __w left child is non-null and red
        -:  455:                            __w->__left_->__is_black_ = true;
        -:  456:                            __w->__is_black_ = false;
        -:  457:                            __tree_right_rotate(__w);
        -:  458:                            // __w is known not to be root, so root hasn't changed
        -:  459:                            // reset sibling, and it still can't be null
        -:  460:                            __w = __w->__parent_unsafe();
        -:  461:                        }
        -:  462:                        // __w has a right red child, left child may be null
        -:  463:                        __w->__is_black_ = __w->__parent_unsafe()->__is_black_;
        -:  464:                        __w->__parent_unsafe()->__is_black_ = true;
        -:  465:                        __w->__right_->__is_black_ = true;
        -:  466:                        __tree_left_rotate(__w->__parent_unsafe());
        -:  467:                        break;
        -:  468:                    }
        -:  469:                }
        -:  470:                else
        -:  471:                {
        -:  472:                    if (!__w->__is_black_)
        -:  473:                    {
        -:  474:                        __w->__is_black_ = true;
        -:  475:                        __w->__parent_unsafe()->__is_black_ = false;
        -:  476:                        __tree_right_rotate(__w->__parent_unsafe());
        -:  477:                        // __x is still valid
        -:  478:                        // reset __root only if necessary
        -:  479:                        if (__root == __w->__right_)
        -:  480:                            __root = __w;
        -:  481:                        // reset sibling, and it still can't be null
        -:  482:                        __w = __w->__right_->__left_;
        -:  483:                    }
        -:  484:                    // __w->__is_black_ is now true, __w may have null children
        -:  485:                    if ((__w->__left_  == nullptr || __w->__left_->__is_black_) &&
        -:  486:                        (__w->__right_ == nullptr || __w->__right_->__is_black_))
        -:  487:                    {
        -:  488:                        __w->__is_black_ = false;
        -:  489:                        __x = __w->__parent_unsafe();
        -:  490:                        // __x can no longer be null
        -:  491:                        if (!__x->__is_black_ || __x == __root)
        -:  492:                        {
        -:  493:                            __x->__is_black_ = true;
        -:  494:                            break;
        -:  495:                        }
        -:  496:                        // reset sibling, and it still can't be null
        -:  497:                        __w = __tree_is_left_child(__x) ?
        -:  498:                                    __x->__parent_unsafe()->__right_ :
        -:  499:                                    __x->__parent_->__left_;
        -:  500:                        // continue;
        -:  501:                    }
        -:  502:                    else  // __w has a red child
        -:  503:                    {
        -:  504:                        if (__w->__left_ == nullptr || __w->__left_->__is_black_)
        -:  505:                        {
        -:  506:                            // __w right child is non-null and red
        -:  507:                            __w->__right_->__is_black_ = true;
        -:  508:                            __w->__is_black_ = false;
        -:  509:                            __tree_left_rotate(__w);
        -:  510:                            // __w is known not to be root, so root hasn't changed
        -:  511:                            // reset sibling, and it still can't be null
        -:  512:                            __w = __w->__parent_unsafe();
        -:  513:                        }
        -:  514:                        // __w has a left red child, right child may be null
        -:  515:                        __w->__is_black_ = __w->__parent_unsafe()->__is_black_;
        -:  516:                        __w->__parent_unsafe()->__is_black_ = true;
        -:  517:                        __w->__left_->__is_black_ = true;
        -:  518:                        __tree_right_rotate(__w->__parent_unsafe());
        -:  519:                        break;
        -:  520:                    }
        -:  521:                }
        -:  522:            }
        -:  523:        }
        -:  524:    }
        -:  525:}
        -:  526:
        -:  527:// node traits
        -:  528:
        -:  529:
        -:  530:#ifndef _LIBCPP_CXX03_LANG
        -:  531:template <class _Tp>
        -:  532:struct __is_tree_value_type_imp : false_type {};
        -:  533:
        -:  534:template <class _Key, class _Value>
        -:  535:struct __is_tree_value_type_imp<__value_type<_Key, _Value>> : true_type {};
        -:  536:
        -:  537:template <class ..._Args>
        -:  538:struct __is_tree_value_type : false_type {};
        -:  539:
        -:  540:template <class _One>
        -:  541:struct __is_tree_value_type<_One> : __is_tree_value_type_imp<typename __uncvref<_One>::type> {};
        -:  542:#endif
        -:  543:
        -:  544:template <class _Tp>
        -:  545:struct __tree_key_value_types {
        -:  546:  typedef _Tp key_type;
        -:  547:  typedef _Tp __node_value_type;
        -:  548:  typedef _Tp __container_value_type;
        -:  549:  static const bool __is_map = false;
        -:  550:
        -:  551:  _LIBCPP_INLINE_VISIBILITY
        -:  552:  static key_type const& __get_key(_Tp const& __v) {
    #####:  553:    return __v;
        -:  554:  }
        -:  555:  _LIBCPP_INLINE_VISIBILITY
        -:  556:  static __container_value_type const& __get_value(__node_value_type const& __v) {
        -:  557:    return __v;
        -:  558:  }
        -:  559:  _LIBCPP_INLINE_VISIBILITY
        -:  560:  static __container_value_type* __get_ptr(__node_value_type& __n) {
    #####:  561:    return _VSTD::addressof(__n);
        -:  562:  }
        -:  563:#ifndef _LIBCPP_CXX03_LANG
        -:  564:  _LIBCPP_INLINE_VISIBILITY
        -:  565:  static __container_value_type&& __move(__node_value_type& __v) {
        -:  566:    return _VSTD::move(__v);
        -:  567:  }
        -:  568:#endif
        -:  569:};
        -:  570:
        -:  571:template <class _Key, class _Tp>
        -:  572:struct __tree_key_value_types<__value_type<_Key, _Tp> > {
        -:  573:  typedef _Key                                         key_type;
        -:  574:  typedef _Tp                                          mapped_type;
        -:  575:  typedef __value_type<_Key, _Tp>                      __node_value_type;
        -:  576:  typedef pair<const _Key, _Tp>                        __container_value_type;
        -:  577:  typedef __container_value_type                       __map_value_type;
        -:  578:  static const bool __is_map = true;
        -:  579:
        -:  580:  _LIBCPP_INLINE_VISIBILITY
        -:  581:  static key_type const&
        -:  582:  __get_key(__node_value_type const& __t) {
        -:  583:    return __t.__get_value().first;
        -:  584:  }
        -:  585:
        -:  586:  template <class _Up>
        -:  587:  _LIBCPP_INLINE_VISIBILITY
        -:  588:  static typename enable_if<__is_same_uncvref<_Up, __container_value_type>::value,
        -:  589:      key_type const&>::type
        -:  590:  __get_key(_Up& __t) {
        -:  591:    return __t.first;
        -:  592:  }
        -:  593:
        -:  594:  _LIBCPP_INLINE_VISIBILITY
        -:  595:  static __container_value_type const&
        -:  596:  __get_value(__node_value_type const& __t) {
        -:  597:    return __t.__get_value();
        -:  598:  }
        -:  599:
        -:  600:  template <class _Up>
        -:  601:  _LIBCPP_INLINE_VISIBILITY
        -:  602:  static typename enable_if<__is_same_uncvref<_Up, __container_value_type>::value,
        -:  603:      __container_value_type const&>::type
        -:  604:  __get_value(_Up& __t) {
        -:  605:    return __t;
        -:  606:  }
        -:  607:
        -:  608:  _LIBCPP_INLINE_VISIBILITY
        -:  609:  static __container_value_type* __get_ptr(__node_value_type& __n) {
    #####:  610:    return _VSTD::addressof(__n.__get_value());
        -:  611:  }
        -:  612:
        -:  613:#ifndef _LIBCPP_CXX03_LANG
        -:  614:  _LIBCPP_INLINE_VISIBILITY
        -:  615:  static pair<key_type&&, mapped_type&&> __move(__node_value_type& __v) {
        -:  616:    return __v.__move();
        -:  617:  }
        -:  618:#endif
        -:  619:};
        -:  620:
        -:  621:template <class _VoidPtr>
        -:  622:struct __tree_node_base_types {
        -:  623:  typedef _VoidPtr                                               __void_pointer;
        -:  624:
        -:  625:  typedef __tree_node_base<__void_pointer>                      __node_base_type;
        -:  626:  typedef typename __rebind_pointer<_VoidPtr, __node_base_type>::type
        -:  627:                                                             __node_base_pointer;
        -:  628:
        -:  629:  typedef __tree_end_node<__node_base_pointer>                  __end_node_type;
        -:  630:  typedef typename __rebind_pointer<_VoidPtr, __end_node_type>::type
        -:  631:                                                             __end_node_pointer;
        -:  632:#if defined(_LIBCPP_ABI_TREE_REMOVE_NODE_POINTER_UB)
        -:  633:  typedef __end_node_pointer __parent_pointer;
        -:  634:#else
        -:  635:  typedef typename conditional<
        -:  636:      is_pointer<__end_node_pointer>::value,
        -:  637:        __end_node_pointer,
        -:  638:        __node_base_pointer>::type __parent_pointer;
        -:  639:#endif
        -:  640:
        -:  641:private:
        -:  642:  static_assert((is_same<typename pointer_traits<_VoidPtr>::element_type, void>::value),
        -:  643:                  "_VoidPtr does not point to unqualified void type");
        -:  644:};
        -:  645:
        -:  646:template <class _Tp, class _AllocPtr, class _KVTypes = __tree_key_value_types<_Tp>,
        -:  647:         bool = _KVTypes::__is_map>
        -:  648:struct __tree_map_pointer_types {};
        -:  649:
        -:  650:template <class _Tp, class _AllocPtr, class _KVTypes>
        -:  651:struct __tree_map_pointer_types<_Tp, _AllocPtr, _KVTypes, true> {
        -:  652:  typedef typename _KVTypes::__map_value_type   _Mv;
        -:  653:  typedef typename __rebind_pointer<_AllocPtr, _Mv>::type
        -:  654:                                                       __map_value_type_pointer;
        -:  655:  typedef typename __rebind_pointer<_AllocPtr, const _Mv>::type
        -:  656:                                                 __const_map_value_type_pointer;
        -:  657:};
        -:  658:
        -:  659:template <class _NodePtr, class _NodeT = typename pointer_traits<_NodePtr>::element_type>
        -:  660:struct __tree_node_types;
        -:  661:
        -:  662:template <class _NodePtr, class _Tp, class _VoidPtr>
        -:  663:struct __tree_node_types<_NodePtr, __tree_node<_Tp, _VoidPtr> >
        -:  664:    : public __tree_node_base_types<_VoidPtr>,
        -:  665:             __tree_key_value_types<_Tp>,
        -:  666:             __tree_map_pointer_types<_Tp, _VoidPtr>
        -:  667:{
        -:  668:  typedef __tree_node_base_types<_VoidPtr> __base;
        -:  669:  typedef __tree_key_value_types<_Tp>      __key_base;
        -:  670:  typedef __tree_map_pointer_types<_Tp, _VoidPtr> __map_pointer_base;
        -:  671:public:
        -:  672:
        -:  673:  typedef typename pointer_traits<_NodePtr>::element_type       __node_type;
        -:  674:  typedef _NodePtr                                              __node_pointer;
        -:  675:
        -:  676:  typedef _Tp                                                 __node_value_type;
        -:  677:  typedef typename __rebind_pointer<_VoidPtr, __node_value_type>::type
        -:  678:                                                      __node_value_type_pointer;
        -:  679:  typedef typename __rebind_pointer<_VoidPtr, const __node_value_type>::type
        -:  680:                                                __const_node_value_type_pointer;
        -:  681:#if defined(_LIBCPP_ABI_TREE_REMOVE_NODE_POINTER_UB)
        -:  682:  typedef typename __base::__end_node_pointer __iter_pointer;
        -:  683:#else
        -:  684:  typedef typename conditional<
        -:  685:      is_pointer<__node_pointer>::value,
        -:  686:        typename __base::__end_node_pointer,
        -:  687:        __node_pointer>::type __iter_pointer;
        -:  688:#endif
        -:  689:private:
        -:  690:    static_assert(!is_const<__node_type>::value,
        -:  691:                "_NodePtr should never be a pointer to const");
        -:  692:    static_assert((is_same<typename __rebind_pointer<_VoidPtr, __node_type>::type,
        -:  693:                          _NodePtr>::value), "_VoidPtr does not rebind to _NodePtr.");
        -:  694:};
        -:  695:
        -:  696:template <class _ValueTp, class _VoidPtr>
        -:  697:struct __make_tree_node_types {
        -:  698:  typedef typename __rebind_pointer<_VoidPtr, __tree_node<_ValueTp, _VoidPtr> >::type
        -:  699:                                                                        _NodePtr;
        -:  700:  typedef __tree_node_types<_NodePtr> type;
        -:  701:};
        -:  702:
        -:  703:// node
        -:  704:
        -:  705:template <class _Pointer>
        -:  706:class __tree_end_node
        -:  707:{
        -:  708:public:
        -:  709:    typedef _Pointer pointer;
        -:  710:    pointer __left_;
        -:  711:
        -:  712:    _LIBCPP_INLINE_VISIBILITY
    #####:  713:    __tree_end_node() _NOEXCEPT : __left_() {}
        -:  714:};
        -:  715:
        -:  716:template <class _VoidPtr>
        -:  717:class __tree_node_base
        -:  718:    : public __tree_node_base_types<_VoidPtr>::__end_node_type
        -:  719:{
        -:  720:    typedef __tree_node_base_types<_VoidPtr> _NodeBaseTypes;
        -:  721:
        -:  722:public:
        -:  723:    typedef typename _NodeBaseTypes::__node_base_pointer pointer;
        -:  724:    typedef typename _NodeBaseTypes::__parent_pointer __parent_pointer;
        -:  725:
        -:  726:    pointer          __right_;
        -:  727:    __parent_pointer __parent_;
        -:  728:    bool __is_black_;
        -:  729:
        -:  730:    _LIBCPP_INLINE_VISIBILITY
    #####:  731:    pointer __parent_unsafe() const { return static_cast<pointer>(__parent_);}
        -:  732:
        -:  733:    _LIBCPP_INLINE_VISIBILITY
        -:  734:    void __set_parent(pointer __p) {
    #####:  735:        __parent_ = static_cast<__parent_pointer>(__p);
    #####:  736:    }
        -:  737:
        -:  738:private:
        -:  739:  ~__tree_node_base() _LIBCPP_EQUAL_DELETE;
        -:  740:  __tree_node_base(__tree_node_base const&) _LIBCPP_EQUAL_DELETE;
        -:  741:  __tree_node_base& operator=(__tree_node_base const&) _LIBCPP_EQUAL_DELETE;
        -:  742:};
        -:  743:
        -:  744:template <class _Tp, class _VoidPtr>
        -:  745:class __tree_node
        -:  746:    : public __tree_node_base<_VoidPtr>
        -:  747:{
        -:  748:public:
        -:  749:    typedef _Tp __node_value_type;
        -:  750:
        -:  751:    __node_value_type __value_;
        -:  752:
        -:  753:private:
        -:  754:  ~__tree_node() _LIBCPP_EQUAL_DELETE;
        -:  755:  __tree_node(__tree_node const&) _LIBCPP_EQUAL_DELETE;
        -:  756:  __tree_node& operator=(__tree_node const&) _LIBCPP_EQUAL_DELETE;
        -:  757:};
        -:  758:
        -:  759:
        -:  760:template <class _Allocator>
        -:  761:class __tree_node_destructor
        -:  762:{
        -:  763:    typedef _Allocator                                      allocator_type;
        -:  764:    typedef allocator_traits<allocator_type>                __alloc_traits;
        -:  765:
        -:  766:public:
        -:  767:    typedef typename __alloc_traits::pointer                pointer;
        -:  768:private:
        -:  769:    typedef __tree_node_types<pointer> _NodeTypes;
        -:  770:    allocator_type& __na_;
        -:  771:
        -:  772:    __tree_node_destructor& operator=(const __tree_node_destructor&);
        -:  773:
        -:  774:public:
        -:  775:    bool __value_constructed;
        -:  776:
        -:  777:    _LIBCPP_INLINE_VISIBILITY
        -:  778:    explicit __tree_node_destructor(allocator_type& __na, bool __val = false) _NOEXCEPT
    #####:  779:        : __na_(__na),
    #####:  780:          __value_constructed(__val)
    #####:  781:        {}
        -:  782:
        -:  783:    _LIBCPP_INLINE_VISIBILITY
        -:  784:    void operator()(pointer __p) _NOEXCEPT
        -:  785:    {
    #####:  786:        if (__value_constructed)
    #####:  787:            __alloc_traits::destroy(__na_, _NodeTypes::__get_ptr(__p->__value_));
    #####:  788:        if (__p)
    #####:  789:            __alloc_traits::deallocate(__na_, __p, 1);
    #####:  790:    }
        -:  791:
        -:  792:    template <class> friend class __map_node_destructor;
        -:  793:};
        -:  794:
        -:  795:#if _LIBCPP_STD_VER > 14
        -:  796:template <class _NodeType, class _Alloc>
        -:  797:struct __generic_container_node_destructor;
        -:  798:template <class _Tp, class _VoidPtr, class _Alloc>
        -:  799:struct __generic_container_node_destructor<__tree_node<_Tp, _VoidPtr>, _Alloc>
        -:  800:    : __tree_node_destructor<_Alloc>
        -:  801:{
        -:  802:    using __tree_node_destructor<_Alloc>::__tree_node_destructor;
        -:  803:};
        -:  804:#endif
        -:  805:
        -:  806:template <class _Tp, class _NodePtr, class _DiffType>
        -:  807:class _LIBCPP_TEMPLATE_VIS __tree_iterator
        -:  808:{
        -:  809:    typedef __tree_node_types<_NodePtr>                     _NodeTypes;
        -:  810:    typedef _NodePtr                                        __node_pointer;
        -:  811:    typedef typename _NodeTypes::__node_base_pointer        __node_base_pointer;
        -:  812:    typedef typename _NodeTypes::__end_node_pointer         __end_node_pointer;
        -:  813:    typedef typename _NodeTypes::__iter_pointer             __iter_pointer;
        -:  814:    typedef pointer_traits<__node_pointer> __pointer_traits;
        -:  815:
        -:  816:    __iter_pointer __ptr_;
        -:  817:
        -:  818:public:
        -:  819:    typedef bidirectional_iterator_tag                     iterator_category;
        -:  820:    typedef _Tp                                            value_type;
        -:  821:    typedef _DiffType                                      difference_type;
        -:  822:    typedef value_type&                                    reference;
        -:  823:    typedef typename _NodeTypes::__node_value_type_pointer pointer;
        -:  824:
        -:  825:    _LIBCPP_INLINE_VISIBILITY __tree_iterator() _NOEXCEPT
        -:  826:#if _LIBCPP_STD_VER > 11
        -:  827:    : __ptr_(nullptr)
        -:  828:#endif
        -:  829:    {}
        -:  830:
        -:  831:    _LIBCPP_INLINE_VISIBILITY reference operator*() const
    #####:  832:        {return __get_np()->__value_;}
        -:  833:    _LIBCPP_INLINE_VISIBILITY pointer operator->() const
    #####:  834:        {return pointer_traits<pointer>::pointer_to(__get_np()->__value_);}
        -:  835:
        -:  836:    _LIBCPP_INLINE_VISIBILITY
        -:  837:    __tree_iterator& operator++() {
    #####:  838:      __ptr_ = static_cast<__iter_pointer>(
    #####:  839:          __tree_next_iter<__end_node_pointer>(static_cast<__node_base_pointer>(__ptr_)));
    #####:  840:      return *this;
        -:  841:    }
        -:  842:    _LIBCPP_INLINE_VISIBILITY
        -:  843:    __tree_iterator operator++(int)
        -:  844:        {__tree_iterator __t(*this); ++(*this); return __t;}
        -:  845:
        -:  846:    _LIBCPP_INLINE_VISIBILITY
        -:  847:    __tree_iterator& operator--() {
        -:  848:      __ptr_ = static_cast<__iter_pointer>(__tree_prev_iter<__node_base_pointer>(
        -:  849:          static_cast<__end_node_pointer>(__ptr_)));
        -:  850:      return *this;
        -:  851:    }
        -:  852:    _LIBCPP_INLINE_VISIBILITY
        -:  853:    __tree_iterator operator--(int)
        -:  854:        {__tree_iterator __t(*this); --(*this); return __t;}
        -:  855:
        -:  856:    friend _LIBCPP_INLINE_VISIBILITY 
        -:  857:        bool operator==(const __tree_iterator& __x, const __tree_iterator& __y)
    #####:  858:        {return __x.__ptr_ == __y.__ptr_;}
        -:  859:    friend _LIBCPP_INLINE_VISIBILITY
        -:  860:        bool operator!=(const __tree_iterator& __x, const __tree_iterator& __y)
    #####:  861:        {return !(__x == __y);}
        -:  862:
        -:  863:private:
        -:  864:    _LIBCPP_INLINE_VISIBILITY
    #####:  865:    explicit __tree_iterator(__node_pointer __p) _NOEXCEPT : __ptr_(__p) {}
        -:  866:    _LIBCPP_INLINE_VISIBILITY
    #####:  867:    explicit __tree_iterator(__end_node_pointer __p) _NOEXCEPT : __ptr_(__p) {}
        -:  868:    _LIBCPP_INLINE_VISIBILITY
    #####:  869:    __node_pointer __get_np() const { return static_cast<__node_pointer>(__ptr_); }
        -:  870:    template <class, class, class> friend class __tree;
        -:  871:    template <class, class, class> friend class _LIBCPP_TEMPLATE_VIS __tree_const_iterator;
        -:  872:    template <class> friend class _LIBCPP_TEMPLATE_VIS __map_iterator;
    #####:  873:    template <class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS map;
        -:  874:    template <class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS multimap;
    #####:  875:    template <class, class, class> friend class _LIBCPP_TEMPLATE_VIS set;
        -:  876:    template <class, class, class> friend class _LIBCPP_TEMPLATE_VIS multiset;
        -:  877:};
        -:  878:
        -:  879:template <class _Tp, class _NodePtr, class _DiffType>
        -:  880:class _LIBCPP_TEMPLATE_VIS __tree_const_iterator
        -:  881:{
        -:  882:    typedef __tree_node_types<_NodePtr>                     _NodeTypes;
        -:  883:    typedef typename _NodeTypes::__node_pointer             __node_pointer;
        -:  884:    typedef typename _NodeTypes::__node_base_pointer        __node_base_pointer;
        -:  885:    typedef typename _NodeTypes::__end_node_pointer         __end_node_pointer;
        -:  886:    typedef typename _NodeTypes::__iter_pointer             __iter_pointer;
        -:  887:    typedef pointer_traits<__node_pointer> __pointer_traits;
        -:  888:
        -:  889:    __iter_pointer __ptr_;
        -:  890:
        -:  891:public:
        -:  892:    typedef bidirectional_iterator_tag                           iterator_category;
        -:  893:    typedef _Tp                                                  value_type;
        -:  894:    typedef _DiffType                                            difference_type;
        -:  895:    typedef const value_type&                                    reference;
        -:  896:    typedef typename _NodeTypes::__const_node_value_type_pointer pointer;
        -:  897:
        -:  898:    _LIBCPP_INLINE_VISIBILITY __tree_const_iterator() _NOEXCEPT
        -:  899:#if _LIBCPP_STD_VER > 11
        -:  900:    : __ptr_(nullptr)
        -:  901:#endif
        -:  902:    {}
        -:  903:
        -:  904:private:
        -:  905:    typedef __tree_iterator<value_type, __node_pointer, difference_type>
        -:  906:                                                           __non_const_iterator;
        -:  907:public:
        -:  908:    _LIBCPP_INLINE_VISIBILITY
        -:  909:    __tree_const_iterator(__non_const_iterator __p) _NOEXCEPT
    #####:  910:        : __ptr_(__p.__ptr_) {}
        -:  911:
        -:  912:    _LIBCPP_INLINE_VISIBILITY reference operator*() const
    #####:  913:        {return __get_np()->__value_;}
        -:  914:    _LIBCPP_INLINE_VISIBILITY pointer operator->() const
    #####:  915:        {return pointer_traits<pointer>::pointer_to(__get_np()->__value_);}
        -:  916:
        -:  917:    _LIBCPP_INLINE_VISIBILITY
        -:  918:    __tree_const_iterator& operator++() {
    #####:  919:      __ptr_ = static_cast<__iter_pointer>(
    #####:  920:          __tree_next_iter<__end_node_pointer>(static_cast<__node_base_pointer>(__ptr_)));
    #####:  921:      return *this;
        -:  922:    }
        -:  923:
        -:  924:    _LIBCPP_INLINE_VISIBILITY
        -:  925:    __tree_const_iterator operator++(int)
        -:  926:        {__tree_const_iterator __t(*this); ++(*this); return __t;}
        -:  927:
        -:  928:    _LIBCPP_INLINE_VISIBILITY
        -:  929:    __tree_const_iterator& operator--() {
    #####:  930:      __ptr_ = static_cast<__iter_pointer>(__tree_prev_iter<__node_base_pointer>(
    #####:  931:          static_cast<__end_node_pointer>(__ptr_)));
    #####:  932:      return *this;
        -:  933:    }
        -:  934:
        -:  935:    _LIBCPP_INLINE_VISIBILITY
        -:  936:    __tree_const_iterator operator--(int)
        -:  937:        {__tree_const_iterator __t(*this); --(*this); return __t;}
        -:  938:
        -:  939:    friend _LIBCPP_INLINE_VISIBILITY
        -:  940:        bool operator==(const __tree_const_iterator& __x, const __tree_const_iterator& __y)
    #####:  941:        {return __x.__ptr_ == __y.__ptr_;}
        -:  942:    friend _LIBCPP_INLINE_VISIBILITY
        -:  943:        bool operator!=(const __tree_const_iterator& __x, const __tree_const_iterator& __y)
    #####:  944:        {return !(__x == __y);}
        -:  945:
        -:  946:private:
        -:  947:    _LIBCPP_INLINE_VISIBILITY
        -:  948:    explicit __tree_const_iterator(__node_pointer __p) _NOEXCEPT
        -:  949:        : __ptr_(__p) {}
        -:  950:    _LIBCPP_INLINE_VISIBILITY
        -:  951:    explicit __tree_const_iterator(__end_node_pointer __p) _NOEXCEPT
    #####:  952:        : __ptr_(__p) {}
        -:  953:    _LIBCPP_INLINE_VISIBILITY
    #####:  954:    __node_pointer __get_np() const { return static_cast<__node_pointer>(__ptr_); }
        -:  955:
        -:  956:    template <class, class, class> friend class __tree;
        -:  957:    template <class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS map;
        -:  958:    template <class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS multimap;
        -:  959:    template <class, class, class> friend class _LIBCPP_TEMPLATE_VIS set;
        -:  960:    template <class, class, class> friend class _LIBCPP_TEMPLATE_VIS multiset;
        -:  961:    template <class> friend class _LIBCPP_TEMPLATE_VIS __map_const_iterator;
        -:  962:
        -:  963:};
        -:  964:
        -:  965:template<class _Tp, class _Compare>
        -:  966:#ifndef _LIBCPP_CXX03_LANG
        -:  967:    _LIBCPP_DIAGNOSE_WARNING(!std::__invokable<_Compare const&, _Tp const&, _Tp const&>::value,
        -:  968:        "the specified comparator type does not provide a const call operator")
        -:  969:#endif
        -:  970:int __diagnose_non_const_comparator();
        -:  971:
        -:  972:template <class _Tp, class _Compare, class _Allocator>
        -:  973:class __tree
        -:  974:{
        -:  975:public:
        -:  976:    typedef _Tp                                      value_type;
        -:  977:    typedef _Compare                                 value_compare;
        -:  978:    typedef _Allocator                               allocator_type;
        -:  979:
        -:  980:private:
        -:  981:    typedef allocator_traits<allocator_type>         __alloc_traits;
        -:  982:    typedef typename __make_tree_node_types<value_type,
        -:  983:        typename __alloc_traits::void_pointer>::type
        -:  984:                                                    _NodeTypes;
        -:  985:    typedef typename _NodeTypes::key_type           key_type;
        -:  986:public:
        -:  987:    typedef typename _NodeTypes::__node_value_type      __node_value_type;
        -:  988:    typedef typename _NodeTypes::__container_value_type __container_value_type;
        -:  989:
        -:  990:    typedef typename __alloc_traits::pointer         pointer;
        -:  991:    typedef typename __alloc_traits::const_pointer   const_pointer;
        -:  992:    typedef typename __alloc_traits::size_type       size_type;
        -:  993:    typedef typename __alloc_traits::difference_type difference_type;
        -:  994:
        -:  995:public:
        -:  996:    typedef typename _NodeTypes::__void_pointer        __void_pointer;
        -:  997:
        -:  998:    typedef typename _NodeTypes::__node_type           __node;
        -:  999:    typedef typename _NodeTypes::__node_pointer        __node_pointer;
        -: 1000:
        -: 1001:    typedef typename _NodeTypes::__node_base_type      __node_base;
        -: 1002:    typedef typename _NodeTypes::__node_base_pointer   __node_base_pointer;
        -: 1003:
        -: 1004:    typedef typename _NodeTypes::__end_node_type       __end_node_t;
        -: 1005:    typedef typename _NodeTypes::__end_node_pointer    __end_node_ptr;
        -: 1006:
        -: 1007:    typedef typename _NodeTypes::__parent_pointer      __parent_pointer;
        -: 1008:    typedef typename _NodeTypes::__iter_pointer        __iter_pointer;
        -: 1009:
        -: 1010:    typedef typename __rebind_alloc_helper<__alloc_traits, __node>::type __node_allocator;
        -: 1011:    typedef allocator_traits<__node_allocator>         __node_traits;
        -: 1012:
        -: 1013:private:
        -: 1014:    // check for sane allocator pointer rebinding semantics. Rebinding the
        -: 1015:    // allocator for a new pointer type should be exactly the same as rebinding
        -: 1016:    // the pointer using 'pointer_traits'.
        -: 1017:    static_assert((is_same<__node_pointer, typename __node_traits::pointer>::value),
        -: 1018:                  "Allocator does not rebind pointers in a sane manner.");
        -: 1019:    typedef typename __rebind_alloc_helper<__node_traits, __node_base>::type
        -: 1020:        __node_base_allocator;
        -: 1021:    typedef allocator_traits<__node_base_allocator> __node_base_traits;
        -: 1022:    static_assert((is_same<__node_base_pointer, typename __node_base_traits::pointer>::value),
        -: 1023:                 "Allocator does not rebind pointers in a sane manner.");
        -: 1024:
        -: 1025:private:
        -: 1026:    __iter_pointer                                     __begin_node_;
        -: 1027:    __compressed_pair<__end_node_t, __node_allocator>  __pair1_;
        -: 1028:    __compressed_pair<size_type, value_compare>        __pair3_;
        -: 1029:
        -: 1030:public:
        -: 1031:    _LIBCPP_INLINE_VISIBILITY
        -: 1032:    __iter_pointer __end_node() _NOEXCEPT
        -: 1033:    {
    #####: 1034:        return static_cast<__iter_pointer>(
    #####: 1035:                pointer_traits<__end_node_ptr>::pointer_to(__pair1_.first())
        -: 1036:        );
        -: 1037:    }
        -: 1038:    _LIBCPP_INLINE_VISIBILITY
        -: 1039:    __iter_pointer __end_node() const _NOEXCEPT
        -: 1040:    {
    #####: 1041:        return static_cast<__iter_pointer>(
    #####: 1042:            pointer_traits<__end_node_ptr>::pointer_to(
    #####: 1043:                const_cast<__end_node_t&>(__pair1_.first())
        -: 1044:            )
        -: 1045:        );
        -: 1046:    }
        -: 1047:    _LIBCPP_INLINE_VISIBILITY
    #####: 1048:          __node_allocator& __node_alloc() _NOEXCEPT {return __pair1_.second();}
        -: 1049:private:
        -: 1050:    _LIBCPP_INLINE_VISIBILITY
        -: 1051:    const __node_allocator& __node_alloc() const _NOEXCEPT
        -: 1052:        {return __pair1_.second();}
        -: 1053:    _LIBCPP_INLINE_VISIBILITY
    #####: 1054:          __iter_pointer& __begin_node() _NOEXCEPT {return __begin_node_;}
        -: 1055:    _LIBCPP_INLINE_VISIBILITY
    #####: 1056:    const __iter_pointer& __begin_node() const _NOEXCEPT {return __begin_node_;}
        -: 1057:public:
        -: 1058:    _LIBCPP_INLINE_VISIBILITY
        -: 1059:    allocator_type __alloc() const _NOEXCEPT
        -: 1060:        {return allocator_type(__node_alloc());}
        -: 1061:private:
        -: 1062:    _LIBCPP_INLINE_VISIBILITY
    #####: 1063:          size_type& size() _NOEXCEPT {return __pair3_.first();}
        -: 1064:public:
        -: 1065:    _LIBCPP_INLINE_VISIBILITY
    #####: 1066:    const size_type& size() const _NOEXCEPT {return __pair3_.first();}
        -: 1067:    _LIBCPP_INLINE_VISIBILITY
    #####: 1068:          value_compare& value_comp() _NOEXCEPT {return __pair3_.second();}
        -: 1069:    _LIBCPP_INLINE_VISIBILITY
        -: 1070:    const value_compare& value_comp() const _NOEXCEPT
    #####: 1071:        {return __pair3_.second();}
        -: 1072:public:
        -: 1073:
        -: 1074:    _LIBCPP_INLINE_VISIBILITY
        -: 1075:    __node_pointer __root() const _NOEXCEPT
    #####: 1076:        {return static_cast<__node_pointer>(__end_node()->__left_);}
        -: 1077:
        -: 1078:    __node_base_pointer* __root_ptr() const _NOEXCEPT {
    #####: 1079:        return _VSTD::addressof(__end_node()->__left_);
        -: 1080:    }
        -: 1081:
        -: 1082:    typedef __tree_iterator<value_type, __node_pointer, difference_type>             iterator;
        -: 1083:    typedef __tree_const_iterator<value_type, __node_pointer, difference_type> const_iterator;
        -: 1084:
    #####: 1085:    explicit __tree(const value_compare& __comp)
        -: 1086:        _NOEXCEPT_(
        -: 1087:            is_nothrow_default_constructible<__node_allocator>::value &&
        -: 1088:            is_nothrow_copy_constructible<value_compare>::value);
        -: 1089:    explicit __tree(const allocator_type& __a);
        -: 1090:    __tree(const value_compare& __comp, const allocator_type& __a);
        -: 1091:    __tree(const __tree& __t);
        -: 1092:    __tree& operator=(const __tree& __t);
        -: 1093:    template <class _InputIterator>
        -: 1094:        void __assign_unique(_InputIterator __first, _InputIterator __last);
        -: 1095:    template <class _InputIterator>
        -: 1096:        void __assign_multi(_InputIterator __first, _InputIterator __last);
        -: 1097:#ifndef _LIBCPP_CXX03_LANG
        -: 1098:    __tree(__tree&& __t)
        -: 1099:        _NOEXCEPT_(
        -: 1100:            is_nothrow_move_constructible<__node_allocator>::value &&
        -: 1101:            is_nothrow_move_constructible<value_compare>::value);
        -: 1102:    __tree(__tree&& __t, const allocator_type& __a);
        -: 1103:    __tree& operator=(__tree&& __t)
        -: 1104:        _NOEXCEPT_(
        -: 1105:            __node_traits::propagate_on_container_move_assignment::value &&
        -: 1106:            is_nothrow_move_assignable<value_compare>::value &&
        -: 1107:            is_nothrow_move_assignable<__node_allocator>::value);
        -: 1108:#endif // _LIBCPP_CXX03_LANG
        -: 1109:
        -: 1110:    ~__tree();
        -: 1111:
        -: 1112:    _LIBCPP_INLINE_VISIBILITY
    #####: 1113:          iterator begin()  _NOEXCEPT {return       iterator(__begin_node());}
        -: 1114:    _LIBCPP_INLINE_VISIBILITY
    #####: 1115:    const_iterator begin() const _NOEXCEPT {return const_iterator(__begin_node());}
        -: 1116:    _LIBCPP_INLINE_VISIBILITY
    #####: 1117:          iterator end() _NOEXCEPT {return       iterator(__end_node());}
        -: 1118:    _LIBCPP_INLINE_VISIBILITY
    #####: 1119:    const_iterator end() const _NOEXCEPT {return const_iterator(__end_node());}
        -: 1120:
        -: 1121:    _LIBCPP_INLINE_VISIBILITY
        -: 1122:    size_type max_size() const _NOEXCEPT
        -: 1123:        {return std::min<size_type>(
        -: 1124:                __node_traits::max_size(__node_alloc()),
        -: 1125:                numeric_limits<difference_type >::max());}
        -: 1126:
        -: 1127:    void clear() _NOEXCEPT;
        -: 1128:
        -: 1129:    void swap(__tree& __t)
        -: 1130:#if _LIBCPP_STD_VER <= 11
        -: 1131:        _NOEXCEPT_(
        -: 1132:            __is_nothrow_swappable<value_compare>::value
        -: 1133:            && (!__node_traits::propagate_on_container_swap::value ||
        -: 1134:                 __is_nothrow_swappable<__node_allocator>::value)
        -: 1135:            );
        -: 1136:#else
        -: 1137:        _NOEXCEPT_(__is_nothrow_swappable<value_compare>::value);
        -: 1138:#endif
        -: 1139:
        -: 1140:#ifndef _LIBCPP_CXX03_LANG
        -: 1141:    template <class _Key, class ..._Args>
        -: 1142:    pair<iterator, bool>
        -: 1143:    __emplace_unique_key_args(_Key const&, _Args&&... __args);
        -: 1144:    template <class _Key, class ..._Args>
        -: 1145:    iterator
        -: 1146:    __emplace_hint_unique_key_args(const_iterator, _Key const&, _Args&&...);
        -: 1147:
        -: 1148:    template <class... _Args>
        -: 1149:    pair<iterator, bool> __emplace_unique_impl(_Args&&... __args);
        -: 1150:
        -: 1151:    template <class... _Args>
        -: 1152:    iterator __emplace_hint_unique_impl(const_iterator __p, _Args&&... __args);
        -: 1153:
        -: 1154:    template <class... _Args>
        -: 1155:    iterator __emplace_multi(_Args&&... __args);
        -: 1156:
        -: 1157:    template <class... _Args>
        -: 1158:    iterator __emplace_hint_multi(const_iterator __p, _Args&&... __args);
        -: 1159:
        -: 1160:    template <class _Pp>
        -: 1161:    _LIBCPP_INLINE_VISIBILITY
        -: 1162:    pair<iterator, bool> __emplace_unique(_Pp&& __x) {
    #####: 1163:        return __emplace_unique_extract_key(_VSTD::forward<_Pp>(__x),
    #####: 1164:                                            __can_extract_key<_Pp, key_type>());
        -: 1165:    }
        -: 1166:
        -: 1167:    template <class _First, class _Second>
        -: 1168:    _LIBCPP_INLINE_VISIBILITY
        -: 1169:    typename enable_if<
        -: 1170:        __can_extract_map_key<_First, key_type, __container_value_type>::value,
        -: 1171:        pair<iterator, bool>
        -: 1172:    >::type __emplace_unique(_First&& __f, _Second&& __s) {
    #####: 1173:        return __emplace_unique_key_args(__f, _VSTD::forward<_First>(__f),
    #####: 1174:                                              _VSTD::forward<_Second>(__s));
        -: 1175:    }
        -: 1176:
        -: 1177:    template <class... _Args>
        -: 1178:    _LIBCPP_INLINE_VISIBILITY
        -: 1179:    pair<iterator, bool> __emplace_unique(_Args&&... __args) {
        -: 1180:        return __emplace_unique_impl(_VSTD::forward<_Args>(__args)...);
        -: 1181:    }
        -: 1182:
        -: 1183:    template <class _Pp>
        -: 1184:    _LIBCPP_INLINE_VISIBILITY
        -: 1185:    pair<iterator, bool>
        -: 1186:    __emplace_unique_extract_key(_Pp&& __x, __extract_key_fail_tag) {
        -: 1187:      return __emplace_unique_impl(_VSTD::forward<_Pp>(__x));
        -: 1188:    }
        -: 1189:
        -: 1190:    template <class _Pp>
        -: 1191:    _LIBCPP_INLINE_VISIBILITY
        -: 1192:    pair<iterator, bool>
        -: 1193:    __emplace_unique_extract_key(_Pp&& __x, __extract_key_self_tag) {
    #####: 1194:      return __emplace_unique_key_args(__x, _VSTD::forward<_Pp>(__x));
        -: 1195:    }
        -: 1196:
        -: 1197:    template <class _Pp>
        -: 1198:    _LIBCPP_INLINE_VISIBILITY
        -: 1199:    pair<iterator, bool>
        -: 1200:    __emplace_unique_extract_key(_Pp&& __x, __extract_key_first_tag) {
    #####: 1201:      return __emplace_unique_key_args(__x.first, _VSTD::forward<_Pp>(__x));
        -: 1202:    }
        -: 1203:
        -: 1204:    template <class _Pp>
        -: 1205:    _LIBCPP_INLINE_VISIBILITY
        -: 1206:    iterator __emplace_hint_unique(const_iterator __p, _Pp&& __x) {
        -: 1207:        return __emplace_hint_unique_extract_key(__p, _VSTD::forward<_Pp>(__x),
        -: 1208:                                            __can_extract_key<_Pp, key_type>());
        -: 1209:    }
        -: 1210:
        -: 1211:    template <class _First, class _Second>
        -: 1212:    _LIBCPP_INLINE_VISIBILITY
        -: 1213:    typename enable_if<
        -: 1214:        __can_extract_map_key<_First, key_type, __container_value_type>::value,
        -: 1215:        iterator
        -: 1216:    >::type __emplace_hint_unique(const_iterator __p, _First&& __f, _Second&& __s) {
        -: 1217:        return __emplace_hint_unique_key_args(__p, __f,
        -: 1218:                                              _VSTD::forward<_First>(__f),
        -: 1219:                                              _VSTD::forward<_Second>(__s));
        -: 1220:    }
        -: 1221:
        -: 1222:    template <class... _Args>
        -: 1223:    _LIBCPP_INLINE_VISIBILITY
        -: 1224:    iterator __emplace_hint_unique(const_iterator __p, _Args&&... __args) {
        -: 1225:        return __emplace_hint_unique_impl(__p, _VSTD::forward<_Args>(__args)...);
        -: 1226:    }
        -: 1227:
        -: 1228:    template <class _Pp>
        -: 1229:    _LIBCPP_INLINE_VISIBILITY
        -: 1230:    iterator
        -: 1231:    __emplace_hint_unique_extract_key(const_iterator __p, _Pp&& __x, __extract_key_fail_tag) {
        -: 1232:      return __emplace_hint_unique_impl(__p, _VSTD::forward<_Pp>(__x));
        -: 1233:    }
        -: 1234:
        -: 1235:    template <class _Pp>
        -: 1236:    _LIBCPP_INLINE_VISIBILITY
        -: 1237:    iterator
        -: 1238:    __emplace_hint_unique_extract_key(const_iterator __p, _Pp&& __x, __extract_key_self_tag) {
        -: 1239:      return __emplace_hint_unique_key_args(__p, __x, _VSTD::forward<_Pp>(__x));
        -: 1240:    }
        -: 1241:
        -: 1242:    template <class _Pp>
        -: 1243:    _LIBCPP_INLINE_VISIBILITY
        -: 1244:    iterator
        -: 1245:    __emplace_hint_unique_extract_key(const_iterator __p, _Pp&& __x, __extract_key_first_tag) {
        -: 1246:      return __emplace_hint_unique_key_args(__p, __x.first, _VSTD::forward<_Pp>(__x));
        -: 1247:    }
        -: 1248:
        -: 1249:#else
        -: 1250:    template <class _Key, class _Args>
        -: 1251:    _LIBCPP_INLINE_VISIBILITY
        -: 1252:    pair<iterator, bool> __emplace_unique_key_args(_Key const&, _Args& __args);
        -: 1253:    template <class _Key, class _Args>
        -: 1254:    _LIBCPP_INLINE_VISIBILITY
        -: 1255:    iterator __emplace_hint_unique_key_args(const_iterator, _Key const&, _Args&);
        -: 1256:#endif
        -: 1257:
        -: 1258:    _LIBCPP_INLINE_VISIBILITY
        -: 1259:    pair<iterator, bool> __insert_unique(const __container_value_type& __v) {
    #####: 1260:        return __emplace_unique_key_args(_NodeTypes::__get_key(__v), __v);
        -: 1261:    }
        -: 1262:
        -: 1263:    _LIBCPP_INLINE_VISIBILITY
        -: 1264:    iterator __insert_unique(const_iterator __p, const __container_value_type& __v) {
    #####: 1265:        return __emplace_hint_unique_key_args(__p, _NodeTypes::__get_key(__v), __v);
        -: 1266:    }
        -: 1267:
        -: 1268:#ifdef _LIBCPP_CXX03_LANG
        -: 1269:    _LIBCPP_INLINE_VISIBILITY
        -: 1270:    iterator __insert_multi(const __container_value_type& __v);
        -: 1271:    _LIBCPP_INLINE_VISIBILITY
        -: 1272:    iterator __insert_multi(const_iterator __p, const __container_value_type& __v);
        -: 1273:#else
        -: 1274:    _LIBCPP_INLINE_VISIBILITY
        -: 1275:    pair<iterator, bool> __insert_unique(__container_value_type&& __v) {
        -: 1276:        return __emplace_unique_key_args(_NodeTypes::__get_key(__v), _VSTD::move(__v));
        -: 1277:    }
        -: 1278:
        -: 1279:    _LIBCPP_INLINE_VISIBILITY
        -: 1280:    iterator __insert_unique(const_iterator __p, __container_value_type&& __v) {
        -: 1281:        return __emplace_hint_unique_key_args(__p, _NodeTypes::__get_key(__v), _VSTD::move(__v));
        -: 1282:    }
        -: 1283:
        -: 1284:    template <class _Vp, class = typename enable_if<
        -: 1285:            !is_same<typename __unconstref<_Vp>::type,
        -: 1286:                     __container_value_type
        -: 1287:            >::value
        -: 1288:        >::type>
        -: 1289:    _LIBCPP_INLINE_VISIBILITY
        -: 1290:    pair<iterator, bool> __insert_unique(_Vp&& __v) {
    #####: 1291:        return __emplace_unique(_VSTD::forward<_Vp>(__v));
        -: 1292:    }
        -: 1293:
        -: 1294:    template <class _Vp, class = typename enable_if<
        -: 1295:            !is_same<typename __unconstref<_Vp>::type,
        -: 1296:                     __container_value_type
        -: 1297:            >::value
        -: 1298:        >::type>
        -: 1299:    _LIBCPP_INLINE_VISIBILITY
        -: 1300:    iterator __insert_unique(const_iterator __p, _Vp&& __v) {
        -: 1301:        return __emplace_hint_unique(__p, _VSTD::forward<_Vp>(__v));
        -: 1302:    }
        -: 1303:
        -: 1304:    _LIBCPP_INLINE_VISIBILITY
        -: 1305:    iterator __insert_multi(__container_value_type&& __v) {
        -: 1306:        return __emplace_multi(_VSTD::move(__v));
        -: 1307:    }
        -: 1308:
        -: 1309:    _LIBCPP_INLINE_VISIBILITY
        -: 1310:    iterator __insert_multi(const_iterator __p, __container_value_type&& __v) {
        -: 1311:        return __emplace_hint_multi(__p, _VSTD::move(__v));
        -: 1312:    }
        -: 1313:
        -: 1314:    template <class _Vp>
        -: 1315:    _LIBCPP_INLINE_VISIBILITY
        -: 1316:    iterator __insert_multi(_Vp&& __v) {
        -: 1317:        return __emplace_multi(_VSTD::forward<_Vp>(__v));
        -: 1318:    }
        -: 1319:
        -: 1320:    template <class _Vp>
        -: 1321:    _LIBCPP_INLINE_VISIBILITY
        -: 1322:    iterator __insert_multi(const_iterator __p, _Vp&& __v) {
        -: 1323:        return __emplace_hint_multi(__p, _VSTD::forward<_Vp>(__v));
        -: 1324:    }
        -: 1325:
        -: 1326:#endif // !_LIBCPP_CXX03_LANG
        -: 1327:
        -: 1328:    pair<iterator, bool> __node_insert_unique(__node_pointer __nd);
        -: 1329:    iterator             __node_insert_unique(const_iterator __p,
        -: 1330:                                              __node_pointer __nd);
        -: 1331:
        -: 1332:    iterator __node_insert_multi(__node_pointer __nd);
        -: 1333:    iterator __node_insert_multi(const_iterator __p, __node_pointer __nd);
        -: 1334:
        -: 1335:
        -: 1336:    _LIBCPP_INLINE_VISIBILITY iterator __remove_node_pointer(__node_pointer);
        -: 1337:
        -: 1338:#if _LIBCPP_STD_VER > 14
        -: 1339:    template <class _NodeHandle, class _InsertReturnType>
        -: 1340:    _LIBCPP_INLINE_VISIBILITY
        -: 1341:    _InsertReturnType __node_handle_insert_unique(_NodeHandle&&);
        -: 1342:    template <class _NodeHandle>
        -: 1343:    _LIBCPP_INLINE_VISIBILITY
        -: 1344:    iterator __node_handle_insert_unique(const_iterator, _NodeHandle&&);
        -: 1345:
        -: 1346:    template <class _NodeHandle>
        -: 1347:    _LIBCPP_INLINE_VISIBILITY
        -: 1348:    iterator __node_handle_insert_multi(_NodeHandle&&);
        -: 1349:    template <class _NodeHandle>
        -: 1350:    _LIBCPP_INLINE_VISIBILITY
        -: 1351:    iterator __node_handle_insert_multi(const_iterator, _NodeHandle&&);
        -: 1352:
        -: 1353:
        -: 1354:    template <class _NodeHandle>
        -: 1355:    _LIBCPP_INLINE_VISIBILITY
        -: 1356:    _NodeHandle __node_handle_extract(key_type const&);
        -: 1357:    template <class _NodeHandle>
        -: 1358:    _LIBCPP_INLINE_VISIBILITY
        -: 1359:    _NodeHandle __node_handle_extract(const_iterator);
        -: 1360:#endif
        -: 1361:
        -: 1362:    iterator erase(const_iterator __p);
        -: 1363:    iterator erase(const_iterator __f, const_iterator __l);
        -: 1364:    template <class _Key>
        -: 1365:        size_type __erase_unique(const _Key& __k);
        -: 1366:    template <class _Key>
        -: 1367:        size_type __erase_multi(const _Key& __k);
        -: 1368:
        -: 1369:    void __insert_node_at(__parent_pointer     __parent,
        -: 1370:                          __node_base_pointer& __child,
        -: 1371:                          __node_base_pointer __new_node);
        -: 1372:
        -: 1373:    template <class _Key>
        -: 1374:        iterator find(const _Key& __v);
        -: 1375:    template <class _Key>
        -: 1376:        const_iterator find(const _Key& __v) const;
        -: 1377:
        -: 1378:    template <class _Key>
        -: 1379:        size_type __count_unique(const _Key& __k) const;
        -: 1380:    template <class _Key>
        -: 1381:        size_type __count_multi(const _Key& __k) const;
        -: 1382:
        -: 1383:    template <class _Key>
        -: 1384:        _LIBCPP_INLINE_VISIBILITY
        -: 1385:        iterator lower_bound(const _Key& __v)
        -: 1386:            {return __lower_bound(__v, __root(), __end_node());}
        -: 1387:    template <class _Key>
        -: 1388:        iterator __lower_bound(const _Key& __v,
        -: 1389:                               __node_pointer __root,
        -: 1390:                               __iter_pointer __result);
        -: 1391:    template <class _Key>
        -: 1392:        _LIBCPP_INLINE_VISIBILITY
        -: 1393:        const_iterator lower_bound(const _Key& __v) const
        -: 1394:            {return __lower_bound(__v, __root(), __end_node());}
        -: 1395:    template <class _Key>
        -: 1396:        const_iterator __lower_bound(const _Key& __v,
        -: 1397:                                     __node_pointer __root,
        -: 1398:                                     __iter_pointer __result) const;
        -: 1399:    template <class _Key>
        -: 1400:        _LIBCPP_INLINE_VISIBILITY
        -: 1401:        iterator upper_bound(const _Key& __v)
        -: 1402:            {return __upper_bound(__v, __root(), __end_node());}
        -: 1403:    template <class _Key>
        -: 1404:        iterator __upper_bound(const _Key& __v,
        -: 1405:                               __node_pointer __root,
        -: 1406:                               __iter_pointer __result);
        -: 1407:    template <class _Key>
        -: 1408:        _LIBCPP_INLINE_VISIBILITY
        -: 1409:        const_iterator upper_bound(const _Key& __v) const
        -: 1410:            {return __upper_bound(__v, __root(), __end_node());}
        -: 1411:    template <class _Key>
        -: 1412:        const_iterator __upper_bound(const _Key& __v,
        -: 1413:                                     __node_pointer __root,
        -: 1414:                                     __iter_pointer __result) const;
        -: 1415:    template <class _Key>
        -: 1416:        pair<iterator, iterator>
        -: 1417:        __equal_range_unique(const _Key& __k);
        -: 1418:    template <class _Key>
        -: 1419:        pair<const_iterator, const_iterator>
        -: 1420:        __equal_range_unique(const _Key& __k) const;
        -: 1421:
        -: 1422:    template <class _Key>
        -: 1423:        pair<iterator, iterator>
        -: 1424:        __equal_range_multi(const _Key& __k);
        -: 1425:    template <class _Key>
        -: 1426:        pair<const_iterator, const_iterator>
        -: 1427:        __equal_range_multi(const _Key& __k) const;
        -: 1428:
        -: 1429:    typedef __tree_node_destructor<__node_allocator> _Dp;
        -: 1430:    typedef unique_ptr<__node, _Dp> __node_holder;
        -: 1431:
        -: 1432:    __node_holder remove(const_iterator __p) _NOEXCEPT;
        -: 1433:private:
        -: 1434:    __node_base_pointer&
        -: 1435:        __find_leaf_low(__parent_pointer& __parent, const key_type& __v);
        -: 1436:    __node_base_pointer&
        -: 1437:        __find_leaf_high(__parent_pointer& __parent, const key_type& __v);
        -: 1438:    __node_base_pointer&
        -: 1439:        __find_leaf(const_iterator __hint,
        -: 1440:                    __parent_pointer& __parent, const key_type& __v);
        -: 1441:    // FIXME: Make this function const qualified. Unfortunetly doing so
        -: 1442:    // breaks existing code which uses non-const callable comparators.
        -: 1443:    template <class _Key>
        -: 1444:    __node_base_pointer&
        -: 1445:        __find_equal(__parent_pointer& __parent, const _Key& __v);
        -: 1446:    template <class _Key>
        -: 1447:    _LIBCPP_INLINE_VISIBILITY __node_base_pointer&
        -: 1448:    __find_equal(__parent_pointer& __parent, const _Key& __v) const {
        -: 1449:      return const_cast<__tree*>(this)->__find_equal(__parent, __v);
        -: 1450:    }
        -: 1451:    template <class _Key>
        -: 1452:    __node_base_pointer&
        -: 1453:        __find_equal(const_iterator __hint, __parent_pointer& __parent,
        -: 1454:                     __node_base_pointer& __dummy,
        -: 1455:                     const _Key& __v);
        -: 1456:
        -: 1457:#ifndef _LIBCPP_CXX03_LANG
        -: 1458:    template <class ..._Args>
        -: 1459:    __node_holder __construct_node(_Args&& ...__args);
        -: 1460:#else
        -: 1461:    __node_holder __construct_node(const __container_value_type& __v);
        -: 1462:#endif
        -: 1463:
        -: 1464:    void destroy(__node_pointer __nd) _NOEXCEPT;
        -: 1465:
        -: 1466:    _LIBCPP_INLINE_VISIBILITY
        -: 1467:    void __copy_assign_alloc(const __tree& __t)
        -: 1468:        {__copy_assign_alloc(__t, integral_constant<bool,
        -: 1469:             __node_traits::propagate_on_container_copy_assignment::value>());}
        -: 1470:
        -: 1471:    _LIBCPP_INLINE_VISIBILITY
        -: 1472:    void __copy_assign_alloc(const __tree& __t, true_type)
        -: 1473:        {
        -: 1474:        if (__node_alloc() != __t.__node_alloc())
        -: 1475:        	clear();
        -: 1476:        __node_alloc() = __t.__node_alloc();
        -: 1477:        }
        -: 1478:    _LIBCPP_INLINE_VISIBILITY
        -: 1479:    void __copy_assign_alloc(const __tree&, false_type) {}
        -: 1480:
        -: 1481:    void __move_assign(__tree& __t, false_type);
        -: 1482:    void __move_assign(__tree& __t, true_type)
        -: 1483:        _NOEXCEPT_(is_nothrow_move_assignable<value_compare>::value &&
        -: 1484:                   is_nothrow_move_assignable<__node_allocator>::value);
        -: 1485:
        -: 1486:    _LIBCPP_INLINE_VISIBILITY
        -: 1487:    void __move_assign_alloc(__tree& __t)
        -: 1488:        _NOEXCEPT_(
        -: 1489:            !__node_traits::propagate_on_container_move_assignment::value ||
        -: 1490:            is_nothrow_move_assignable<__node_allocator>::value)
        -: 1491:        {__move_assign_alloc(__t, integral_constant<bool,
        -: 1492:             __node_traits::propagate_on_container_move_assignment::value>());}
        -: 1493:
        -: 1494:    _LIBCPP_INLINE_VISIBILITY
        -: 1495:    void __move_assign_alloc(__tree& __t, true_type)
        -: 1496:        _NOEXCEPT_(is_nothrow_move_assignable<__node_allocator>::value)
        -: 1497:        {__node_alloc() = _VSTD::move(__t.__node_alloc());}
        -: 1498:    _LIBCPP_INLINE_VISIBILITY
        -: 1499:    void __move_assign_alloc(__tree&, false_type) _NOEXCEPT {}
        -: 1500:
        -: 1501:    __node_pointer __detach();
        -: 1502:    static __node_pointer __detach(__node_pointer);
        -: 1503:
        -: 1504:    template <class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS map;
        -: 1505:    template <class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS multimap;
        -: 1506:};
        -: 1507:
        -: 1508:template <class _Tp, class _Compare, class _Allocator>
        -: 1509:__tree<_Tp, _Compare, _Allocator>::__tree(const value_compare& __comp)
        -: 1510:        _NOEXCEPT_(
        -: 1511:            is_nothrow_default_constructible<__node_allocator>::value &&
        -: 1512:            is_nothrow_copy_constructible<value_compare>::value)
    #####: 1513:    : __pair3_(0, __comp)
    #####: 1514:{
    #####: 1515:    __begin_node() = __end_node();
    #####: 1516:}
        -: 1517:
        -: 1518:template <class _Tp, class _Compare, class _Allocator>
        -: 1519:__tree<_Tp, _Compare, _Allocator>::__tree(const allocator_type& __a)
        -: 1520:    : __begin_node_(__iter_pointer()),
        -: 1521:      __pair1_(__second_tag(), __node_allocator(__a)),
        -: 1522:      __pair3_(0)
        -: 1523:{
        -: 1524:    __begin_node() = __end_node();
        -: 1525:}
        -: 1526:
        -: 1527:template <class _Tp, class _Compare, class _Allocator>
        -: 1528:__tree<_Tp, _Compare, _Allocator>::__tree(const value_compare& __comp,
        -: 1529:                                           const allocator_type& __a)
        -: 1530:    : __begin_node_(__iter_pointer()),
        -: 1531:      __pair1_(__second_tag(), __node_allocator(__a)),
        -: 1532:      __pair3_(0, __comp)
        -: 1533:{
        -: 1534:    __begin_node() = __end_node();
        -: 1535:}
        -: 1536:
        -: 1537:// Precondition:  size() != 0
        -: 1538:template <class _Tp, class _Compare, class _Allocator>
        -: 1539:typename __tree<_Tp, _Compare, _Allocator>::__node_pointer
        -: 1540:__tree<_Tp, _Compare, _Allocator>::__detach()
        -: 1541:{
        -: 1542:    __node_pointer __cache = static_cast<__node_pointer>(__begin_node());
        -: 1543:    __begin_node() = __end_node();
        -: 1544:    __end_node()->__left_->__parent_ = nullptr;
        -: 1545:    __end_node()->__left_ = nullptr;
        -: 1546:    size() = 0;
        -: 1547:    // __cache->__left_ == nullptr
        -: 1548:    if (__cache->__right_ != nullptr)
        -: 1549:        __cache = static_cast<__node_pointer>(__cache->__right_);
        -: 1550:    // __cache->__left_ == nullptr
        -: 1551:    // __cache->__right_ == nullptr
        -: 1552:    return __cache;
        -: 1553:}
        -: 1554:
        -: 1555:// Precondition:  __cache != nullptr
        -: 1556://    __cache->left_ == nullptr
        -: 1557://    __cache->right_ == nullptr
        -: 1558://    This is no longer a red-black tree
        -: 1559:template <class _Tp, class _Compare, class _Allocator>
        -: 1560:typename __tree<_Tp, _Compare, _Allocator>::__node_pointer
        -: 1561:__tree<_Tp, _Compare, _Allocator>::__detach(__node_pointer __cache)
        -: 1562:{
        -: 1563:    if (__cache->__parent_ == nullptr)
        -: 1564:        return nullptr;
        -: 1565:    if (__tree_is_left_child(static_cast<__node_base_pointer>(__cache)))
        -: 1566:    {
        -: 1567:        __cache->__parent_->__left_ = nullptr;
        -: 1568:        __cache = static_cast<__node_pointer>(__cache->__parent_);
        -: 1569:        if (__cache->__right_ == nullptr)
        -: 1570:            return __cache;
        -: 1571:        return static_cast<__node_pointer>(__tree_leaf(__cache->__right_));
        -: 1572:    }
        -: 1573:    // __cache is right child
        -: 1574:    __cache->__parent_unsafe()->__right_ = nullptr;
        -: 1575:    __cache = static_cast<__node_pointer>(__cache->__parent_);
        -: 1576:    if (__cache->__left_ == nullptr)
        -: 1577:        return __cache;
        -: 1578:    return static_cast<__node_pointer>(__tree_leaf(__cache->__left_));
        -: 1579:}
        -: 1580:
        -: 1581:template <class _Tp, class _Compare, class _Allocator>
        -: 1582:__tree<_Tp, _Compare, _Allocator>&
        -: 1583:__tree<_Tp, _Compare, _Allocator>::operator=(const __tree& __t)
        -: 1584:{
        -: 1585:    if (this != &__t)
        -: 1586:    {
        -: 1587:        value_comp() = __t.value_comp();
        -: 1588:        __copy_assign_alloc(__t);
        -: 1589:        __assign_multi(__t.begin(), __t.end());
        -: 1590:    }
        -: 1591:    return *this;
        -: 1592:}
        -: 1593:
        -: 1594:template <class _Tp, class _Compare, class _Allocator>
        -: 1595:template <class _InputIterator>
        -: 1596:void
        -: 1597:__tree<_Tp, _Compare, _Allocator>::__assign_unique(_InputIterator __first, _InputIterator __last)
        -: 1598:{
        -: 1599:    typedef iterator_traits<_InputIterator> _ITraits;
        -: 1600:    typedef typename _ITraits::value_type _ItValueType;
        -: 1601:    static_assert((is_same<_ItValueType, __container_value_type>::value),
        -: 1602:                  "__assign_unique may only be called with the containers value type");
        -: 1603:
        -: 1604:    if (size() != 0)
        -: 1605:    {
        -: 1606:        __node_pointer __cache = __detach();
        -: 1607:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1608:        try
        -: 1609:        {
        -: 1610:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 1611:            for (; __cache != nullptr && __first != __last; ++__first)
        -: 1612:            {
        -: 1613:                __cache->__value_ = *__first;
        -: 1614:                __node_pointer __next = __detach(__cache);
        -: 1615:                __node_insert_unique(__cache);
        -: 1616:                __cache = __next;
        -: 1617:            }
        -: 1618:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1619:        }
        -: 1620:        catch (...)
        -: 1621:        {
        -: 1622:            while (__cache->__parent_ != nullptr)
        -: 1623:                __cache = static_cast<__node_pointer>(__cache->__parent_);
        -: 1624:            destroy(__cache);
        -: 1625:            throw;
        -: 1626:        }
        -: 1627:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 1628:        if (__cache != nullptr)
        -: 1629:        {
        -: 1630:            while (__cache->__parent_ != nullptr)
        -: 1631:                __cache = static_cast<__node_pointer>(__cache->__parent_);
        -: 1632:            destroy(__cache);
        -: 1633:        }
        -: 1634:    }
        -: 1635:    for (; __first != __last; ++__first)
        -: 1636:        __insert_unique(*__first);
        -: 1637:}
        -: 1638:
        -: 1639:template <class _Tp, class _Compare, class _Allocator>
        -: 1640:template <class _InputIterator>
        -: 1641:void
        -: 1642:__tree<_Tp, _Compare, _Allocator>::__assign_multi(_InputIterator __first, _InputIterator __last)
        -: 1643:{
        -: 1644:    typedef iterator_traits<_InputIterator> _ITraits;
        -: 1645:    typedef typename _ITraits::value_type _ItValueType;
        -: 1646:    static_assert((is_same<_ItValueType, __container_value_type>::value ||
        -: 1647:                  is_same<_ItValueType, __node_value_type>::value),
        -: 1648:                  "__assign_multi may only be called with the containers value type"
        -: 1649:                  " or the nodes value type");
        -: 1650:    if (size() != 0)
        -: 1651:    {
        -: 1652:        __node_pointer __cache = __detach();
        -: 1653:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1654:        try
        -: 1655:        {
        -: 1656:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 1657:            for (; __cache != nullptr && __first != __last; ++__first)
        -: 1658:            {
        -: 1659:                __cache->__value_ = *__first;
        -: 1660:                __node_pointer __next = __detach(__cache);
        -: 1661:                __node_insert_multi(__cache);
        -: 1662:                __cache = __next;
        -: 1663:            }
        -: 1664:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1665:        }
        -: 1666:        catch (...)
        -: 1667:        {
        -: 1668:            while (__cache->__parent_ != nullptr)
        -: 1669:                __cache = static_cast<__node_pointer>(__cache->__parent_);
        -: 1670:            destroy(__cache);
        -: 1671:            throw;
        -: 1672:        }
        -: 1673:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 1674:        if (__cache != nullptr)
        -: 1675:        {
        -: 1676:            while (__cache->__parent_ != nullptr)
        -: 1677:                __cache = static_cast<__node_pointer>(__cache->__parent_);
        -: 1678:            destroy(__cache);
        -: 1679:        }
        -: 1680:    }
        -: 1681:    for (; __first != __last; ++__first)
        -: 1682:        __insert_multi(_NodeTypes::__get_value(*__first));
        -: 1683:}
        -: 1684:
        -: 1685:template <class _Tp, class _Compare, class _Allocator>
        -: 1686:__tree<_Tp, _Compare, _Allocator>::__tree(const __tree& __t)
        -: 1687:    : __begin_node_(__iter_pointer()),
        -: 1688:      __pair1_(__second_tag(), __node_traits::select_on_container_copy_construction(__t.__node_alloc())),
        -: 1689:      __pair3_(0, __t.value_comp())
        -: 1690:{
        -: 1691:    __begin_node() = __end_node();
        -: 1692:}
        -: 1693:
        -: 1694:#ifndef _LIBCPP_CXX03_LANG
        -: 1695:
        -: 1696:template <class _Tp, class _Compare, class _Allocator>
        -: 1697:__tree<_Tp, _Compare, _Allocator>::__tree(__tree&& __t)
        -: 1698:    _NOEXCEPT_(
        -: 1699:        is_nothrow_move_constructible<__node_allocator>::value &&
        -: 1700:        is_nothrow_move_constructible<value_compare>::value)
    #####: 1701:    : __begin_node_(_VSTD::move(__t.__begin_node_)),
    #####: 1702:      __pair1_(_VSTD::move(__t.__pair1_)),
    #####: 1703:      __pair3_(_VSTD::move(__t.__pair3_))
    #####: 1704:{
    #####: 1705:    if (size() == 0)
    #####: 1706:        __begin_node() = __end_node();
        -: 1707:    else
        -: 1708:    {
    #####: 1709:        __end_node()->__left_->__parent_ = static_cast<__parent_pointer>(__end_node());
    #####: 1710:        __t.__begin_node() = __t.__end_node();
    #####: 1711:        __t.__end_node()->__left_ = nullptr;
    #####: 1712:        __t.size() = 0;
        -: 1713:    }
    #####: 1714:}
        -: 1715:
        -: 1716:template <class _Tp, class _Compare, class _Allocator>
        -: 1717:__tree<_Tp, _Compare, _Allocator>::__tree(__tree&& __t, const allocator_type& __a)
        -: 1718:    : __pair1_(__second_tag(), __node_allocator(__a)),
        -: 1719:      __pair3_(0, _VSTD::move(__t.value_comp()))
        -: 1720:{
        -: 1721:    if (__a == __t.__alloc())
        -: 1722:    {
        -: 1723:        if (__t.size() == 0)
        -: 1724:            __begin_node() = __end_node();
        -: 1725:        else
        -: 1726:        {
        -: 1727:            __begin_node() = __t.__begin_node();
        -: 1728:            __end_node()->__left_ = __t.__end_node()->__left_;
        -: 1729:            __end_node()->__left_->__parent_ = static_cast<__parent_pointer>(__end_node());
        -: 1730:            size() = __t.size();
        -: 1731:            __t.__begin_node() = __t.__end_node();
        -: 1732:            __t.__end_node()->__left_ = nullptr;
        -: 1733:            __t.size() = 0;
        -: 1734:        }
        -: 1735:    }
        -: 1736:    else
        -: 1737:    {
        -: 1738:        __begin_node() = __end_node();
        -: 1739:    }
        -: 1740:}
        -: 1741:
        -: 1742:template <class _Tp, class _Compare, class _Allocator>
        -: 1743:void
        -: 1744:__tree<_Tp, _Compare, _Allocator>::__move_assign(__tree& __t, true_type)
        -: 1745:    _NOEXCEPT_(is_nothrow_move_assignable<value_compare>::value &&
        -: 1746:               is_nothrow_move_assignable<__node_allocator>::value)
        -: 1747:{
        -: 1748:    destroy(static_cast<__node_pointer>(__end_node()->__left_));
        -: 1749:    __begin_node_ = __t.__begin_node_;
        -: 1750:    __pair1_.first() = __t.__pair1_.first();
        -: 1751:    __move_assign_alloc(__t);
        -: 1752:    __pair3_ = _VSTD::move(__t.__pair3_);
        -: 1753:    if (size() == 0)
        -: 1754:        __begin_node() = __end_node();
        -: 1755:    else
        -: 1756:    {
        -: 1757:        __end_node()->__left_->__parent_ = static_cast<__parent_pointer>(__end_node());
        -: 1758:        __t.__begin_node() = __t.__end_node();
        -: 1759:        __t.__end_node()->__left_ = nullptr;
        -: 1760:        __t.size() = 0;
        -: 1761:    }
        -: 1762:}
        -: 1763:
        -: 1764:template <class _Tp, class _Compare, class _Allocator>
        -: 1765:void
        -: 1766:__tree<_Tp, _Compare, _Allocator>::__move_assign(__tree& __t, false_type)
        -: 1767:{
        -: 1768:    if (__node_alloc() == __t.__node_alloc())
        -: 1769:        __move_assign(__t, true_type());
        -: 1770:    else
        -: 1771:    {
        -: 1772:        value_comp() = _VSTD::move(__t.value_comp());
        -: 1773:        const_iterator __e = end();
        -: 1774:        if (size() != 0)
        -: 1775:        {
        -: 1776:            __node_pointer __cache = __detach();
        -: 1777:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1778:            try
        -: 1779:            {
        -: 1780:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 1781:                while (__cache != nullptr && __t.size() != 0)
        -: 1782:                {
        -: 1783:                    __cache->__value_ = _VSTD::move(__t.remove(__t.begin())->__value_);
        -: 1784:                    __node_pointer __next = __detach(__cache);
        -: 1785:                    __node_insert_multi(__cache);
        -: 1786:                    __cache = __next;
        -: 1787:                }
        -: 1788:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1789:            }
        -: 1790:            catch (...)
        -: 1791:            {
        -: 1792:                while (__cache->__parent_ != nullptr)
        -: 1793:                    __cache = static_cast<__node_pointer>(__cache->__parent_);
        -: 1794:                destroy(__cache);
        -: 1795:                throw;
        -: 1796:            }
        -: 1797:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 1798:            if (__cache != nullptr)
        -: 1799:            {
        -: 1800:                while (__cache->__parent_ != nullptr)
        -: 1801:                    __cache = static_cast<__node_pointer>(__cache->__parent_);
        -: 1802:                destroy(__cache);
        -: 1803:            }
        -: 1804:        }
        -: 1805:        while (__t.size() != 0)
        -: 1806:            __insert_multi(__e, _NodeTypes::__move(__t.remove(__t.begin())->__value_));
        -: 1807:    }
        -: 1808:}
        -: 1809:
        -: 1810:template <class _Tp, class _Compare, class _Allocator>
        -: 1811:__tree<_Tp, _Compare, _Allocator>&
        -: 1812:__tree<_Tp, _Compare, _Allocator>::operator=(__tree&& __t)
        -: 1813:    _NOEXCEPT_(
        -: 1814:        __node_traits::propagate_on_container_move_assignment::value &&
        -: 1815:        is_nothrow_move_assignable<value_compare>::value &&
        -: 1816:        is_nothrow_move_assignable<__node_allocator>::value)
        -: 1817:        
        -: 1818:{
        -: 1819:    __move_assign(__t, integral_constant<bool,
        -: 1820:                  __node_traits::propagate_on_container_move_assignment::value>());
        -: 1821:    return *this;
        -: 1822:}
        -: 1823:
        -: 1824:#endif  // _LIBCPP_CXX03_LANG
        -: 1825:
        -: 1826:template <class _Tp, class _Compare, class _Allocator>
        -: 1827:__tree<_Tp, _Compare, _Allocator>::~__tree()
    #####: 1828:{
        -: 1829:    static_assert((is_copy_constructible<value_compare>::value),
        -: 1830:                 "Comparator must be copy-constructible.");
    #####: 1831:  destroy(__root());
    #####: 1832:}
        -: 1833:
        -: 1834:template <class _Tp, class _Compare, class _Allocator>
        -: 1835:void
        -: 1836:__tree<_Tp, _Compare, _Allocator>::destroy(__node_pointer __nd) _NOEXCEPT
        -: 1837:{
    #####: 1838:    if (__nd != nullptr)
        -: 1839:    {
    #####: 1840:        destroy(static_cast<__node_pointer>(__nd->__left_));
    #####: 1841:        destroy(static_cast<__node_pointer>(__nd->__right_));
    #####: 1842:        __node_allocator& __na = __node_alloc();
    #####: 1843:        __node_traits::destroy(__na, _NodeTypes::__get_ptr(__nd->__value_));
    #####: 1844:        __node_traits::deallocate(__na, __nd, 1);
    #####: 1845:    }
    #####: 1846:}
        -: 1847:
        -: 1848:template <class _Tp, class _Compare, class _Allocator>
        -: 1849:void
        -: 1850:__tree<_Tp, _Compare, _Allocator>::swap(__tree& __t)
        -: 1851:#if _LIBCPP_STD_VER <= 11
        -: 1852:        _NOEXCEPT_(
        -: 1853:            __is_nothrow_swappable<value_compare>::value
        -: 1854:            && (!__node_traits::propagate_on_container_swap::value ||
        -: 1855:                 __is_nothrow_swappable<__node_allocator>::value)
        -: 1856:            )
        -: 1857:#else
        -: 1858:        _NOEXCEPT_(__is_nothrow_swappable<value_compare>::value)
        -: 1859:#endif
        -: 1860:{
        -: 1861:    using _VSTD::swap;
        -: 1862:    swap(__begin_node_, __t.__begin_node_);
        -: 1863:    swap(__pair1_.first(), __t.__pair1_.first());
        -: 1864:    __swap_allocator(__node_alloc(), __t.__node_alloc());
        -: 1865:    __pair3_.swap(__t.__pair3_);
        -: 1866:    if (size() == 0)
        -: 1867:        __begin_node() = __end_node();
        -: 1868:    else
        -: 1869:        __end_node()->__left_->__parent_ = static_cast<__parent_pointer>(__end_node());
        -: 1870:    if (__t.size() == 0)
        -: 1871:        __t.__begin_node() = __t.__end_node();
        -: 1872:    else
        -: 1873:        __t.__end_node()->__left_->__parent_ = static_cast<__parent_pointer>(__t.__end_node());
        -: 1874:}
        -: 1875:
        -: 1876:template <class _Tp, class _Compare, class _Allocator>
        -: 1877:void
        -: 1878:__tree<_Tp, _Compare, _Allocator>::clear() _NOEXCEPT
        -: 1879:{
        -: 1880:    destroy(__root());
        -: 1881:    size() = 0;
        -: 1882:    __begin_node() = __end_node();
        -: 1883:    __end_node()->__left_ = nullptr;
        -: 1884:}
        -: 1885:
        -: 1886:// Find lower_bound place to insert
        -: 1887:// Set __parent to parent of null leaf
        -: 1888:// Return reference to null leaf
        -: 1889:template <class _Tp, class _Compare, class _Allocator>
        -: 1890:typename __tree<_Tp, _Compare, _Allocator>::__node_base_pointer&
        -: 1891:__tree<_Tp, _Compare, _Allocator>::__find_leaf_low(__parent_pointer& __parent,
        -: 1892:                                                   const key_type& __v)
        -: 1893:{
        -: 1894:    __node_pointer __nd = __root();
        -: 1895:    if (__nd != nullptr)
        -: 1896:    {
        -: 1897:        while (true)
        -: 1898:        {
        -: 1899:            if (value_comp()(__nd->__value_, __v))
        -: 1900:            {
        -: 1901:                if (__nd->__right_ != nullptr)
        -: 1902:                    __nd = static_cast<__node_pointer>(__nd->__right_);
        -: 1903:                else
        -: 1904:                {
        -: 1905:                    __parent = static_cast<__parent_pointer>(__nd);
        -: 1906:                    return __nd->__right_;
        -: 1907:                }
        -: 1908:            }
        -: 1909:            else
        -: 1910:            {
        -: 1911:                if (__nd->__left_ != nullptr)
        -: 1912:                    __nd = static_cast<__node_pointer>(__nd->__left_);
        -: 1913:                else
        -: 1914:                {
        -: 1915:                    __parent = static_cast<__parent_pointer>(__nd);
        -: 1916:                    return __parent->__left_;
        -: 1917:                }
        -: 1918:            }
        -: 1919:        }
        -: 1920:    }
        -: 1921:    __parent = static_cast<__parent_pointer>(__end_node());
        -: 1922:    return __parent->__left_;
        -: 1923:}
        -: 1924:
        -: 1925:// Find upper_bound place to insert
        -: 1926:// Set __parent to parent of null leaf
        -: 1927:// Return reference to null leaf
        -: 1928:template <class _Tp, class _Compare, class _Allocator>
        -: 1929:typename __tree<_Tp, _Compare, _Allocator>::__node_base_pointer&
        -: 1930:__tree<_Tp, _Compare, _Allocator>::__find_leaf_high(__parent_pointer& __parent,
        -: 1931:                                                    const key_type& __v)
        -: 1932:{
        -: 1933:    __node_pointer __nd = __root();
        -: 1934:    if (__nd != nullptr)
        -: 1935:    {
        -: 1936:        while (true)
        -: 1937:        {
        -: 1938:            if (value_comp()(__v, __nd->__value_))
        -: 1939:            {
        -: 1940:                if (__nd->__left_ != nullptr)
        -: 1941:                    __nd = static_cast<__node_pointer>(__nd->__left_);
        -: 1942:                else
        -: 1943:                {
        -: 1944:                    __parent = static_cast<__parent_pointer>(__nd);
        -: 1945:                    return __parent->__left_;
        -: 1946:                }
        -: 1947:            }
        -: 1948:            else
        -: 1949:            {
        -: 1950:                if (__nd->__right_ != nullptr)
        -: 1951:                    __nd = static_cast<__node_pointer>(__nd->__right_);
        -: 1952:                else
        -: 1953:                {
        -: 1954:                    __parent = static_cast<__parent_pointer>(__nd);
        -: 1955:                    return __nd->__right_;
        -: 1956:                }
        -: 1957:            }
        -: 1958:        }
        -: 1959:    }
        -: 1960:    __parent = static_cast<__parent_pointer>(__end_node());
        -: 1961:    return __parent->__left_;
        -: 1962:}
        -: 1963:
        -: 1964:// Find leaf place to insert closest to __hint
        -: 1965:// First check prior to __hint.
        -: 1966:// Next check after __hint.
        -: 1967:// Next do O(log N) search.
        -: 1968:// Set __parent to parent of null leaf
        -: 1969:// Return reference to null leaf
        -: 1970:template <class _Tp, class _Compare, class _Allocator>
        -: 1971:typename __tree<_Tp, _Compare, _Allocator>::__node_base_pointer&
        -: 1972:__tree<_Tp, _Compare, _Allocator>::__find_leaf(const_iterator __hint,
        -: 1973:                                               __parent_pointer& __parent,
        -: 1974:                                               const key_type& __v)
        -: 1975:{
        -: 1976:    if (__hint == end() || !value_comp()(*__hint, __v))  // check before
        -: 1977:    {
        -: 1978:        // __v <= *__hint
        -: 1979:        const_iterator __prior = __hint;
        -: 1980:        if (__prior == begin() || !value_comp()(__v, *--__prior))
        -: 1981:        {
        -: 1982:            // *prev(__hint) <= __v <= *__hint
        -: 1983:            if (__hint.__ptr_->__left_ == nullptr)
        -: 1984:            {
        -: 1985:                __parent = static_cast<__parent_pointer>(__hint.__ptr_);
        -: 1986:                return __parent->__left_;
        -: 1987:            }
        -: 1988:            else
        -: 1989:            {
        -: 1990:                __parent = static_cast<__parent_pointer>(__prior.__ptr_);
        -: 1991:                return static_cast<__node_base_pointer>(__prior.__ptr_)->__right_;
        -: 1992:            }
        -: 1993:        }
        -: 1994:        // __v < *prev(__hint)
        -: 1995:        return __find_leaf_high(__parent, __v);
        -: 1996:    }
        -: 1997:    // else __v > *__hint
        -: 1998:    return __find_leaf_low(__parent, __v);
        -: 1999:}
        -: 2000:
        -: 2001:// Find place to insert if __v doesn't exist
        -: 2002:// Set __parent to parent of null leaf
        -: 2003:// Return reference to null leaf
        -: 2004:// If __v exists, set parent to node of __v and return reference to node of __v
        -: 2005:template <class _Tp, class _Compare, class _Allocator>
        -: 2006:template <class _Key>
        -: 2007:typename __tree<_Tp, _Compare, _Allocator>::__node_base_pointer&
        -: 2008:__tree<_Tp, _Compare, _Allocator>::__find_equal(__parent_pointer& __parent,
        -: 2009:                                                const _Key& __v)
        -: 2010:{
    #####: 2011:    __node_pointer __nd = __root();
    #####: 2012:    __node_base_pointer* __nd_ptr = __root_ptr();
    #####: 2013:    if (__nd != nullptr)
        -: 2014:    {
    #####: 2015:        while (true)
        -: 2016:        {
    #####: 2017:            if (value_comp()(__v, __nd->__value_))
        -: 2018:            {
    #####: 2019:                if (__nd->__left_ != nullptr) {
    #####: 2020:                    __nd_ptr = _VSTD::addressof(__nd->__left_);
    #####: 2021:                    __nd = static_cast<__node_pointer>(__nd->__left_);
    #####: 2022:                } else {
    #####: 2023:                    __parent = static_cast<__parent_pointer>(__nd);
    #####: 2024:                    return __parent->__left_;
        -: 2025:                }
    #####: 2026:            }
    #####: 2027:            else if (value_comp()(__nd->__value_, __v))
        -: 2028:            {
    #####: 2029:                if (__nd->__right_ != nullptr) {
    #####: 2030:                    __nd_ptr = _VSTD::addressof(__nd->__right_);
    #####: 2031:                    __nd = static_cast<__node_pointer>(__nd->__right_);
    #####: 2032:                } else {
    #####: 2033:                    __parent = static_cast<__parent_pointer>(__nd);
    #####: 2034:                    return __nd->__right_;
        -: 2035:                }
    #####: 2036:            }
        -: 2037:            else
        -: 2038:            {
    #####: 2039:                __parent = static_cast<__parent_pointer>(__nd);
    #####: 2040:                return *__nd_ptr;
        -: 2041:            }
        -: 2042:        }
        -: 2043:    }
    #####: 2044:    __parent = static_cast<__parent_pointer>(__end_node());
    #####: 2045:    return __parent->__left_;
    #####: 2046:}
        -: 2047:
        -: 2048:// Find place to insert if __v doesn't exist
        -: 2049:// First check prior to __hint.
        -: 2050:// Next check after __hint.
        -: 2051:// Next do O(log N) search.
        -: 2052:// Set __parent to parent of null leaf
        -: 2053:// Return reference to null leaf
        -: 2054:// If __v exists, set parent to node of __v and return reference to node of __v
        -: 2055:template <class _Tp, class _Compare, class _Allocator>
        -: 2056:template <class _Key>
        -: 2057:typename __tree<_Tp, _Compare, _Allocator>::__node_base_pointer&
        -: 2058:__tree<_Tp, _Compare, _Allocator>::__find_equal(const_iterator __hint,
        -: 2059:                                                __parent_pointer& __parent,
        -: 2060:                                                __node_base_pointer& __dummy,
        -: 2061:                                                const _Key& __v)
        -: 2062:{
    #####: 2063:    if (__hint == end() || value_comp()(__v, *__hint))  // check before
        -: 2064:    {
        -: 2065:        // __v < *__hint
    #####: 2066:        const_iterator __prior = __hint;
    #####: 2067:        if (__prior == begin() || value_comp()(*--__prior, __v))
        -: 2068:        {
        -: 2069:            // *prev(__hint) < __v < *__hint
    #####: 2070:            if (__hint.__ptr_->__left_ == nullptr)
        -: 2071:            {
    #####: 2072:                __parent = static_cast<__parent_pointer>(__hint.__ptr_);
    #####: 2073:                return __parent->__left_;
        -: 2074:            }
        -: 2075:            else
        -: 2076:            {
    #####: 2077:                __parent = static_cast<__parent_pointer>(__prior.__ptr_);
    #####: 2078:                return static_cast<__node_base_pointer>(__prior.__ptr_)->__right_;
        -: 2079:            }
        -: 2080:        }
        -: 2081:        // __v <= *prev(__hint)
    #####: 2082:        return __find_equal(__parent, __v);
        -: 2083:    }
    #####: 2084:    else if (value_comp()(*__hint, __v))  // check after
        -: 2085:    {
        -: 2086:        // *__hint < __v
    #####: 2087:        const_iterator __next = _VSTD::next(__hint);
    #####: 2088:        if (__next == end() || value_comp()(__v, *__next))
        -: 2089:        {
        -: 2090:            // *__hint < __v < *_VSTD::next(__hint)
    #####: 2091:            if (__hint.__get_np()->__right_ == nullptr)
        -: 2092:            {
    #####: 2093:                __parent = static_cast<__parent_pointer>(__hint.__ptr_);
    #####: 2094:                return static_cast<__node_base_pointer>(__hint.__ptr_)->__right_;
        -: 2095:            }
        -: 2096:            else
        -: 2097:            {
    #####: 2098:                __parent = static_cast<__parent_pointer>(__next.__ptr_);
    #####: 2099:                return __parent->__left_;
        -: 2100:            }
        -: 2101:        }
        -: 2102:        // *next(__hint) <= __v
    #####: 2103:        return __find_equal(__parent, __v);
        -: 2104:    }
        -: 2105:    // else __v == *__hint
    #####: 2106:    __parent = static_cast<__parent_pointer>(__hint.__ptr_);
    #####: 2107:    __dummy = static_cast<__node_base_pointer>(__hint.__ptr_);
    #####: 2108:    return __dummy;
    #####: 2109:}
        -: 2110:
        -: 2111:template <class _Tp, class _Compare, class _Allocator>
        -: 2112:void
        -: 2113:__tree<_Tp, _Compare, _Allocator>::__insert_node_at(__parent_pointer     __parent,
        -: 2114:                                                    __node_base_pointer& __child,
        -: 2115:                                                    __node_base_pointer  __new_node)
        -: 2116:{
    #####: 2117:    __new_node->__left_   = nullptr;
    #####: 2118:    __new_node->__right_  = nullptr;
    #####: 2119:    __new_node->__parent_ = __parent;
        -: 2120:    // __new_node->__is_black_ is initialized in __tree_balance_after_insert
    #####: 2121:    __child = __new_node;
    #####: 2122:    if (__begin_node()->__left_ != nullptr)
    #####: 2123:        __begin_node() = static_cast<__iter_pointer>(__begin_node()->__left_);
    #####: 2124:    __tree_balance_after_insert(__end_node()->__left_, __child);
    #####: 2125:    ++size();
    #####: 2126:}
        -: 2127:
        -: 2128:#ifndef _LIBCPP_CXX03_LANG
        -: 2129:template <class _Tp, class _Compare, class _Allocator>
        -: 2130:template <class _Key, class... _Args>
        -: 2131:pair<typename __tree<_Tp, _Compare, _Allocator>::iterator, bool>
        -: 2132:__tree<_Tp, _Compare, _Allocator>::__emplace_unique_key_args(_Key const& __k, _Args&&... __args)
        -: 2133:#else
        -: 2134:template <class _Tp, class _Compare, class _Allocator>
        -: 2135:template <class _Key, class _Args>
        -: 2136:pair<typename __tree<_Tp, _Compare, _Allocator>::iterator, bool>
        -: 2137:__tree<_Tp, _Compare, _Allocator>::__emplace_unique_key_args(_Key const& __k, _Args& __args)
        -: 2138:#endif
        -: 2139:{
        -: 2140:    __parent_pointer __parent;
    #####: 2141:    __node_base_pointer& __child = __find_equal(__parent, __k);
    #####: 2142:    __node_pointer __r = static_cast<__node_pointer>(__child);
    #####: 2143:    bool __inserted = false;
    #####: 2144:    if (__child == nullptr)
        -: 2145:    {
        -: 2146:#ifndef _LIBCPP_CXX03_LANG
    #####: 2147:        __node_holder __h = __construct_node(_VSTD::forward<_Args>(__args)...);
        -: 2148:#else
        -: 2149:        __node_holder __h = __construct_node(__args);
        -: 2150:#endif
    #####: 2151:        __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__h.get()));
    #####: 2152:        __r = __h.release();
    #####: 2153:        __inserted = true;
    #####: 2154:    }
    #####: 2155:    return pair<iterator, bool>(iterator(__r), __inserted);
    #####: 2156:}
        -: 2157:
        -: 2158:
        -: 2159:#ifndef _LIBCPP_CXX03_LANG
        -: 2160:template <class _Tp, class _Compare, class _Allocator>
        -: 2161:template <class _Key, class... _Args>
        -: 2162:typename __tree<_Tp, _Compare, _Allocator>::iterator
        -: 2163:__tree<_Tp, _Compare, _Allocator>::__emplace_hint_unique_key_args(
        -: 2164:    const_iterator __p, _Key const& __k, _Args&&... __args)
        -: 2165:#else
        -: 2166:template <class _Tp, class _Compare, class _Allocator>
        -: 2167:template <class _Key, class _Args>
        -: 2168:typename __tree<_Tp, _Compare, _Allocator>::iterator
        -: 2169:__tree<_Tp, _Compare, _Allocator>::__emplace_hint_unique_key_args(
        -: 2170:    const_iterator __p, _Key const& __k, _Args& __args)
        -: 2171:#endif
        -: 2172:{
        -: 2173:    __parent_pointer __parent;
        -: 2174:    __node_base_pointer __dummy;
    #####: 2175:    __node_base_pointer& __child = __find_equal(__p, __parent, __dummy, __k);
    #####: 2176:    __node_pointer __r = static_cast<__node_pointer>(__child);
    #####: 2177:    if (__child == nullptr)
        -: 2178:    {
        -: 2179:#ifndef _LIBCPP_CXX03_LANG
    #####: 2180:        __node_holder __h = __construct_node(_VSTD::forward<_Args>(__args)...);
        -: 2181:#else
        -: 2182:        __node_holder __h = __construct_node(__args);
        -: 2183:#endif
    #####: 2184:        __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__h.get()));
    #####: 2185:        __r = __h.release();
    #####: 2186:    }
    #####: 2187:    return iterator(__r);
    #####: 2188:}
        -: 2189:
        -: 2190:
        -: 2191:#ifndef _LIBCPP_CXX03_LANG
        -: 2192:
        -: 2193:template <class _Tp, class _Compare, class _Allocator>
        -: 2194:template <class ..._Args>
        -: 2195:typename __tree<_Tp, _Compare, _Allocator>::__node_holder
        -: 2196:__tree<_Tp, _Compare, _Allocator>::__construct_node(_Args&& ...__args)
        -: 2197:{
        -: 2198:    static_assert(!__is_tree_value_type<_Args...>::value,
        -: 2199:                  "Cannot construct from __value_type");
    #####: 2200:    __node_allocator& __na = __node_alloc();
    #####: 2201:    __node_holder __h(__node_traits::allocate(__na, 1), _Dp(__na));
    #####: 2202:    __node_traits::construct(__na, _NodeTypes::__get_ptr(__h->__value_), _VSTD::forward<_Args>(__args)...);
    #####: 2203:    __h.get_deleter().__value_constructed = true;
    #####: 2204:    return __h;
    #####: 2205:}
        -: 2206:
        -: 2207:
        -: 2208:template <class _Tp, class _Compare, class _Allocator>
        -: 2209:template <class... _Args>
        -: 2210:pair<typename __tree<_Tp, _Compare, _Allocator>::iterator, bool>
        -: 2211:__tree<_Tp, _Compare, _Allocator>::__emplace_unique_impl(_Args&&... __args)
        -: 2212:{
        -: 2213:    __node_holder __h = __construct_node(_VSTD::forward<_Args>(__args)...);
        -: 2214:    __parent_pointer __parent;
        -: 2215:    __node_base_pointer& __child = __find_equal(__parent, __h->__value_);
        -: 2216:    __node_pointer __r = static_cast<__node_pointer>(__child);
        -: 2217:    bool __inserted = false;
        -: 2218:    if (__child == nullptr)
        -: 2219:    {
        -: 2220:        __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__h.get()));
        -: 2221:        __r = __h.release();
        -: 2222:        __inserted = true;
        -: 2223:    }
        -: 2224:    return pair<iterator, bool>(iterator(__r), __inserted);
        -: 2225:}
        -: 2226:
        -: 2227:template <class _Tp, class _Compare, class _Allocator>
        -: 2228:template <class... _Args>
        -: 2229:typename __tree<_Tp, _Compare, _Allocator>::iterator
        -: 2230:__tree<_Tp, _Compare, _Allocator>::__emplace_hint_unique_impl(const_iterator __p, _Args&&... __args)
        -: 2231:{
        -: 2232:    __node_holder __h = __construct_node(_VSTD::forward<_Args>(__args)...);
        -: 2233:    __parent_pointer __parent;
        -: 2234:    __node_base_pointer __dummy;
        -: 2235:    __node_base_pointer& __child = __find_equal(__p, __parent, __dummy, __h->__value_);
        -: 2236:    __node_pointer __r = static_cast<__node_pointer>(__child);
        -: 2237:    if (__child == nullptr)
        -: 2238:    {
        -: 2239:        __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__h.get()));
        -: 2240:        __r = __h.release();
        -: 2241:    }
        -: 2242:    return iterator(__r);
        -: 2243:}
        -: 2244:
        -: 2245:template <class _Tp, class _Compare, class _Allocator>
        -: 2246:template <class... _Args>
        -: 2247:typename __tree<_Tp, _Compare, _Allocator>::iterator
        -: 2248:__tree<_Tp, _Compare, _Allocator>::__emplace_multi(_Args&&... __args)
        -: 2249:{
        -: 2250:    __node_holder __h = __construct_node(_VSTD::forward<_Args>(__args)...);
        -: 2251:    __parent_pointer __parent;
        -: 2252:    __node_base_pointer& __child = __find_leaf_high(__parent, _NodeTypes::__get_key(__h->__value_));
        -: 2253:    __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__h.get()));
        -: 2254:    return iterator(static_cast<__node_pointer>(__h.release()));
        -: 2255:}
        -: 2256:
        -: 2257:template <class _Tp, class _Compare, class _Allocator>
        -: 2258:template <class... _Args>
        -: 2259:typename __tree<_Tp, _Compare, _Allocator>::iterator
        -: 2260:__tree<_Tp, _Compare, _Allocator>::__emplace_hint_multi(const_iterator __p,
        -: 2261:                                                        _Args&&... __args)
        -: 2262:{
        -: 2263:    __node_holder __h = __construct_node(_VSTD::forward<_Args>(__args)...);
        -: 2264:    __parent_pointer __parent;
        -: 2265:    __node_base_pointer& __child = __find_leaf(__p, __parent, _NodeTypes::__get_key(__h->__value_));
        -: 2266:    __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__h.get()));
        -: 2267:    return iterator(static_cast<__node_pointer>(__h.release()));
        -: 2268:}
        -: 2269:
        -: 2270:
        -: 2271:#else  // _LIBCPP_CXX03_LANG
        -: 2272:
        -: 2273:template <class _Tp, class _Compare, class _Allocator>
        -: 2274:typename __tree<_Tp, _Compare, _Allocator>::__node_holder
        -: 2275:__tree<_Tp, _Compare, _Allocator>::__construct_node(const __container_value_type& __v)
        -: 2276:{
        -: 2277:    __node_allocator& __na = __node_alloc();
        -: 2278:    __node_holder __h(__node_traits::allocate(__na, 1), _Dp(__na));
        -: 2279:    __node_traits::construct(__na, _NodeTypes::__get_ptr(__h->__value_), __v);
        -: 2280:    __h.get_deleter().__value_constructed = true;
        -: 2281:    return _LIBCPP_EXPLICIT_MOVE(__h);  // explicitly moved for C++03
        -: 2282:}
        -: 2283:
        -: 2284:#endif  // _LIBCPP_CXX03_LANG
        -: 2285:
        -: 2286:#ifdef _LIBCPP_CXX03_LANG
        -: 2287:template <class _Tp, class _Compare, class _Allocator>
        -: 2288:typename __tree<_Tp, _Compare, _Allocator>::iterator
        -: 2289:__tree<_Tp, _Compare, _Allocator>::__insert_multi(const __container_value_type& __v)
        -: 2290:{
        -: 2291:    __parent_pointer __parent;
        -: 2292:    __node_base_pointer& __child = __find_leaf_high(__parent, _NodeTypes::__get_key(__v));
        -: 2293:    __node_holder __h = __construct_node(__v);
        -: 2294:    __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__h.get()));
        -: 2295:    return iterator(__h.release());
        -: 2296:}
        -: 2297:
        -: 2298:template <class _Tp, class _Compare, class _Allocator>
        -: 2299:typename __tree<_Tp, _Compare, _Allocator>::iterator
        -: 2300:__tree<_Tp, _Compare, _Allocator>::__insert_multi(const_iterator __p, const __container_value_type& __v)
        -: 2301:{
        -: 2302:    __parent_pointer __parent;
        -: 2303:    __node_base_pointer& __child = __find_leaf(__p, __parent, _NodeTypes::__get_key(__v));
        -: 2304:    __node_holder __h = __construct_node(__v);
        -: 2305:    __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__h.get()));
        -: 2306:    return iterator(__h.release());
        -: 2307:}
        -: 2308:#endif
        -: 2309:
        -: 2310:template <class _Tp, class _Compare, class _Allocator>
        -: 2311:pair<typename __tree<_Tp, _Compare, _Allocator>::iterator, bool>
        -: 2312:__tree<_Tp, _Compare, _Allocator>::__node_insert_unique(__node_pointer __nd)
        -: 2313:{
        -: 2314:    __parent_pointer __parent;
        -: 2315:    __node_base_pointer& __child = __find_equal(__parent, __nd->__value_);
        -: 2316:    __node_pointer __r = static_cast<__node_pointer>(__child);
        -: 2317:    bool __inserted = false;
        -: 2318:    if (__child == nullptr)
        -: 2319:    {
        -: 2320:        __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__nd));
        -: 2321:        __r = __nd;
        -: 2322:        __inserted = true;
        -: 2323:    }
        -: 2324:    return pair<iterator, bool>(iterator(__r), __inserted);
        -: 2325:}
        -: 2326:
        -: 2327:template <class _Tp, class _Compare, class _Allocator>
        -: 2328:typename __tree<_Tp, _Compare, _Allocator>::iterator
        -: 2329:__tree<_Tp, _Compare, _Allocator>::__node_insert_unique(const_iterator __p,
        -: 2330:                                                        __node_pointer __nd)
        -: 2331:{
        -: 2332:    __parent_pointer __parent;
        -: 2333:    __node_base_pointer __dummy;
        -: 2334:    __node_base_pointer& __child = __find_equal(__p, __parent, __nd->__value_);
        -: 2335:    __node_pointer __r = static_cast<__node_pointer>(__child);
        -: 2336:    if (__child == nullptr)
        -: 2337:    {
        -: 2338:        __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__nd));
        -: 2339:        __r = __nd;
        -: 2340:    }
        -: 2341:    return iterator(__r);
        -: 2342:}
        -: 2343:
        -: 2344:template <class _Tp, class _Compare, class _Allocator>
        -: 2345:typename __tree<_Tp, _Compare, _Allocator>::iterator
        -: 2346:__tree<_Tp, _Compare, _Allocator>::__node_insert_multi(__node_pointer __nd)
        -: 2347:{
        -: 2348:    __parent_pointer __parent;
        -: 2349:    __node_base_pointer& __child = __find_leaf_high(__parent, _NodeTypes::__get_key(__nd->__value_));
        -: 2350:    __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__nd));
        -: 2351:    return iterator(__nd);
        -: 2352:}
        -: 2353:
        -: 2354:template <class _Tp, class _Compare, class _Allocator>
        -: 2355:typename __tree<_Tp, _Compare, _Allocator>::iterator
        -: 2356:__tree<_Tp, _Compare, _Allocator>::__node_insert_multi(const_iterator __p,
        -: 2357:                                                       __node_pointer __nd)
        -: 2358:{
        -: 2359:    __parent_pointer __parent;
        -: 2360:    __node_base_pointer& __child = __find_leaf(__p, __parent, _NodeTypes::__get_key(__nd->__value_));
        -: 2361:    __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__nd));
        -: 2362:    return iterator(__nd);
        -: 2363:}
        -: 2364:
        -: 2365:template <class _Tp, class _Compare, class _Allocator>
        -: 2366:typename __tree<_Tp, _Compare, _Allocator>::iterator
        -: 2367:__tree<_Tp, _Compare, _Allocator>::__remove_node_pointer(__node_pointer __ptr)
        -: 2368:{
        -: 2369:    iterator __r(__ptr);
        -: 2370:    ++__r;
        -: 2371:    if (__begin_node() == __ptr)
        -: 2372:        __begin_node() = __r.__ptr_;
        -: 2373:    --size();
        -: 2374:    __tree_remove(__end_node()->__left_,
        -: 2375:                  static_cast<__node_base_pointer>(__ptr));
        -: 2376:    return __r;
        -: 2377:}
        -: 2378:
        -: 2379:#if _LIBCPP_STD_VER > 14
        -: 2380:template <class _Tp, class _Compare, class _Allocator>
        -: 2381:template <class _NodeHandle, class _InsertReturnType>
        -: 2382:_LIBCPP_INLINE_VISIBILITY
        -: 2383:_InsertReturnType
        -: 2384:__tree<_Tp, _Compare, _Allocator>::__node_handle_insert_unique(
        -: 2385:    _NodeHandle&& __nh)
        -: 2386:{
        -: 2387:    if (__nh.empty())
        -: 2388:        return _InsertReturnType{end(), false, _NodeHandle()};
        -: 2389:
        -: 2390:    __node_pointer __ptr = __nh.__ptr_;
        -: 2391:    __parent_pointer __parent;
        -: 2392:    __node_base_pointer& __child = __find_equal(__parent,
        -: 2393:                                                __ptr->__value_);
        -: 2394:    if (__child != nullptr)
        -: 2395:        return _InsertReturnType{
        -: 2396:            iterator(static_cast<__node_pointer>(__child)),
        -: 2397:            false, _VSTD::move(__nh)};
        -: 2398:
        -: 2399:    __insert_node_at(__parent, __child,
        -: 2400:                     static_cast<__node_base_pointer>(__ptr));
        -: 2401:    __nh.__release();
        -: 2402:    return _InsertReturnType{iterator(__ptr), true, _NodeHandle()};
        -: 2403:}
        -: 2404:
        -: 2405:template <class _Tp, class _Compare, class _Allocator>
        -: 2406:template <class _NodeHandle>
        -: 2407:_LIBCPP_INLINE_VISIBILITY
        -: 2408:typename __tree<_Tp, _Compare, _Allocator>::iterator
        -: 2409:__tree<_Tp, _Compare, _Allocator>::__node_handle_insert_unique(
        -: 2410:    const_iterator __hint, _NodeHandle&& __nh)
        -: 2411:{
        -: 2412:    if (__nh.empty())
        -: 2413:        return end();
        -: 2414:
        -: 2415:    __node_pointer __ptr = __nh.__ptr_;
        -: 2416:    __parent_pointer __parent;
        -: 2417:    __node_base_pointer __dummy;
        -: 2418:    __node_base_pointer& __child = __find_equal(__hint, __parent, __dummy,
        -: 2419:                                                __ptr->__value_);
        -: 2420:    __node_pointer __r = static_cast<__node_pointer>(__child);
        -: 2421:    if (__child == nullptr)
        -: 2422:    {
        -: 2423:        __insert_node_at(__parent, __child,
        -: 2424:                         static_cast<__node_base_pointer>(__ptr));
        -: 2425:        __r = __ptr;
        -: 2426:        __nh.__release();
        -: 2427:    }
        -: 2428:    return iterator(__r);
        -: 2429:}
        -: 2430:
        -: 2431:template <class _Tp, class _Compare, class _Allocator>
        -: 2432:template <class _NodeHandle>
        -: 2433:_LIBCPP_INLINE_VISIBILITY
        -: 2434:_NodeHandle
        -: 2435:__tree<_Tp, _Compare, _Allocator>::__node_handle_extract(key_type const& __key)
        -: 2436:{
        -: 2437:    iterator __it = find(__key);
        -: 2438:    if (__it == end())
        -: 2439:        return _NodeHandle();
        -: 2440:    return __node_handle_extract<_NodeHandle>(__it);
        -: 2441:}
        -: 2442:
        -: 2443:template <class _Tp, class _Compare, class _Allocator>
        -: 2444:template <class _NodeHandle>
        -: 2445:_LIBCPP_INLINE_VISIBILITY
        -: 2446:_NodeHandle
        -: 2447:__tree<_Tp, _Compare, _Allocator>::__node_handle_extract(const_iterator __p)
        -: 2448:{
        -: 2449:    __node_pointer __np = __p.__get_np();
        -: 2450:    __remove_node_pointer(__np);
        -: 2451:    return _NodeHandle(__np, __alloc());
        -: 2452:}
        -: 2453:
        -: 2454:template <class _Tp, class _Compare, class _Allocator>
        -: 2455:template <class _NodeHandle>
        -: 2456:_LIBCPP_INLINE_VISIBILITY
        -: 2457:typename __tree<_Tp, _Compare, _Allocator>::iterator
        -: 2458:__tree<_Tp, _Compare, _Allocator>::__node_handle_insert_multi(_NodeHandle&& __nh)
        -: 2459:{
        -: 2460:    if (__nh.empty())
        -: 2461:        return end();
        -: 2462:    __node_pointer __ptr = __nh.__ptr_;
        -: 2463:    __parent_pointer __parent;
        -: 2464:    __node_base_pointer& __child = __find_leaf_high(
        -: 2465:        __parent, _NodeTypes::__get_key(__ptr->__value_));
        -: 2466:    __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__ptr));
        -: 2467:    __nh.__release();
        -: 2468:    return iterator(__ptr);
        -: 2469:}
        -: 2470:
        -: 2471:template <class _Tp, class _Compare, class _Allocator>
        -: 2472:template <class _NodeHandle>
        -: 2473:_LIBCPP_INLINE_VISIBILITY
        -: 2474:typename __tree<_Tp, _Compare, _Allocator>::iterator
        -: 2475:__tree<_Tp, _Compare, _Allocator>::__node_handle_insert_multi(
        -: 2476:    const_iterator __hint, _NodeHandle&& __nh)
        -: 2477:{
        -: 2478:    if (__nh.empty())
        -: 2479:        return end();
        -: 2480:
        -: 2481:    __node_pointer __ptr = __nh.__ptr_;
        -: 2482:    __parent_pointer __parent;
        -: 2483:    __node_base_pointer& __child = __find_leaf(__hint, __parent,
        -: 2484:                                               _NodeTypes::__get_key(__ptr->__value_));
        -: 2485:    __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__ptr));
        -: 2486:    __nh.__release();
        -: 2487:    return iterator(__ptr);
        -: 2488:}
        -: 2489:
        -: 2490:#endif  // _LIBCPP_STD_VER > 14
        -: 2491:
        -: 2492:template <class _Tp, class _Compare, class _Allocator>
        -: 2493:typename __tree<_Tp, _Compare, _Allocator>::iterator
        -: 2494:__tree<_Tp, _Compare, _Allocator>::erase(const_iterator __p)
        -: 2495:{
        -: 2496:    __node_pointer __np = __p.__get_np();
        -: 2497:    iterator __r = __remove_node_pointer(__np);
        -: 2498:    __node_allocator& __na = __node_alloc();
        -: 2499:    __node_traits::destroy(__na, _NodeTypes::__get_ptr(
        -: 2500:        const_cast<__node_value_type&>(*__p)));
        -: 2501:    __node_traits::deallocate(__na, __np, 1);
        -: 2502:    return __r;
        -: 2503:}
        -: 2504:
        -: 2505:template <class _Tp, class _Compare, class _Allocator>
        -: 2506:typename __tree<_Tp, _Compare, _Allocator>::iterator
        -: 2507:__tree<_Tp, _Compare, _Allocator>::erase(const_iterator __f, const_iterator __l)
        -: 2508:{
        -: 2509:    while (__f != __l)
        -: 2510:        __f = erase(__f);
        -: 2511:    return iterator(__l.__ptr_);
        -: 2512:}
        -: 2513:
        -: 2514:template <class _Tp, class _Compare, class _Allocator>
        -: 2515:template <class _Key>
        -: 2516:typename __tree<_Tp, _Compare, _Allocator>::size_type
        -: 2517:__tree<_Tp, _Compare, _Allocator>::__erase_unique(const _Key& __k)
        -: 2518:{
        -: 2519:    iterator __i = find(__k);
        -: 2520:    if (__i == end())
        -: 2521:        return 0;
        -: 2522:    erase(__i);
        -: 2523:    return 1;
        -: 2524:}
        -: 2525:
        -: 2526:template <class _Tp, class _Compare, class _Allocator>
        -: 2527:template <class _Key>
        -: 2528:typename __tree<_Tp, _Compare, _Allocator>::size_type
        -: 2529:__tree<_Tp, _Compare, _Allocator>::__erase_multi(const _Key& __k)
        -: 2530:{
        -: 2531:    pair<iterator, iterator> __p = __equal_range_multi(__k);
        -: 2532:    size_type __r = 0;
        -: 2533:    for (; __p.first != __p.second; ++__r)
        -: 2534:        __p.first = erase(__p.first);
        -: 2535:    return __r;
        -: 2536:}
        -: 2537:
        -: 2538:template <class _Tp, class _Compare, class _Allocator>
        -: 2539:template <class _Key>
        -: 2540:typename __tree<_Tp, _Compare, _Allocator>::iterator
        -: 2541:__tree<_Tp, _Compare, _Allocator>::find(const _Key& __v)
        -: 2542:{
    #####: 2543:    iterator __p = __lower_bound(__v, __root(), __end_node());
    #####: 2544:    if (__p != end() && !value_comp()(__v, *__p))
    #####: 2545:        return __p;
    #####: 2546:    return end();
    #####: 2547:}
        -: 2548:
        -: 2549:template <class _Tp, class _Compare, class _Allocator>
        -: 2550:template <class _Key>
        -: 2551:typename __tree<_Tp, _Compare, _Allocator>::const_iterator
        -: 2552:__tree<_Tp, _Compare, _Allocator>::find(const _Key& __v) const
        -: 2553:{
    #####: 2554:    const_iterator __p = __lower_bound(__v, __root(), __end_node());
    #####: 2555:    if (__p != end() && !value_comp()(__v, *__p))
    #####: 2556:        return __p;
    #####: 2557:    return end();
    #####: 2558:}
        -: 2559:
        -: 2560:template <class _Tp, class _Compare, class _Allocator>
        -: 2561:template <class _Key>
        -: 2562:typename __tree<_Tp, _Compare, _Allocator>::size_type
        -: 2563:__tree<_Tp, _Compare, _Allocator>::__count_unique(const _Key& __k) const
        -: 2564:{
    #####: 2565:    __node_pointer __rt = __root();
    #####: 2566:    while (__rt != nullptr)
        -: 2567:    {
    #####: 2568:        if (value_comp()(__k, __rt->__value_))
        -: 2569:        {
    #####: 2570:            __rt = static_cast<__node_pointer>(__rt->__left_);
    #####: 2571:        }
    #####: 2572:        else if (value_comp()(__rt->__value_, __k))
    #####: 2573:            __rt = static_cast<__node_pointer>(__rt->__right_);
        -: 2574:        else
    #####: 2575:            return 1;
        -: 2576:    }
    #####: 2577:    return 0;
    #####: 2578:}
        -: 2579:
        -: 2580:template <class _Tp, class _Compare, class _Allocator>
        -: 2581:template <class _Key>
        -: 2582:typename __tree<_Tp, _Compare, _Allocator>::size_type
        -: 2583:__tree<_Tp, _Compare, _Allocator>::__count_multi(const _Key& __k) const
        -: 2584:{
        -: 2585:    __iter_pointer __result = __end_node();
        -: 2586:    __node_pointer __rt = __root();
        -: 2587:    while (__rt != nullptr)
        -: 2588:    {
        -: 2589:        if (value_comp()(__k, __rt->__value_))
        -: 2590:        {
        -: 2591:            __result = static_cast<__iter_pointer>(__rt);
        -: 2592:            __rt = static_cast<__node_pointer>(__rt->__left_);
        -: 2593:        }
        -: 2594:        else if (value_comp()(__rt->__value_, __k))
        -: 2595:            __rt = static_cast<__node_pointer>(__rt->__right_);
        -: 2596:        else
        -: 2597:            return _VSTD::distance(
        -: 2598:                __lower_bound(__k, static_cast<__node_pointer>(__rt->__left_), static_cast<__iter_pointer>(__rt)),
        -: 2599:                __upper_bound(__k, static_cast<__node_pointer>(__rt->__right_), __result)
        -: 2600:            );
        -: 2601:    }
        -: 2602:    return 0;
        -: 2603:}
        -: 2604:
        -: 2605:template <class _Tp, class _Compare, class _Allocator>
        -: 2606:template <class _Key>
        -: 2607:typename __tree<_Tp, _Compare, _Allocator>::iterator
        -: 2608:__tree<_Tp, _Compare, _Allocator>::__lower_bound(const _Key& __v,
        -: 2609:                                                 __node_pointer __root,
        -: 2610:                                                 __iter_pointer __result)
        -: 2611:{
    #####: 2612:    while (__root != nullptr)
        -: 2613:    {
    #####: 2614:        if (!value_comp()(__root->__value_, __v))
        -: 2615:        {
    #####: 2616:            __result = static_cast<__iter_pointer>(__root);
    #####: 2617:            __root = static_cast<__node_pointer>(__root->__left_);
    #####: 2618:        }
        -: 2619:        else
    #####: 2620:            __root = static_cast<__node_pointer>(__root->__right_);
        -: 2621:    }
    #####: 2622:    return iterator(__result);
        -: 2623:}
        -: 2624:
        -: 2625:template <class _Tp, class _Compare, class _Allocator>
        -: 2626:template <class _Key>
        -: 2627:typename __tree<_Tp, _Compare, _Allocator>::const_iterator
        -: 2628:__tree<_Tp, _Compare, _Allocator>::__lower_bound(const _Key& __v,
        -: 2629:                                                 __node_pointer __root,
        -: 2630:                                                 __iter_pointer __result) const
        -: 2631:{
    #####: 2632:    while (__root != nullptr)
        -: 2633:    {
    #####: 2634:        if (!value_comp()(__root->__value_, __v))
        -: 2635:        {
    #####: 2636:            __result = static_cast<__iter_pointer>(__root);
    #####: 2637:            __root = static_cast<__node_pointer>(__root->__left_);
    #####: 2638:        }
        -: 2639:        else
    #####: 2640:            __root = static_cast<__node_pointer>(__root->__right_);
        -: 2641:    }
    #####: 2642:    return const_iterator(__result);
        -: 2643:}
        -: 2644:
        -: 2645:template <class _Tp, class _Compare, class _Allocator>
        -: 2646:template <class _Key>
        -: 2647:typename __tree<_Tp, _Compare, _Allocator>::iterator
        -: 2648:__tree<_Tp, _Compare, _Allocator>::__upper_bound(const _Key& __v,
        -: 2649:                                                 __node_pointer __root,
        -: 2650:                                                 __iter_pointer __result)
        -: 2651:{
        -: 2652:    while (__root != nullptr)
        -: 2653:    {
        -: 2654:        if (value_comp()(__v, __root->__value_))
        -: 2655:        {
        -: 2656:            __result = static_cast<__iter_pointer>(__root);
        -: 2657:            __root = static_cast<__node_pointer>(__root->__left_);
        -: 2658:        }
        -: 2659:        else
        -: 2660:            __root = static_cast<__node_pointer>(__root->__right_);
        -: 2661:    }
        -: 2662:    return iterator(__result);
        -: 2663:}
        -: 2664:
        -: 2665:template <class _Tp, class _Compare, class _Allocator>
        -: 2666:template <class _Key>
        -: 2667:typename __tree<_Tp, _Compare, _Allocator>::const_iterator
        -: 2668:__tree<_Tp, _Compare, _Allocator>::__upper_bound(const _Key& __v,
        -: 2669:                                                 __node_pointer __root,
        -: 2670:                                                 __iter_pointer __result) const
        -: 2671:{
        -: 2672:    while (__root != nullptr)
        -: 2673:    {
        -: 2674:        if (value_comp()(__v, __root->__value_))
        -: 2675:        {
        -: 2676:            __result = static_cast<__iter_pointer>(__root);
        -: 2677:            __root = static_cast<__node_pointer>(__root->__left_);
        -: 2678:        }
        -: 2679:        else
        -: 2680:            __root = static_cast<__node_pointer>(__root->__right_);
        -: 2681:    }
        -: 2682:    return const_iterator(__result);
        -: 2683:}
        -: 2684:
        -: 2685:template <class _Tp, class _Compare, class _Allocator>
        -: 2686:template <class _Key>
        -: 2687:pair<typename __tree<_Tp, _Compare, _Allocator>::iterator,
        -: 2688:     typename __tree<_Tp, _Compare, _Allocator>::iterator>
        -: 2689:__tree<_Tp, _Compare, _Allocator>::__equal_range_unique(const _Key& __k)
        -: 2690:{
        -: 2691:    typedef pair<iterator, iterator> _Pp;
        -: 2692:    __iter_pointer __result = __end_node();
        -: 2693:    __node_pointer __rt = __root();
        -: 2694:    while (__rt != nullptr)
        -: 2695:    {
        -: 2696:        if (value_comp()(__k, __rt->__value_))
        -: 2697:        {
        -: 2698:            __result = static_cast<__iter_pointer>(__rt);
        -: 2699:            __rt = static_cast<__node_pointer>(__rt->__left_);
        -: 2700:        }
        -: 2701:        else if (value_comp()(__rt->__value_, __k))
        -: 2702:            __rt = static_cast<__node_pointer>(__rt->__right_);
        -: 2703:        else
        -: 2704:            return _Pp(iterator(__rt),
        -: 2705:                      iterator(
        -: 2706:                          __rt->__right_ != nullptr ?
        -: 2707:                              static_cast<__iter_pointer>(__tree_min(__rt->__right_))
        -: 2708:                            : __result));
        -: 2709:    }
        -: 2710:    return _Pp(iterator(__result), iterator(__result));
        -: 2711:}
        -: 2712:
        -: 2713:template <class _Tp, class _Compare, class _Allocator>
        -: 2714:template <class _Key>
        -: 2715:pair<typename __tree<_Tp, _Compare, _Allocator>::const_iterator,
        -: 2716:     typename __tree<_Tp, _Compare, _Allocator>::const_iterator>
        -: 2717:__tree<_Tp, _Compare, _Allocator>::__equal_range_unique(const _Key& __k) const
        -: 2718:{
        -: 2719:    typedef pair<const_iterator, const_iterator> _Pp;
        -: 2720:    __iter_pointer __result = __end_node();
        -: 2721:    __node_pointer __rt = __root();
        -: 2722:    while (__rt != nullptr)
        -: 2723:    {
        -: 2724:        if (value_comp()(__k, __rt->__value_))
        -: 2725:        {
        -: 2726:            __result = static_cast<__iter_pointer>(__rt);
        -: 2727:            __rt = static_cast<__node_pointer>(__rt->__left_);
        -: 2728:        }
        -: 2729:        else if (value_comp()(__rt->__value_, __k))
        -: 2730:            __rt = static_cast<__node_pointer>(__rt->__right_);
        -: 2731:        else
        -: 2732:            return _Pp(const_iterator(__rt),
        -: 2733:                      const_iterator(
        -: 2734:                          __rt->__right_ != nullptr ?
        -: 2735:                              static_cast<__iter_pointer>(__tree_min(__rt->__right_))
        -: 2736:                            : __result));
        -: 2737:    }
        -: 2738:    return _Pp(const_iterator(__result), const_iterator(__result));
        -: 2739:}
        -: 2740:
        -: 2741:template <class _Tp, class _Compare, class _Allocator>
        -: 2742:template <class _Key>
        -: 2743:pair<typename __tree<_Tp, _Compare, _Allocator>::iterator,
        -: 2744:     typename __tree<_Tp, _Compare, _Allocator>::iterator>
        -: 2745:__tree<_Tp, _Compare, _Allocator>::__equal_range_multi(const _Key& __k)
        -: 2746:{
        -: 2747:    typedef pair<iterator, iterator> _Pp;
        -: 2748:    __iter_pointer __result = __end_node();
        -: 2749:    __node_pointer __rt = __root();
        -: 2750:    while (__rt != nullptr)
        -: 2751:    {
        -: 2752:        if (value_comp()(__k, __rt->__value_))
        -: 2753:        {
        -: 2754:            __result = static_cast<__iter_pointer>(__rt);
        -: 2755:            __rt = static_cast<__node_pointer>(__rt->__left_);
        -: 2756:        }
        -: 2757:        else if (value_comp()(__rt->__value_, __k))
        -: 2758:            __rt = static_cast<__node_pointer>(__rt->__right_);
        -: 2759:        else
        -: 2760:            return _Pp(__lower_bound(__k, static_cast<__node_pointer>(__rt->__left_), static_cast<__iter_pointer>(__rt)),
        -: 2761:                      __upper_bound(__k, static_cast<__node_pointer>(__rt->__right_), __result));
        -: 2762:    }
        -: 2763:    return _Pp(iterator(__result), iterator(__result));
        -: 2764:}
        -: 2765:
        -: 2766:template <class _Tp, class _Compare, class _Allocator>
        -: 2767:template <class _Key>
        -: 2768:pair<typename __tree<_Tp, _Compare, _Allocator>::const_iterator,
        -: 2769:     typename __tree<_Tp, _Compare, _Allocator>::const_iterator>
        -: 2770:__tree<_Tp, _Compare, _Allocator>::__equal_range_multi(const _Key& __k) const
        -: 2771:{
        -: 2772:    typedef pair<const_iterator, const_iterator> _Pp;
        -: 2773:    __iter_pointer __result = __end_node();
        -: 2774:    __node_pointer __rt = __root();
        -: 2775:    while (__rt != nullptr)
        -: 2776:    {
        -: 2777:        if (value_comp()(__k, __rt->__value_))
        -: 2778:        {
        -: 2779:            __result = static_cast<__iter_pointer>(__rt);
        -: 2780:            __rt = static_cast<__node_pointer>(__rt->__left_);
        -: 2781:        }
        -: 2782:        else if (value_comp()(__rt->__value_, __k))
        -: 2783:            __rt = static_cast<__node_pointer>(__rt->__right_);
        -: 2784:        else
        -: 2785:            return _Pp(__lower_bound(__k, static_cast<__node_pointer>(__rt->__left_), static_cast<__iter_pointer>(__rt)),
        -: 2786:                      __upper_bound(__k, static_cast<__node_pointer>(__rt->__right_), __result));
        -: 2787:    }
        -: 2788:    return _Pp(const_iterator(__result), const_iterator(__result));
        -: 2789:}
        -: 2790:
        -: 2791:template <class _Tp, class _Compare, class _Allocator>
        -: 2792:typename __tree<_Tp, _Compare, _Allocator>::__node_holder
        -: 2793:__tree<_Tp, _Compare, _Allocator>::remove(const_iterator __p) _NOEXCEPT
        -: 2794:{
        -: 2795:    __node_pointer __np = __p.__get_np();
        -: 2796:    if (__begin_node() == __p.__ptr_)
        -: 2797:    {
        -: 2798:        if (__np->__right_ != nullptr)
        -: 2799:            __begin_node() = static_cast<__iter_pointer>(__np->__right_);
        -: 2800:        else
        -: 2801:            __begin_node() = static_cast<__iter_pointer>(__np->__parent_);
        -: 2802:    }
        -: 2803:    --size();
        -: 2804:    __tree_remove(__end_node()->__left_,
        -: 2805:                  static_cast<__node_base_pointer>(__np));
        -: 2806:    return __node_holder(__np, _Dp(__node_alloc(), true));
        -: 2807:}
        -: 2808:
        -: 2809:template <class _Tp, class _Compare, class _Allocator>
        -: 2810:inline _LIBCPP_INLINE_VISIBILITY
        -: 2811:void
        -: 2812:swap(__tree<_Tp, _Compare, _Allocator>& __x,
        -: 2813:     __tree<_Tp, _Compare, _Allocator>& __y)
        -: 2814:    _NOEXCEPT_(_NOEXCEPT_(__x.swap(__y)))
        -: 2815:{
        -: 2816:    __x.swap(__y);
        -: 2817:}
        -: 2818:
        -: 2819:_LIBCPP_END_NAMESPACE_STD
        -: 2820:
        -: 2821:_LIBCPP_POP_MACROS
        -: 2822:
        -: 2823:#endif  // _LIBCPP___TREE
