        -:    0:Source:/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory
        -:    0:Graph:../020-TestCase.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:// -*- C++ -*-
        -:    2://===-------------------------- memory ------------------------------------===//
        -:    3://
        -:    4://                     The LLVM Compiler Infrastructure
        -:    5://
        -:    6:// This file is dual licensed under the MIT and the University of Illinois Open
        -:    7:// Source Licenses. See LICENSE.TXT for details.
        -:    8://
        -:    9://===----------------------------------------------------------------------===//
        -:   10:
        -:   11:#ifndef _LIBCPP_MEMORY
        -:   12:#define _LIBCPP_MEMORY
        -:   13:
        -:   14:/*
        -:   15:    memory synopsis
        -:   16:
        -:   17:namespace std
        -:   18:{
        -:   19:
        -:   20:struct allocator_arg_t { };
        -:   21:inline constexpr allocator_arg_t allocator_arg = allocator_arg_t();
        -:   22:
        -:   23:template <class T, class Alloc> struct uses_allocator;
        -:   24:
        -:   25:template <class Ptr>
        -:   26:struct pointer_traits
        -:   27:{
        -:   28:    typedef Ptr pointer;
        -:   29:    typedef <details> element_type;
        -:   30:    typedef <details> difference_type;
        -:   31:
        -:   32:    template <class U> using rebind = <details>;
        -:   33:
        -:   34:    static pointer pointer_to(<details>);
        -:   35:};
        -:   36:
        -:   37:template <class T>
        -:   38:struct pointer_traits<T*>
        -:   39:{
        -:   40:    typedef T* pointer;
        -:   41:    typedef T element_type;
        -:   42:    typedef ptrdiff_t difference_type;
        -:   43:
        -:   44:    template <class U> using rebind = U*;
        -:   45:
        -:   46:    static pointer pointer_to(<details>) noexcept;
        -:   47:};
        -:   48:
        -:   49:template <class T> constexpr T* to_address(T* p) noexcept; // C++20
        -:   50:template <class Ptr> auto to_address(const Ptr& p) noexcept; // C++20
        -:   51:
        -:   52:template <class Alloc>
        -:   53:struct allocator_traits
        -:   54:{
        -:   55:    typedef Alloc                        allocator_type;
        -:   56:    typedef typename allocator_type::value_type
        -:   57:                                         value_type;
        -:   58:
        -:   59:    typedef Alloc::pointer | value_type* pointer;
        -:   60:    typedef Alloc::const_pointer
        -:   61:          | pointer_traits<pointer>::rebind<const value_type>
        -:   62:                                         const_pointer;
        -:   63:    typedef Alloc::void_pointer
        -:   64:          | pointer_traits<pointer>::rebind<void>
        -:   65:                                         void_pointer;
        -:   66:    typedef Alloc::const_void_pointer
        -:   67:          | pointer_traits<pointer>::rebind<const void>
        -:   68:                                         const_void_pointer;
        -:   69:    typedef Alloc::difference_type
        -:   70:          | pointer_traits<pointer>::difference_type
        -:   71:                                         difference_type;
        -:   72:    typedef Alloc::size_type
        -:   73:          | make_unsigned<difference_type>::type
        -:   74:                                         size_type;
        -:   75:    typedef Alloc::propagate_on_container_copy_assignment
        -:   76:          | false_type                   propagate_on_container_copy_assignment;
        -:   77:    typedef Alloc::propagate_on_container_move_assignment
        -:   78:          | false_type                   propagate_on_container_move_assignment;
        -:   79:    typedef Alloc::propagate_on_container_swap
        -:   80:          | false_type                   propagate_on_container_swap;
        -:   81:    typedef Alloc::is_always_equal
        -:   82:          | is_empty                     is_always_equal;
        -:   83:
        -:   84:    template <class T> using rebind_alloc  = Alloc::rebind<U>::other | Alloc<T, Args...>;
        -:   85:    template <class T> using rebind_traits = allocator_traits<rebind_alloc<T>>;
        -:   86:
        -:   87:    static pointer allocate(allocator_type& a, size_type n);                          // [[nodiscard]] in C++20
        -:   88:    static pointer allocate(allocator_type& a, size_type n, const_void_pointer hint); // [[nodiscard]] in C++20
        -:   89:
        -:   90:    static void deallocate(allocator_type& a, pointer p, size_type n) noexcept;
        -:   91:
        -:   92:    template <class T, class... Args>
        -:   93:        static void construct(allocator_type& a, T* p, Args&&... args);
        -:   94:
        -:   95:    template <class T>
        -:   96:        static void destroy(allocator_type& a, T* p);
        -:   97:
        -:   98:    static size_type max_size(const allocator_type& a); // noexcept in C++14
        -:   99:
        -:  100:    static allocator_type
        -:  101:        select_on_container_copy_construction(const allocator_type& a);
        -:  102:};
        -:  103:
        -:  104:template <>
        -:  105:class allocator<void>
        -:  106:{
        -:  107:public:
        -:  108:    typedef void*                                 pointer;
        -:  109:    typedef const void*                           const_pointer;
        -:  110:    typedef void                                  value_type;
        -:  111:
        -:  112:    template <class _Up> struct rebind {typedef allocator<_Up> other;};
        -:  113:};
        -:  114:
        -:  115:template <class T>
        -:  116:class allocator
        -:  117:{
        -:  118:public:
        -:  119:    typedef size_t                                size_type;
        -:  120:    typedef ptrdiff_t                             difference_type;
        -:  121:    typedef T*                                    pointer;
        -:  122:    typedef const T*                              const_pointer;
        -:  123:    typedef typename add_lvalue_reference<T>::type       reference;
        -:  124:    typedef typename add_lvalue_reference<const T>::type const_reference;
        -:  125:    typedef T                                     value_type;
        -:  126:
        -:  127:    template <class U> struct rebind {typedef allocator<U> other;};
        -:  128:
        -:  129:    constexpr allocator() noexcept;                      // constexpr in C++20
        -:  130:    constexpr allocator(const allocator&) noexcept;      // constexpr in C++20
        -:  131:    template <class U>
        -:  132:      constexpr allocator(const allocator<U>&) noexcept; // constexpr in C++20
        -:  133:    ~allocator();
        -:  134:    pointer address(reference x) const noexcept;
        -:  135:    const_pointer address(const_reference x) const noexcept;
        -:  136:    pointer allocate(size_type, allocator<void>::const_pointer hint = 0);
        -:  137:    void deallocate(pointer p, size_type n) noexcept;
        -:  138:    size_type max_size() const noexcept;
        -:  139:    template<class U, class... Args>
        -:  140:        void construct(U* p, Args&&... args);
        -:  141:    template <class U>
        -:  142:        void destroy(U* p);
        -:  143:};
        -:  144:
        -:  145:template <class T, class U>
        -:  146:bool operator==(const allocator<T>&, const allocator<U>&) noexcept;
        -:  147:
        -:  148:template <class T, class U>
        -:  149:bool operator!=(const allocator<T>&, const allocator<U>&) noexcept;
        -:  150:
        -:  151:template <class OutputIterator, class T>
        -:  152:class raw_storage_iterator
        -:  153:    : public iterator<output_iterator_tag,
        -:  154:                      T,                               // purposefully not C++03
        -:  155:                      ptrdiff_t,                       // purposefully not C++03
        -:  156:                      T*,                              // purposefully not C++03
        -:  157:                      raw_storage_iterator&>           // purposefully not C++03
        -:  158:{
        -:  159:public:
        -:  160:    explicit raw_storage_iterator(OutputIterator x);
        -:  161:    raw_storage_iterator& operator*();
        -:  162:    raw_storage_iterator& operator=(const T& element);
        -:  163:    raw_storage_iterator& operator++();
        -:  164:    raw_storage_iterator  operator++(int);
        -:  165:};
        -:  166:
        -:  167:template <class T> pair<T*,ptrdiff_t> get_temporary_buffer(ptrdiff_t n) noexcept;
        -:  168:template <class T> void               return_temporary_buffer(T* p) noexcept;
        -:  169:
        -:  170:template <class T> T* addressof(T& r) noexcept;
        -:  171:template <class T> T* addressof(const T&& r) noexcept = delete;
        -:  172:
        -:  173:template <class InputIterator, class ForwardIterator>
        -:  174:ForwardIterator
        -:  175:uninitialized_copy(InputIterator first, InputIterator last, ForwardIterator result);
        -:  176:
        -:  177:template <class InputIterator, class Size, class ForwardIterator>
        -:  178:ForwardIterator
        -:  179:uninitialized_copy_n(InputIterator first, Size n, ForwardIterator result);
        -:  180:
        -:  181:template <class ForwardIterator, class T>
        -:  182:void uninitialized_fill(ForwardIterator first, ForwardIterator last, const T& x);
        -:  183:
        -:  184:template <class ForwardIterator, class Size, class T>
        -:  185:ForwardIterator
        -:  186:uninitialized_fill_n(ForwardIterator first, Size n, const T& x);
        -:  187:
        -:  188:template <class T>
        -:  189:void destroy_at(T* location);
        -:  190:
        -:  191:template <class ForwardIterator>
        -:  192: void destroy(ForwardIterator first, ForwardIterator last);
        -:  193:
        -:  194:template <class ForwardIterator, class Size>
        -:  195: ForwardIterator destroy_n(ForwardIterator first, Size n);
        -:  196:
        -:  197:template <class InputIterator, class ForwardIterator>
        -:  198: ForwardIterator uninitialized_move(InputIterator first, InputIterator last, ForwardIterator result);
        -:  199:
        -:  200:template <class InputIterator, class Size, class ForwardIterator>
        -:  201: pair<InputIterator,ForwardIterator> uninitialized_move_n(InputIterator first, Size n, ForwardIterator result);
        -:  202:
        -:  203:template <class ForwardIterator>
        -:  204: void uninitialized_value_construct(ForwardIterator first, ForwardIterator last);
        -:  205:
        -:  206:template <class ForwardIterator, class Size>
        -:  207: ForwardIterator uninitialized_value_construct_n(ForwardIterator first, Size n);
        -:  208:
        -:  209:template <class ForwardIterator>
        -:  210: void uninitialized_default_construct(ForwardIterator first, ForwardIterator last);
        -:  211:
        -:  212:template <class ForwardIterator, class Size>
        -:  213: ForwardIterator uninitialized_default_construct_n(ForwardIterator first, Size n);
        -:  214:
        -:  215:template <class Y> struct auto_ptr_ref {};      // removed in C++17
        -:  216:
        -:  217:template<class X>
        -:  218:class auto_ptr                                  // removed in C++17
        -:  219:{
        -:  220:public:
        -:  221:    typedef X element_type;
        -:  222:
        -:  223:    explicit auto_ptr(X* p =0) throw();
        -:  224:    auto_ptr(auto_ptr&) throw();
        -:  225:    template<class Y> auto_ptr(auto_ptr<Y>&) throw();
        -:  226:    auto_ptr& operator=(auto_ptr&) throw();
        -:  227:    template<class Y> auto_ptr& operator=(auto_ptr<Y>&) throw();
        -:  228:    auto_ptr& operator=(auto_ptr_ref<X> r) throw();
        -:  229:    ~auto_ptr() throw();
        -:  230:
        -:  231:    typename add_lvalue_reference<X>::type operator*() const throw();
        -:  232:    X* operator->() const throw();
        -:  233:    X* get() const throw();
        -:  234:    X* release() throw();
        -:  235:    void reset(X* p =0) throw();
        -:  236:
        -:  237:    auto_ptr(auto_ptr_ref<X>) throw();
        -:  238:    template<class Y> operator auto_ptr_ref<Y>() throw();
        -:  239:    template<class Y> operator auto_ptr<Y>() throw();
        -:  240:};
        -:  241:
        -:  242:template <class T>
        -:  243:struct default_delete
        -:  244:{
        -:  245:    constexpr default_delete() noexcept = default;
        -:  246:    template <class U> default_delete(const default_delete<U>&) noexcept;
        -:  247:
        -:  248:    void operator()(T*) const noexcept;
        -:  249:};
        -:  250:
        -:  251:template <class T>
        -:  252:struct default_delete<T[]>
        -:  253:{
        -:  254:    constexpr default_delete() noexcept = default;
        -:  255:    void operator()(T*) const noexcept;
        -:  256:    template <class U> void operator()(U*) const = delete;
        -:  257:};
        -:  258:
        -:  259:template <class T, class D = default_delete<T>>
        -:  260:class unique_ptr
        -:  261:{
        -:  262:public:
        -:  263:    typedef see below pointer;
        -:  264:    typedef T element_type;
        -:  265:    typedef D deleter_type;
        -:  266:
        -:  267:    // constructors
        -:  268:    constexpr unique_ptr() noexcept;
        -:  269:    explicit unique_ptr(pointer p) noexcept;
        -:  270:    unique_ptr(pointer p, see below d1) noexcept;
        -:  271:    unique_ptr(pointer p, see below d2) noexcept;
        -:  272:    unique_ptr(unique_ptr&& u) noexcept;
        -:  273:    unique_ptr(nullptr_t) noexcept : unique_ptr() { }
        -:  274:    template <class U, class E>
        -:  275:        unique_ptr(unique_ptr<U, E>&& u) noexcept;
        -:  276:    template <class U>
        -:  277:        unique_ptr(auto_ptr<U>&& u) noexcept;       // removed in C++17
        -:  278:
        -:  279:    // destructor
        -:  280:    ~unique_ptr();
        -:  281:
        -:  282:    // assignment
        -:  283:    unique_ptr& operator=(unique_ptr&& u) noexcept;
        -:  284:    template <class U, class E> unique_ptr& operator=(unique_ptr<U, E>&& u) noexcept;
        -:  285:    unique_ptr& operator=(nullptr_t) noexcept;
        -:  286:
        -:  287:    // observers
        -:  288:    typename add_lvalue_reference<T>::type operator*() const;
        -:  289:    pointer operator->() const noexcept;
        -:  290:    pointer get() const noexcept;
        -:  291:    deleter_type& get_deleter() noexcept;
        -:  292:    const deleter_type& get_deleter() const noexcept;
        -:  293:    explicit operator bool() const noexcept;
        -:  294:
        -:  295:    // modifiers
        -:  296:    pointer release() noexcept;
        -:  297:    void reset(pointer p = pointer()) noexcept;
        -:  298:    void swap(unique_ptr& u) noexcept;
        -:  299:};
        -:  300:
        -:  301:template <class T, class D>
        -:  302:class unique_ptr<T[], D>
        -:  303:{
        -:  304:public:
        -:  305:    typedef implementation-defined pointer;
        -:  306:    typedef T element_type;
        -:  307:    typedef D deleter_type;
        -:  308:
        -:  309:    // constructors
        -:  310:    constexpr unique_ptr() noexcept;
        -:  311:    explicit unique_ptr(pointer p) noexcept;
        -:  312:    unique_ptr(pointer p, see below d) noexcept;
        -:  313:    unique_ptr(pointer p, see below d) noexcept;
        -:  314:    unique_ptr(unique_ptr&& u) noexcept;
        -:  315:    unique_ptr(nullptr_t) noexcept : unique_ptr() { }
        -:  316:
        -:  317:    // destructor
        -:  318:    ~unique_ptr();
        -:  319:
        -:  320:    // assignment
        -:  321:    unique_ptr& operator=(unique_ptr&& u) noexcept;
        -:  322:    unique_ptr& operator=(nullptr_t) noexcept;
        -:  323:
        -:  324:    // observers
        -:  325:    T& operator[](size_t i) const;
        -:  326:    pointer get() const noexcept;
        -:  327:    deleter_type& get_deleter() noexcept;
        -:  328:    const deleter_type& get_deleter() const noexcept;
        -:  329:    explicit operator bool() const noexcept;
        -:  330:
        -:  331:    // modifiers
        -:  332:    pointer release() noexcept;
        -:  333:    void reset(pointer p = pointer()) noexcept;
        -:  334:    void reset(nullptr_t) noexcept;
        -:  335:    template <class U> void reset(U) = delete;
        -:  336:    void swap(unique_ptr& u) noexcept;
        -:  337:};
        -:  338:
        -:  339:template <class T, class D>
        -:  340:    void swap(unique_ptr<T, D>& x, unique_ptr<T, D>& y) noexcept;
        -:  341:
        -:  342:template <class T1, class D1, class T2, class D2>
        -:  343:    bool operator==(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  344:template <class T1, class D1, class T2, class D2>
        -:  345:    bool operator!=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  346:template <class T1, class D1, class T2, class D2>
        -:  347:    bool operator<(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  348:template <class T1, class D1, class T2, class D2>
        -:  349:    bool operator<=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  350:template <class T1, class D1, class T2, class D2>
        -:  351:    bool operator>(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  352:template <class T1, class D1, class T2, class D2>
        -:  353:    bool operator>=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  354:
        -:  355:template <class T, class D>
        -:  356:    bool operator==(const unique_ptr<T, D>& x, nullptr_t) noexcept;
        -:  357:template <class T, class D>
        -:  358:    bool operator==(nullptr_t, const unique_ptr<T, D>& y) noexcept;
        -:  359:template <class T, class D>
        -:  360:    bool operator!=(const unique_ptr<T, D>& x, nullptr_t) noexcept;
        -:  361:template <class T, class D>
        -:  362:    bool operator!=(nullptr_t, const unique_ptr<T, D>& y) noexcept;
        -:  363:
        -:  364:template <class T, class D>
        -:  365:    bool operator<(const unique_ptr<T, D>& x, nullptr_t);
        -:  366:template <class T, class D>
        -:  367:    bool operator<(nullptr_t, const unique_ptr<T, D>& y);
        -:  368:template <class T, class D>
        -:  369:    bool operator<=(const unique_ptr<T, D>& x, nullptr_t);
        -:  370:template <class T, class D>
        -:  371:    bool operator<=(nullptr_t, const unique_ptr<T, D>& y);
        -:  372:template <class T, class D>
        -:  373:    bool operator>(const unique_ptr<T, D>& x, nullptr_t);
        -:  374:template <class T, class D>
        -:  375:    bool operator>(nullptr_t, const unique_ptr<T, D>& y);
        -:  376:template <class T, class D>
        -:  377:    bool operator>=(const unique_ptr<T, D>& x, nullptr_t);
        -:  378:template <class T, class D>
        -:  379:    bool operator>=(nullptr_t, const unique_ptr<T, D>& y);
        -:  380:
        -:  381:class bad_weak_ptr
        -:  382:    : public std::exception
        -:  383:{
        -:  384:    bad_weak_ptr() noexcept;
        -:  385:};
        -:  386:
        -:  387:template<class T, class... Args> unique_ptr<T> make_unique(Args&&... args);     // C++14
        -:  388:template<class T>                unique_ptr<T> make_unique(size_t n);           // C++14
        -:  389:template<class T, class... Args> unspecified   make_unique(Args&&...) = delete; // C++14, T == U[N]
        -:  390:
        -:  391:template<class E, class T, class Y, class D>
        -:  392:    basic_ostream<E, T>& operator<< (basic_ostream<E, T>& os, unique_ptr<Y, D> const& p);
        -:  393:
        -:  394:template<class T>
        -:  395:class shared_ptr
        -:  396:{
        -:  397:public:
        -:  398:    typedef T element_type;
        -:  399:    typedef weak_ptr<T> weak_type; // C++17
        -:  400:
        -:  401:    // constructors:
        -:  402:    constexpr shared_ptr() noexcept;
        -:  403:    template<class Y> explicit shared_ptr(Y* p);
        -:  404:    template<class Y, class D> shared_ptr(Y* p, D d);
        -:  405:    template<class Y, class D, class A> shared_ptr(Y* p, D d, A a);
        -:  406:    template <class D> shared_ptr(nullptr_t p, D d);
        -:  407:    template <class D, class A> shared_ptr(nullptr_t p, D d, A a);
        -:  408:    template<class Y> shared_ptr(const shared_ptr<Y>& r, T *p) noexcept;
        -:  409:    shared_ptr(const shared_ptr& r) noexcept;
        -:  410:    template<class Y> shared_ptr(const shared_ptr<Y>& r) noexcept;
        -:  411:    shared_ptr(shared_ptr&& r) noexcept;
        -:  412:    template<class Y> shared_ptr(shared_ptr<Y>&& r) noexcept;
        -:  413:    template<class Y> explicit shared_ptr(const weak_ptr<Y>& r);
        -:  414:    template<class Y> shared_ptr(auto_ptr<Y>&& r);          // removed in C++17
        -:  415:    template <class Y, class D> shared_ptr(unique_ptr<Y, D>&& r);
        -:  416:    shared_ptr(nullptr_t) : shared_ptr() { }
        -:  417:
        -:  418:    // destructor:
        -:  419:    ~shared_ptr();
        -:  420:
        -:  421:    // assignment:
        -:  422:    shared_ptr& operator=(const shared_ptr& r) noexcept;
        -:  423:    template<class Y> shared_ptr& operator=(const shared_ptr<Y>& r) noexcept;
        -:  424:    shared_ptr& operator=(shared_ptr&& r) noexcept;
        -:  425:    template<class Y> shared_ptr& operator=(shared_ptr<Y>&& r);
        -:  426:    template<class Y> shared_ptr& operator=(auto_ptr<Y>&& r); // removed in C++17
        -:  427:    template <class Y, class D> shared_ptr& operator=(unique_ptr<Y, D>&& r);
        -:  428:
        -:  429:    // modifiers:
        -:  430:    void swap(shared_ptr& r) noexcept;
        -:  431:    void reset() noexcept;
        -:  432:    template<class Y> void reset(Y* p);
        -:  433:    template<class Y, class D> void reset(Y* p, D d);
        -:  434:    template<class Y, class D, class A> void reset(Y* p, D d, A a);
        -:  435:
        -:  436:    // observers:
        -:  437:    T* get() const noexcept;
        -:  438:    T& operator*() const noexcept;
        -:  439:    T* operator->() const noexcept;
        -:  440:    long use_count() const noexcept;
        -:  441:    bool unique() const noexcept;
        -:  442:    explicit operator bool() const noexcept;
        -:  443:    template<class U> bool owner_before(shared_ptr<U> const& b) const noexcept;
        -:  444:    template<class U> bool owner_before(weak_ptr<U> const& b) const noexcept;
        -:  445:};
        -:  446:
        -:  447:// shared_ptr comparisons:
        -:  448:template<class T, class U>
        -:  449:    bool operator==(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  450:template<class T, class U>
        -:  451:    bool operator!=(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  452:template<class T, class U>
        -:  453:    bool operator<(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  454:template<class T, class U>
        -:  455:    bool operator>(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  456:template<class T, class U>
        -:  457:    bool operator<=(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  458:template<class T, class U>
        -:  459:    bool operator>=(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  460:
        -:  461:template <class T>
        -:  462:    bool operator==(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  463:template <class T>
        -:  464:    bool operator==(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  465:template <class T>
        -:  466:    bool operator!=(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  467:template <class T>
        -:  468:    bool operator!=(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  469:template <class T>
        -:  470:    bool operator<(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  471:template <class T>
        -:  472:bool operator<(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  473:template <class T>
        -:  474:    bool operator<=(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  475:template <class T>
        -:  476:    bool operator<=(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  477:template <class T>
        -:  478:    bool operator>(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  479:template <class T>
        -:  480:    bool operator>(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  481:template <class T>
        -:  482:    bool operator>=(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  483:template <class T>
        -:  484:    bool operator>=(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  485:
        -:  486:// shared_ptr specialized algorithms:
        -:  487:template<class T> void swap(shared_ptr<T>& a, shared_ptr<T>& b) noexcept;
        -:  488:
        -:  489:// shared_ptr casts:
        -:  490:template<class T, class U>
        -:  491:    shared_ptr<T> static_pointer_cast(shared_ptr<U> const& r) noexcept;
        -:  492:template<class T, class U>
        -:  493:    shared_ptr<T> dynamic_pointer_cast(shared_ptr<U> const& r) noexcept;
        -:  494:template<class T, class U>
        -:  495:    shared_ptr<T> const_pointer_cast(shared_ptr<U> const& r) noexcept;
        -:  496:
        -:  497:// shared_ptr I/O:
        -:  498:template<class E, class T, class Y>
        -:  499:    basic_ostream<E, T>& operator<< (basic_ostream<E, T>& os, shared_ptr<Y> const& p);
        -:  500:
        -:  501:// shared_ptr get_deleter:
        -:  502:template<class D, class T> D* get_deleter(shared_ptr<T> const& p) noexcept;
        -:  503:
        -:  504:template<class T, class... Args>
        -:  505:    shared_ptr<T> make_shared(Args&&... args);
        -:  506:template<class T, class A, class... Args>
        -:  507:    shared_ptr<T> allocate_shared(const A& a, Args&&... args);
        -:  508:
        -:  509:template<class T>
        -:  510:class weak_ptr
        -:  511:{
        -:  512:public:
        -:  513:    typedef T element_type;
        -:  514:
        -:  515:    // constructors
        -:  516:    constexpr weak_ptr() noexcept;
        -:  517:    template<class Y> weak_ptr(shared_ptr<Y> const& r) noexcept;
        -:  518:    weak_ptr(weak_ptr const& r) noexcept;
        -:  519:    template<class Y> weak_ptr(weak_ptr<Y> const& r) noexcept;
        -:  520:    weak_ptr(weak_ptr&& r) noexcept;                      // C++14
        -:  521:    template<class Y> weak_ptr(weak_ptr<Y>&& r) noexcept; // C++14
        -:  522:
        -:  523:    // destructor
        -:  524:    ~weak_ptr();
        -:  525:
        -:  526:    // assignment
        -:  527:    weak_ptr& operator=(weak_ptr const& r) noexcept;
        -:  528:    template<class Y> weak_ptr& operator=(weak_ptr<Y> const& r) noexcept;
        -:  529:    template<class Y> weak_ptr& operator=(shared_ptr<Y> const& r) noexcept;
        -:  530:    weak_ptr& operator=(weak_ptr&& r) noexcept;                      // C++14
        -:  531:    template<class Y> weak_ptr& operator=(weak_ptr<Y>&& r) noexcept; // C++14
        -:  532:
        -:  533:    // modifiers
        -:  534:    void swap(weak_ptr& r) noexcept;
        -:  535:    void reset() noexcept;
        -:  536:
        -:  537:    // observers
        -:  538:    long use_count() const noexcept;
        -:  539:    bool expired() const noexcept;
        -:  540:    shared_ptr<T> lock() const noexcept;
        -:  541:    template<class U> bool owner_before(shared_ptr<U> const& b) const noexcept;
        -:  542:    template<class U> bool owner_before(weak_ptr<U> const& b) const noexcept;
        -:  543:};
        -:  544:
        -:  545:// weak_ptr specialized algorithms:
        -:  546:template<class T> void swap(weak_ptr<T>& a, weak_ptr<T>& b) noexcept;
        -:  547:
        -:  548:// class owner_less:
        -:  549:template<class T> struct owner_less;
        -:  550:
        -:  551:template<class T>
        -:  552:struct owner_less<shared_ptr<T>>
        -:  553:    : binary_function<shared_ptr<T>, shared_ptr<T>, bool>
        -:  554:{
        -:  555:    typedef bool result_type;
        -:  556:    bool operator()(shared_ptr<T> const&, shared_ptr<T> const&) const noexcept;
        -:  557:    bool operator()(shared_ptr<T> const&, weak_ptr<T> const&) const noexcept;
        -:  558:    bool operator()(weak_ptr<T> const&, shared_ptr<T> const&) const noexcept;
        -:  559:};
        -:  560:
        -:  561:template<class T>
        -:  562:struct owner_less<weak_ptr<T>>
        -:  563:    : binary_function<weak_ptr<T>, weak_ptr<T>, bool>
        -:  564:{
        -:  565:    typedef bool result_type;
        -:  566:    bool operator()(weak_ptr<T> const&, weak_ptr<T> const&) const noexcept;
        -:  567:    bool operator()(shared_ptr<T> const&, weak_ptr<T> const&) const noexcept;
        -:  568:    bool operator()(weak_ptr<T> const&, shared_ptr<T> const&) const noexcept;
        -:  569:};
        -:  570:
        -:  571:template <>  // Added in C++14
        -:  572:struct owner_less<void>
        -:  573:{
        -:  574:    template <class _Tp, class _Up>
        -:  575:    bool operator()( shared_ptr<_Tp> const& __x, shared_ptr<_Up> const& __y) const noexcept;
        -:  576:    template <class _Tp, class _Up>
        -:  577:    bool operator()( shared_ptr<_Tp> const& __x,   weak_ptr<_Up> const& __y) const noexcept;
        -:  578:    template <class _Tp, class _Up>
        -:  579:    bool operator()(   weak_ptr<_Tp> const& __x, shared_ptr<_Up> const& __y) const noexcept;
        -:  580:    template <class _Tp, class _Up>
        -:  581:    bool operator()(   weak_ptr<_Tp> const& __x,   weak_ptr<_Up> const& __y) const noexcept;
        -:  582:
        -:  583:    typedef void is_transparent;
        -:  584:};
        -:  585:
        -:  586:template<class T>
        -:  587:class enable_shared_from_this
        -:  588:{
        -:  589:protected:
        -:  590:    constexpr enable_shared_from_this() noexcept;
        -:  591:    enable_shared_from_this(enable_shared_from_this const&) noexcept;
        -:  592:    enable_shared_from_this& operator=(enable_shared_from_this const&) noexcept;
        -:  593:    ~enable_shared_from_this();
        -:  594:public:
        -:  595:    shared_ptr<T> shared_from_this();
        -:  596:    shared_ptr<T const> shared_from_this() const;
        -:  597:};
        -:  598:
        -:  599:template<class T>
        -:  600:    bool atomic_is_lock_free(const shared_ptr<T>* p);
        -:  601:template<class T>
        -:  602:    shared_ptr<T> atomic_load(const shared_ptr<T>* p);
        -:  603:template<class T>
        -:  604:    shared_ptr<T> atomic_load_explicit(const shared_ptr<T>* p, memory_order mo);
        -:  605:template<class T>
        -:  606:    void atomic_store(shared_ptr<T>* p, shared_ptr<T> r);
        -:  607:template<class T>
        -:  608:    void atomic_store_explicit(shared_ptr<T>* p, shared_ptr<T> r, memory_order mo);
        -:  609:template<class T>
        -:  610:    shared_ptr<T> atomic_exchange(shared_ptr<T>* p, shared_ptr<T> r);
        -:  611:template<class T>
        -:  612:    shared_ptr<T>
        -:  613:    atomic_exchange_explicit(shared_ptr<T>* p, shared_ptr<T> r, memory_order mo);
        -:  614:template<class T>
        -:  615:    bool
        -:  616:    atomic_compare_exchange_weak(shared_ptr<T>* p, shared_ptr<T>* v, shared_ptr<T> w);
        -:  617:template<class T>
        -:  618:    bool
        -:  619:    atomic_compare_exchange_strong( shared_ptr<T>* p, shared_ptr<T>* v, shared_ptr<T> w);
        -:  620:template<class T>
        -:  621:    bool
        -:  622:    atomic_compare_exchange_weak_explicit(shared_ptr<T>* p, shared_ptr<T>* v,
        -:  623:                                          shared_ptr<T> w, memory_order success,
        -:  624:                                          memory_order failure);
        -:  625:template<class T>
        -:  626:    bool
        -:  627:    atomic_compare_exchange_strong_explicit(shared_ptr<T>* p, shared_ptr<T>* v,
        -:  628:                                            shared_ptr<T> w, memory_order success,
        -:  629:                                            memory_order failure);
        -:  630:// Hash support
        -:  631:template <class T> struct hash;
        -:  632:template <class T, class D> struct hash<unique_ptr<T, D> >;
        -:  633:template <class T> struct hash<shared_ptr<T> >;
        -:  634:
        -:  635:template <class T, class Alloc>
        -:  636:  inline constexpr bool uses_allocator_v = uses_allocator<T, Alloc>::value;
        -:  637:
        -:  638:// Pointer safety
        -:  639:enum class pointer_safety { relaxed, preferred, strict };
        -:  640:void declare_reachable(void *p);
        -:  641:template <class T> T *undeclare_reachable(T *p);
        -:  642:void declare_no_pointers(char *p, size_t n);
        -:  643:void undeclare_no_pointers(char *p, size_t n);
        -:  644:pointer_safety get_pointer_safety() noexcept;
        -:  645:
        -:  646:void* align(size_t alignment, size_t size, void*& ptr, size_t& space);
        -:  647:
        -:  648:}  // std
        -:  649:
        -:  650:*/
        -:  651:
        -:  652:#include <__config>
        -:  653:#include <type_traits>
        -:  654:#include <typeinfo>
        -:  655:#include <cstddef>
        -:  656:#include <cstdint>
        -:  657:#include <new>
        -:  658:#include <utility>
        -:  659:#include <limits>
        -:  660:#include <iterator>
        -:  661:#include <__functional_base>
        -:  662:#include <iosfwd>
        -:  663:#include <tuple>
        -:  664:#include <stdexcept>
        -:  665:#include <cstring>
        -:  666:#include <cassert>
        -:  667:#if !defined(_LIBCPP_HAS_NO_ATOMIC_HEADER)
        -:  668:#  include <atomic>
        -:  669:#endif
        -:  670:
        -:  671:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:  672:#pragma GCC system_header
        -:  673:#endif
        -:  674:
        -:  675:_LIBCPP_PUSH_MACROS
        -:  676:#include <__undef_macros>
        -:  677:
        -:  678:
        -:  679:_LIBCPP_BEGIN_NAMESPACE_STD
        -:  680:
        -:  681:template <class _ValueType>
        -:  682:inline _LIBCPP_INLINE_VISIBILITY
        -:  683:_ValueType __libcpp_relaxed_load(_ValueType const* __value) {
        -:  684:#if !defined(_LIBCPP_HAS_NO_THREADS) && \
        -:  685:    defined(__ATOMIC_RELAXED) &&        \
        -:  686:    (__has_builtin(__atomic_load_n) || _GNUC_VER >= 407)
        -:  687:    return __atomic_load_n(__value, __ATOMIC_RELAXED);
        -:  688:#else
        -:  689:    return *__value;
        -:  690:#endif
        -:  691:}
        -:  692:
        -:  693:template <class _ValueType>
        -:  694:inline _LIBCPP_INLINE_VISIBILITY
        -:  695:_ValueType __libcpp_acquire_load(_ValueType const* __value) {
        -:  696:#if !defined(_LIBCPP_HAS_NO_THREADS) && \
        -:  697:    defined(__ATOMIC_ACQUIRE) &&        \
        -:  698:    (__has_builtin(__atomic_load_n) || _GNUC_VER >= 407)
        -:  699:    return __atomic_load_n(__value, __ATOMIC_ACQUIRE);
        -:  700:#else
        -:  701:    return *__value;
        -:  702:#endif
        -:  703:}
        -:  704:
        -:  705:// addressof moved to <type_traits>
        -:  706:
        -:  707:template <class _Tp> class allocator;
        -:  708:
        -:  709:template <>
        -:  710:class _LIBCPP_TEMPLATE_VIS allocator<void>
        -:  711:{
        -:  712:public:
        -:  713:    typedef void*             pointer;
        -:  714:    typedef const void*       const_pointer;
        -:  715:    typedef void              value_type;
        -:  716:
        -:  717:    template <class _Up> struct rebind {typedef allocator<_Up> other;};
        -:  718:};
        -:  719:
        -:  720:template <>
        -:  721:class _LIBCPP_TEMPLATE_VIS allocator<const void>
        -:  722:{
        -:  723:public:
        -:  724:    typedef const void*       pointer;
        -:  725:    typedef const void*       const_pointer;
        -:  726:    typedef const void        value_type;
        -:  727:
        -:  728:    template <class _Up> struct rebind {typedef allocator<_Up> other;};
        -:  729:};
        -:  730:
        -:  731:// pointer_traits
        -:  732:
        -:  733:template <class _Tp, class = void>
        -:  734:struct __has_element_type : false_type {};
        -:  735:
        -:  736:template <class _Tp>
        -:  737:struct __has_element_type<_Tp,
        -:  738:              typename __void_t<typename _Tp::element_type>::type> : true_type {};
        -:  739:
        -:  740:template <class _Ptr, bool = __has_element_type<_Ptr>::value>
        -:  741:struct __pointer_traits_element_type;
        -:  742:
        -:  743:template <class _Ptr>
        -:  744:struct __pointer_traits_element_type<_Ptr, true>
        -:  745:{
        -:  746:    typedef typename _Ptr::element_type type;
        -:  747:};
        -:  748:
        -:  749:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -:  750:
        -:  751:template <template <class, class...> class _Sp, class _Tp, class ..._Args>
        -:  752:struct __pointer_traits_element_type<_Sp<_Tp, _Args...>, true>
        -:  753:{
        -:  754:    typedef typename _Sp<_Tp, _Args...>::element_type type;
        -:  755:};
        -:  756:
        -:  757:template <template <class, class...> class _Sp, class _Tp, class ..._Args>
        -:  758:struct __pointer_traits_element_type<_Sp<_Tp, _Args...>, false>
        -:  759:{
        -:  760:    typedef _Tp type;
        -:  761:};
        -:  762:
        -:  763:#else  // _LIBCPP_HAS_NO_VARIADICS
        -:  764:
        -:  765:template <template <class> class _Sp, class _Tp>
        -:  766:struct __pointer_traits_element_type<_Sp<_Tp>, true>
        -:  767:{
        -:  768:    typedef typename _Sp<_Tp>::element_type type;
        -:  769:};
        -:  770:
        -:  771:template <template <class> class _Sp, class _Tp>
        -:  772:struct __pointer_traits_element_type<_Sp<_Tp>, false>
        -:  773:{
        -:  774:    typedef _Tp type;
        -:  775:};
        -:  776:
        -:  777:template <template <class, class> class _Sp, class _Tp, class _A0>
        -:  778:struct __pointer_traits_element_type<_Sp<_Tp, _A0>, true>
        -:  779:{
        -:  780:    typedef typename _Sp<_Tp, _A0>::element_type type;
        -:  781:};
        -:  782:
        -:  783:template <template <class, class> class _Sp, class _Tp, class _A0>
        -:  784:struct __pointer_traits_element_type<_Sp<_Tp, _A0>, false>
        -:  785:{
        -:  786:    typedef _Tp type;
        -:  787:};
        -:  788:
        -:  789:template <template <class, class, class> class _Sp, class _Tp, class _A0, class _A1>
        -:  790:struct __pointer_traits_element_type<_Sp<_Tp, _A0, _A1>, true>
        -:  791:{
        -:  792:    typedef typename _Sp<_Tp, _A0, _A1>::element_type type;
        -:  793:};
        -:  794:
        -:  795:template <template <class, class, class> class _Sp, class _Tp, class _A0, class _A1>
        -:  796:struct __pointer_traits_element_type<_Sp<_Tp, _A0, _A1>, false>
        -:  797:{
        -:  798:    typedef _Tp type;
        -:  799:};
        -:  800:
        -:  801:template <template <class, class, class, class> class _Sp, class _Tp, class _A0,
        -:  802:                                                           class _A1, class _A2>
        -:  803:struct __pointer_traits_element_type<_Sp<_Tp, _A0, _A1, _A2>, true>
        -:  804:{
        -:  805:    typedef typename _Sp<_Tp, _A0, _A1, _A2>::element_type type;
        -:  806:};
        -:  807:
        -:  808:template <template <class, class, class, class> class _Sp, class _Tp, class _A0,
        -:  809:                                                           class _A1, class _A2>
        -:  810:struct __pointer_traits_element_type<_Sp<_Tp, _A0, _A1, _A2>, false>
        -:  811:{
        -:  812:    typedef _Tp type;
        -:  813:};
        -:  814:
        -:  815:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -:  816:
        -:  817:template <class _Tp, class = void>
        -:  818:struct __has_difference_type : false_type {};
        -:  819:
        -:  820:template <class _Tp>
        -:  821:struct __has_difference_type<_Tp,
        -:  822:            typename __void_t<typename _Tp::difference_type>::type> : true_type {};
        -:  823:
        -:  824:template <class _Ptr, bool = __has_difference_type<_Ptr>::value>
        -:  825:struct __pointer_traits_difference_type
        -:  826:{
        -:  827:    typedef ptrdiff_t type;
        -:  828:};
        -:  829:
        -:  830:template <class _Ptr>
        -:  831:struct __pointer_traits_difference_type<_Ptr, true>
        -:  832:{
        -:  833:    typedef typename _Ptr::difference_type type;
        -:  834:};
        -:  835:
        -:  836:template <class _Tp, class _Up>
        -:  837:struct __has_rebind
        -:  838:{
        -:  839:private:
        -:  840:    struct __two {char __lx; char __lxx;};
        -:  841:    template <class _Xp> static __two __test(...);
        -:  842:    template <class _Xp> static char __test(typename _Xp::template rebind<_Up>* = 0);
        -:  843:public:
        -:  844:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -:  845:};
        -:  846:
        -:  847:template <class _Tp, class _Up, bool = __has_rebind<_Tp, _Up>::value>
        -:  848:struct __pointer_traits_rebind
        -:  849:{
        -:  850:#ifndef _LIBCPP_CXX03_LANG
        -:  851:    typedef typename _Tp::template rebind<_Up> type;
        -:  852:#else
        -:  853:    typedef typename _Tp::template rebind<_Up>::other type;
        -:  854:#endif
        -:  855:};
        -:  856:
        -:  857:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -:  858:
        -:  859:template <template <class, class...> class _Sp, class _Tp, class ..._Args, class _Up>
        -:  860:struct __pointer_traits_rebind<_Sp<_Tp, _Args...>, _Up, true>
        -:  861:{
        -:  862:#ifndef _LIBCPP_CXX03_LANG
        -:  863:    typedef typename _Sp<_Tp, _Args...>::template rebind<_Up> type;
        -:  864:#else
        -:  865:    typedef typename _Sp<_Tp, _Args...>::template rebind<_Up>::other type;
        -:  866:#endif
        -:  867:};
        -:  868:
        -:  869:template <template <class, class...> class _Sp, class _Tp, class ..._Args, class _Up>
        -:  870:struct __pointer_traits_rebind<_Sp<_Tp, _Args...>, _Up, false>
        -:  871:{
        -:  872:    typedef _Sp<_Up, _Args...> type;
        -:  873:};
        -:  874:
        -:  875:#else  // _LIBCPP_HAS_NO_VARIADICS
        -:  876:
        -:  877:template <template <class> class _Sp, class _Tp, class _Up>
        -:  878:struct __pointer_traits_rebind<_Sp<_Tp>, _Up, true>
        -:  879:{
        -:  880:#ifndef _LIBCPP_CXX03_LANG
        -:  881:    typedef typename _Sp<_Tp>::template rebind<_Up> type;
        -:  882:#else
        -:  883:    typedef typename _Sp<_Tp>::template rebind<_Up>::other type;
        -:  884:#endif
        -:  885:};
        -:  886:
        -:  887:template <template <class> class _Sp, class _Tp, class _Up>
        -:  888:struct __pointer_traits_rebind<_Sp<_Tp>, _Up, false>
        -:  889:{
        -:  890:    typedef _Sp<_Up> type;
        -:  891:};
        -:  892:
        -:  893:template <template <class, class> class _Sp, class _Tp, class _A0, class _Up>
        -:  894:struct __pointer_traits_rebind<_Sp<_Tp, _A0>, _Up, true>
        -:  895:{
        -:  896:#ifndef _LIBCPP_CXX03_LANG
        -:  897:    typedef typename _Sp<_Tp, _A0>::template rebind<_Up> type;
        -:  898:#else
        -:  899:    typedef typename _Sp<_Tp, _A0>::template rebind<_Up>::other type;
        -:  900:#endif
        -:  901:};
        -:  902:
        -:  903:template <template <class, class> class _Sp, class _Tp, class _A0, class _Up>
        -:  904:struct __pointer_traits_rebind<_Sp<_Tp, _A0>, _Up, false>
        -:  905:{
        -:  906:    typedef _Sp<_Up, _A0> type;
        -:  907:};
        -:  908:
        -:  909:template <template <class, class, class> class _Sp, class _Tp, class _A0,
        -:  910:                                         class _A1, class _Up>
        -:  911:struct __pointer_traits_rebind<_Sp<_Tp, _A0, _A1>, _Up, true>
        -:  912:{
        -:  913:#ifndef _LIBCPP_CXX03_LANG
        -:  914:    typedef typename _Sp<_Tp, _A0, _A1>::template rebind<_Up> type;
        -:  915:#else
        -:  916:    typedef typename _Sp<_Tp, _A0, _A1>::template rebind<_Up>::other type;
        -:  917:#endif
        -:  918:};
        -:  919:
        -:  920:template <template <class, class, class> class _Sp, class _Tp, class _A0,
        -:  921:                                         class _A1, class _Up>
        -:  922:struct __pointer_traits_rebind<_Sp<_Tp, _A0, _A1>, _Up, false>
        -:  923:{
        -:  924:    typedef _Sp<_Up, _A0, _A1> type;
        -:  925:};
        -:  926:
        -:  927:template <template <class, class, class, class> class _Sp, class _Tp, class _A0,
        -:  928:                                                class _A1, class _A2, class _Up>
        -:  929:struct __pointer_traits_rebind<_Sp<_Tp, _A0, _A1, _A2>, _Up, true>
        -:  930:{
        -:  931:#ifndef _LIBCPP_CXX03_LANG
        -:  932:    typedef typename _Sp<_Tp, _A0, _A1, _A2>::template rebind<_Up> type;
        -:  933:#else
        -:  934:    typedef typename _Sp<_Tp, _A0, _A1, _A2>::template rebind<_Up>::other type;
        -:  935:#endif
        -:  936:};
        -:  937:
        -:  938:template <template <class, class, class, class> class _Sp, class _Tp, class _A0,
        -:  939:                                                class _A1, class _A2, class _Up>
        -:  940:struct __pointer_traits_rebind<_Sp<_Tp, _A0, _A1, _A2>, _Up, false>
        -:  941:{
        -:  942:    typedef _Sp<_Up, _A0, _A1, _A2> type;
        -:  943:};
        -:  944:
        -:  945:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -:  946:
        -:  947:template <class _Ptr>
        -:  948:struct _LIBCPP_TEMPLATE_VIS pointer_traits
        -:  949:{
        -:  950:    typedef _Ptr                                                     pointer;
        -:  951:    typedef typename __pointer_traits_element_type<pointer>::type    element_type;
        -:  952:    typedef typename __pointer_traits_difference_type<pointer>::type difference_type;
        -:  953:
        -:  954:#ifndef _LIBCPP_CXX03_LANG
        -:  955:    template <class _Up> using rebind = typename __pointer_traits_rebind<pointer, _Up>::type;
        -:  956:#else
        -:  957:    template <class _Up> struct rebind
        -:  958:        {typedef typename __pointer_traits_rebind<pointer, _Up>::type other;};
        -:  959:#endif  // _LIBCPP_CXX03_LANG
        -:  960:
        -:  961:private:
        -:  962:    struct __nat {};
        -:  963:public:
        -:  964:    _LIBCPP_INLINE_VISIBILITY
        -:  965:    static pointer pointer_to(typename conditional<is_void<element_type>::value,
        -:  966:                                           __nat, element_type>::type& __r)
        -:  967:        {return pointer::pointer_to(__r);}
        -:  968:};
        -:  969:
        -:  970:template <class _Tp>
        -:  971:struct _LIBCPP_TEMPLATE_VIS pointer_traits<_Tp*>
        -:  972:{
        -:  973:    typedef _Tp*      pointer;
        -:  974:    typedef _Tp       element_type;
        -:  975:    typedef ptrdiff_t difference_type;
        -:  976:
        -:  977:#ifndef _LIBCPP_CXX03_LANG
        -:  978:    template <class _Up> using rebind = _Up*;
        -:  979:#else
        -:  980:    template <class _Up> struct rebind {typedef _Up* other;};
        -:  981:#endif
        -:  982:
        -:  983:private:
        -:  984:    struct __nat {};
        -:  985:public:
        -:  986:    _LIBCPP_INLINE_VISIBILITY
        -:  987:    static pointer pointer_to(typename conditional<is_void<element_type>::value,
        -:  988:                                      __nat, element_type>::type& __r) _NOEXCEPT
    #####:  989:        {return _VSTD::addressof(__r);}
        -:  990:};
        -:  991:
        -:  992:template <class _From, class _To>
        -:  993:struct __rebind_pointer {
        -:  994:#ifndef _LIBCPP_CXX03_LANG
        -:  995:    typedef typename pointer_traits<_From>::template rebind<_To>        type;
        -:  996:#else
        -:  997:    typedef typename pointer_traits<_From>::template rebind<_To>::other type;
        -:  998:#endif
        -:  999:};
        -: 1000:
        -: 1001:// allocator_traits
        -: 1002:
        -: 1003:template <class _Tp, class = void>
        -: 1004:struct __has_pointer_type : false_type {};
        -: 1005:
        -: 1006:template <class _Tp>
        -: 1007:struct __has_pointer_type<_Tp,
        -: 1008:          typename __void_t<typename _Tp::pointer>::type> : true_type {};
        -: 1009:
        -: 1010:namespace __pointer_type_imp
        -: 1011:{
        -: 1012:
        -: 1013:template <class _Tp, class _Dp, bool = __has_pointer_type<_Dp>::value>
        -: 1014:struct __pointer_type
        -: 1015:{
        -: 1016:    typedef typename _Dp::pointer type;
        -: 1017:};
        -: 1018:
        -: 1019:template <class _Tp, class _Dp>
        -: 1020:struct __pointer_type<_Tp, _Dp, false>
        -: 1021:{
        -: 1022:    typedef _Tp* type;
        -: 1023:};
        -: 1024:
        -: 1025:}  // __pointer_type_imp
        -: 1026:
        -: 1027:template <class _Tp, class _Dp>
        -: 1028:struct __pointer_type
        -: 1029:{
        -: 1030:    typedef typename __pointer_type_imp::__pointer_type<_Tp, typename remove_reference<_Dp>::type>::type type;
        -: 1031:};
        -: 1032:
        -: 1033:template <class _Tp, class = void>
        -: 1034:struct __has_const_pointer : false_type {};
        -: 1035:
        -: 1036:template <class _Tp>
        -: 1037:struct __has_const_pointer<_Tp,
        -: 1038:            typename __void_t<typename _Tp::const_pointer>::type> : true_type {};
        -: 1039:
        -: 1040:template <class _Tp, class _Ptr, class _Alloc, bool = __has_const_pointer<_Alloc>::value>
        -: 1041:struct __const_pointer
        -: 1042:{
        -: 1043:    typedef typename _Alloc::const_pointer type;
        -: 1044:};
        -: 1045:
        -: 1046:template <class _Tp, class _Ptr, class _Alloc>
        -: 1047:struct __const_pointer<_Tp, _Ptr, _Alloc, false>
        -: 1048:{
        -: 1049:#ifndef _LIBCPP_CXX03_LANG
        -: 1050:    typedef typename pointer_traits<_Ptr>::template rebind<const _Tp> type;
        -: 1051:#else
        -: 1052:    typedef typename pointer_traits<_Ptr>::template rebind<const _Tp>::other type;
        -: 1053:#endif
        -: 1054:};
        -: 1055:
        -: 1056:template <class _Tp, class = void>
        -: 1057:struct __has_void_pointer : false_type {};
        -: 1058:
        -: 1059:template <class _Tp>
        -: 1060:struct __has_void_pointer<_Tp,
        -: 1061:               typename __void_t<typename _Tp::void_pointer>::type> : true_type {};
        -: 1062:
        -: 1063:template <class _Ptr, class _Alloc, bool = __has_void_pointer<_Alloc>::value>
        -: 1064:struct __void_pointer
        -: 1065:{
        -: 1066:    typedef typename _Alloc::void_pointer type;
        -: 1067:};
        -: 1068:
        -: 1069:template <class _Ptr, class _Alloc>
        -: 1070:struct __void_pointer<_Ptr, _Alloc, false>
        -: 1071:{
        -: 1072:#ifndef _LIBCPP_CXX03_LANG
        -: 1073:    typedef typename pointer_traits<_Ptr>::template rebind<void> type;
        -: 1074:#else
        -: 1075:    typedef typename pointer_traits<_Ptr>::template rebind<void>::other type;
        -: 1076:#endif
        -: 1077:};
        -: 1078:
        -: 1079:template <class _Tp, class = void>
        -: 1080:struct __has_const_void_pointer : false_type {};
        -: 1081:
        -: 1082:template <class _Tp>
        -: 1083:struct __has_const_void_pointer<_Tp,
        -: 1084:            typename __void_t<typename _Tp::const_void_pointer>::type> : true_type {};
        -: 1085:
        -: 1086:template <class _Ptr, class _Alloc, bool = __has_const_void_pointer<_Alloc>::value>
        -: 1087:struct __const_void_pointer
        -: 1088:{
        -: 1089:    typedef typename _Alloc::const_void_pointer type;
        -: 1090:};
        -: 1091:
        -: 1092:template <class _Ptr, class _Alloc>
        -: 1093:struct __const_void_pointer<_Ptr, _Alloc, false>
        -: 1094:{
        -: 1095:#ifndef _LIBCPP_CXX03_LANG
        -: 1096:    typedef typename pointer_traits<_Ptr>::template rebind<const void> type;
        -: 1097:#else
        -: 1098:    typedef typename pointer_traits<_Ptr>::template rebind<const void>::other type;
        -: 1099:#endif
        -: 1100:};
        -: 1101:
        -: 1102:template <class _Tp>
        -: 1103:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -: 1104:_Tp*
        -: 1105:__to_raw_pointer(_Tp* __p) _NOEXCEPT
        -: 1106:{
    #####: 1107:    return __p;
        -: 1108:}
        -: 1109:
        -: 1110:#if _LIBCPP_STD_VER <= 17
        -: 1111:template <class _Pointer>
        -: 1112:inline _LIBCPP_INLINE_VISIBILITY
        -: 1113:typename pointer_traits<_Pointer>::element_type*
        -: 1114:__to_raw_pointer(_Pointer __p) _NOEXCEPT
        -: 1115:{
        -: 1116:    return _VSTD::__to_raw_pointer(__p.operator->());
        -: 1117:}
        -: 1118:#else
        -: 1119:template <class _Pointer>
        -: 1120:inline _LIBCPP_INLINE_VISIBILITY
        -: 1121:auto
        -: 1122:__to_raw_pointer(const _Pointer& __p) _NOEXCEPT
        -: 1123:-> decltype(pointer_traits<_Pointer>::to_address(__p))
        -: 1124:{
        -: 1125:    return pointer_traits<_Pointer>::to_address(__p);
        -: 1126:}
        -: 1127:
        -: 1128:template <class _Pointer, class... _None>
        -: 1129:inline _LIBCPP_INLINE_VISIBILITY
        -: 1130:auto
        -: 1131:__to_raw_pointer(const _Pointer& __p, _None...) _NOEXCEPT
        -: 1132:{
        -: 1133:    return _VSTD::__to_raw_pointer(__p.operator->());
        -: 1134:}
        -: 1135:
        -: 1136:template <class _Tp>
        -: 1137:inline _LIBCPP_INLINE_VISIBILITY constexpr
        -: 1138:_Tp*
        -: 1139:to_address(_Tp* __p) _NOEXCEPT
        -: 1140:{
        -: 1141:    static_assert(!is_function_v<_Tp>, "_Tp is a function type");
        -: 1142:    return __p;
        -: 1143:}
        -: 1144:
        -: 1145:template <class _Pointer>
        -: 1146:inline _LIBCPP_INLINE_VISIBILITY
        -: 1147:auto
        -: 1148:to_address(const _Pointer& __p) _NOEXCEPT
        -: 1149:{
        -: 1150:    return _VSTD::__to_raw_pointer(__p);
        -: 1151:}
        -: 1152:#endif
        -: 1153:
        -: 1154:template <class _Tp, class = void>
        -: 1155:struct __has_size_type : false_type {};
        -: 1156:
        -: 1157:template <class _Tp>
        -: 1158:struct __has_size_type<_Tp,
        -: 1159:               typename __void_t<typename _Tp::size_type>::type> : true_type {};
        -: 1160:
        -: 1161:template <class _Alloc, class _DiffType, bool = __has_size_type<_Alloc>::value>
        -: 1162:struct __size_type
        -: 1163:{
        -: 1164:    typedef typename make_unsigned<_DiffType>::type type;
        -: 1165:};
        -: 1166:
        -: 1167:template <class _Alloc, class _DiffType>
        -: 1168:struct __size_type<_Alloc, _DiffType, true>
        -: 1169:{
        -: 1170:    typedef typename _Alloc::size_type type;
        -: 1171:};
        -: 1172:
        -: 1173:template <class _Tp, class = void>
        -: 1174:struct __has_propagate_on_container_copy_assignment : false_type {};
        -: 1175:
        -: 1176:template <class _Tp>
        -: 1177:struct __has_propagate_on_container_copy_assignment<_Tp,
        -: 1178:    typename __void_t<typename _Tp::propagate_on_container_copy_assignment>::type>
        -: 1179:        : true_type {};
        -: 1180:
        -: 1181:template <class _Alloc, bool = __has_propagate_on_container_copy_assignment<_Alloc>::value>
        -: 1182:struct __propagate_on_container_copy_assignment
        -: 1183:{
        -: 1184:    typedef false_type type;
        -: 1185:};
        -: 1186:
        -: 1187:template <class _Alloc>
        -: 1188:struct __propagate_on_container_copy_assignment<_Alloc, true>
        -: 1189:{
        -: 1190:    typedef typename _Alloc::propagate_on_container_copy_assignment type;
        -: 1191:};
        -: 1192:
        -: 1193:template <class _Tp, class = void>
        -: 1194:struct __has_propagate_on_container_move_assignment : false_type {};
        -: 1195:
        -: 1196:template <class _Tp>
        -: 1197:struct __has_propagate_on_container_move_assignment<_Tp,
        -: 1198:           typename __void_t<typename _Tp::propagate_on_container_move_assignment>::type>
        -: 1199:               : true_type {};
        -: 1200:
        -: 1201:template <class _Alloc, bool = __has_propagate_on_container_move_assignment<_Alloc>::value>
        -: 1202:struct __propagate_on_container_move_assignment
        -: 1203:{
        -: 1204:    typedef false_type type;
        -: 1205:};
        -: 1206:
        -: 1207:template <class _Alloc>
        -: 1208:struct __propagate_on_container_move_assignment<_Alloc, true>
        -: 1209:{
        -: 1210:    typedef typename _Alloc::propagate_on_container_move_assignment type;
        -: 1211:};
        -: 1212:
        -: 1213:template <class _Tp, class = void>
        -: 1214:struct __has_propagate_on_container_swap : false_type {};
        -: 1215:
        -: 1216:template <class _Tp>
        -: 1217:struct __has_propagate_on_container_swap<_Tp,
        -: 1218:           typename __void_t<typename _Tp::propagate_on_container_swap>::type>
        -: 1219:               : true_type {};
        -: 1220:
        -: 1221:template <class _Alloc, bool = __has_propagate_on_container_swap<_Alloc>::value>
        -: 1222:struct __propagate_on_container_swap
        -: 1223:{
        -: 1224:    typedef false_type type;
        -: 1225:};
        -: 1226:
        -: 1227:template <class _Alloc>
        -: 1228:struct __propagate_on_container_swap<_Alloc, true>
        -: 1229:{
        -: 1230:    typedef typename _Alloc::propagate_on_container_swap type;
        -: 1231:};
        -: 1232:
        -: 1233:template <class _Tp, class = void>
        -: 1234:struct __has_is_always_equal : false_type {};
        -: 1235:
        -: 1236:template <class _Tp>
        -: 1237:struct __has_is_always_equal<_Tp,
        -: 1238:           typename __void_t<typename _Tp::is_always_equal>::type>
        -: 1239:               : true_type {};
        -: 1240:
        -: 1241:template <class _Alloc, bool = __has_is_always_equal<_Alloc>::value>
        -: 1242:struct __is_always_equal
        -: 1243:{
        -: 1244:    typedef typename _VSTD::is_empty<_Alloc>::type type;
        -: 1245:};
        -: 1246:
        -: 1247:template <class _Alloc>
        -: 1248:struct __is_always_equal<_Alloc, true>
        -: 1249:{
        -: 1250:    typedef typename _Alloc::is_always_equal type;
        -: 1251:};
        -: 1252:
        -: 1253:template <class _Tp, class _Up, bool = __has_rebind<_Tp, _Up>::value>
        -: 1254:struct __has_rebind_other
        -: 1255:{
        -: 1256:private:
        -: 1257:    struct __two {char __lx; char __lxx;};
        -: 1258:    template <class _Xp> static __two __test(...);
        -: 1259:    template <class _Xp> static char __test(typename _Xp::template rebind<_Up>::other* = 0);
        -: 1260:public:
        -: 1261:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -: 1262:};
        -: 1263:
        -: 1264:template <class _Tp, class _Up>
        -: 1265:struct __has_rebind_other<_Tp, _Up, false>
        -: 1266:{
        -: 1267:    static const bool value = false;
        -: 1268:};
        -: 1269:
        -: 1270:template <class _Tp, class _Up, bool = __has_rebind_other<_Tp, _Up>::value>
        -: 1271:struct __allocator_traits_rebind
        -: 1272:{
        -: 1273:    typedef typename _Tp::template rebind<_Up>::other type;
        -: 1274:};
        -: 1275:
        -: 1276:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 1277:
        -: 1278:template <template <class, class...> class _Alloc, class _Tp, class ..._Args, class _Up>
        -: 1279:struct __allocator_traits_rebind<_Alloc<_Tp, _Args...>, _Up, true>
        -: 1280:{
        -: 1281:    typedef typename _Alloc<_Tp, _Args...>::template rebind<_Up>::other type;
        -: 1282:};
        -: 1283:
        -: 1284:template <template <class, class...> class _Alloc, class _Tp, class ..._Args, class _Up>
        -: 1285:struct __allocator_traits_rebind<_Alloc<_Tp, _Args...>, _Up, false>
        -: 1286:{
        -: 1287:    typedef _Alloc<_Up, _Args...> type;
        -: 1288:};
        -: 1289:
        -: 1290:#else  // _LIBCPP_HAS_NO_VARIADICS
        -: 1291:
        -: 1292:template <template <class> class _Alloc, class _Tp, class _Up>
        -: 1293:struct __allocator_traits_rebind<_Alloc<_Tp>, _Up, true>
        -: 1294:{
        -: 1295:    typedef typename _Alloc<_Tp>::template rebind<_Up>::other type;
        -: 1296:};
        -: 1297:
        -: 1298:template <template <class> class _Alloc, class _Tp, class _Up>
        -: 1299:struct __allocator_traits_rebind<_Alloc<_Tp>, _Up, false>
        -: 1300:{
        -: 1301:    typedef _Alloc<_Up> type;
        -: 1302:};
        -: 1303:
        -: 1304:template <template <class, class> class _Alloc, class _Tp, class _A0, class _Up>
        -: 1305:struct __allocator_traits_rebind<_Alloc<_Tp, _A0>, _Up, true>
        -: 1306:{
        -: 1307:    typedef typename _Alloc<_Tp, _A0>::template rebind<_Up>::other type;
        -: 1308:};
        -: 1309:
        -: 1310:template <template <class, class> class _Alloc, class _Tp, class _A0, class _Up>
        -: 1311:struct __allocator_traits_rebind<_Alloc<_Tp, _A0>, _Up, false>
        -: 1312:{
        -: 1313:    typedef _Alloc<_Up, _A0> type;
        -: 1314:};
        -: 1315:
        -: 1316:template <template <class, class, class> class _Alloc, class _Tp, class _A0,
        -: 1317:                                         class _A1, class _Up>
        -: 1318:struct __allocator_traits_rebind<_Alloc<_Tp, _A0, _A1>, _Up, true>
        -: 1319:{
        -: 1320:    typedef typename _Alloc<_Tp, _A0, _A1>::template rebind<_Up>::other type;
        -: 1321:};
        -: 1322:
        -: 1323:template <template <class, class, class> class _Alloc, class _Tp, class _A0,
        -: 1324:                                         class _A1, class _Up>
        -: 1325:struct __allocator_traits_rebind<_Alloc<_Tp, _A0, _A1>, _Up, false>
        -: 1326:{
        -: 1327:    typedef _Alloc<_Up, _A0, _A1> type;
        -: 1328:};
        -: 1329:
        -: 1330:template <template <class, class, class, class> class _Alloc, class _Tp, class _A0,
        -: 1331:                                                class _A1, class _A2, class _Up>
        -: 1332:struct __allocator_traits_rebind<_Alloc<_Tp, _A0, _A1, _A2>, _Up, true>
        -: 1333:{
        -: 1334:    typedef typename _Alloc<_Tp, _A0, _A1, _A2>::template rebind<_Up>::other type;
        -: 1335:};
        -: 1336:
        -: 1337:template <template <class, class, class, class> class _Alloc, class _Tp, class _A0,
        -: 1338:                                                class _A1, class _A2, class _Up>
        -: 1339:struct __allocator_traits_rebind<_Alloc<_Tp, _A0, _A1, _A2>, _Up, false>
        -: 1340:{
        -: 1341:    typedef _Alloc<_Up, _A0, _A1, _A2> type;
        -: 1342:};
        -: 1343:
        -: 1344:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 1345:
        -: 1346:#ifndef _LIBCPP_CXX03_LANG
        -: 1347:
        -: 1348:template <class _Alloc, class _SizeType, class _ConstVoidPtr>
        -: 1349:auto
        -: 1350:__has_allocate_hint_test(_Alloc&& __a, _SizeType&& __sz, _ConstVoidPtr&& __p)
        -: 1351:    -> decltype((void)__a.allocate(__sz, __p), true_type());
        -: 1352:
        -: 1353:template <class _Alloc, class _SizeType, class _ConstVoidPtr>
        -: 1354:auto
        -: 1355:__has_allocate_hint_test(const _Alloc& __a, _SizeType&& __sz, _ConstVoidPtr&& __p)
        -: 1356:    -> false_type;
        -: 1357:
        -: 1358:template <class _Alloc, class _SizeType, class _ConstVoidPtr>
        -: 1359:struct __has_allocate_hint
        -: 1360:    : integral_constant<bool,
        -: 1361:        is_same<
        -: 1362:            decltype(_VSTD::__has_allocate_hint_test(declval<_Alloc>(),
        -: 1363:                                          declval<_SizeType>(),
        -: 1364:                                          declval<_ConstVoidPtr>())),
        -: 1365:            true_type>::value>
        -: 1366:{
        -: 1367:};
        -: 1368:
        -: 1369:#else  // _LIBCPP_CXX03_LANG
        -: 1370:
        -: 1371:template <class _Alloc, class _SizeType, class _ConstVoidPtr>
        -: 1372:struct __has_allocate_hint
        -: 1373:    : true_type
        -: 1374:{
        -: 1375:};
        -: 1376:
        -: 1377:#endif  // _LIBCPP_CXX03_LANG
        -: 1378:
        -: 1379:#if !defined(_LIBCPP_CXX03_LANG)
        -: 1380:
        -: 1381:template <class _Alloc, class _Tp, class ..._Args>
        -: 1382:decltype(_VSTD::declval<_Alloc>().construct(_VSTD::declval<_Tp*>(),
        -: 1383:                                           _VSTD::declval<_Args>()...),
        -: 1384:                                           true_type())
        -: 1385:__has_construct_test(_Alloc&& __a, _Tp* __p, _Args&& ...__args);
        -: 1386:
        -: 1387:template <class _Alloc, class _Pointer, class ..._Args>
        -: 1388:false_type
        -: 1389:__has_construct_test(const _Alloc& __a, _Pointer&& __p, _Args&& ...__args);
        -: 1390:
        -: 1391:template <class _Alloc, class _Pointer, class ..._Args>
        -: 1392:struct __has_construct
        -: 1393:    : integral_constant<bool,
        -: 1394:        is_same<
        -: 1395:            decltype(_VSTD::__has_construct_test(declval<_Alloc>(),
        -: 1396:                                          declval<_Pointer>(),
        -: 1397:                                          declval<_Args>()...)),
        -: 1398:            true_type>::value>
        -: 1399:{
        -: 1400:};
        -: 1401:
        -: 1402:template <class _Alloc, class _Pointer>
        -: 1403:auto
        -: 1404:__has_destroy_test(_Alloc&& __a, _Pointer&& __p)
        -: 1405:    -> decltype(__a.destroy(__p), true_type());
        -: 1406:
        -: 1407:template <class _Alloc, class _Pointer>
        -: 1408:auto
        -: 1409:__has_destroy_test(const _Alloc& __a, _Pointer&& __p)
        -: 1410:    -> false_type;
        -: 1411:
        -: 1412:template <class _Alloc, class _Pointer>
        -: 1413:struct __has_destroy
        -: 1414:    : integral_constant<bool,
        -: 1415:        is_same<
        -: 1416:            decltype(_VSTD::__has_destroy_test(declval<_Alloc>(),
        -: 1417:                                        declval<_Pointer>())),
        -: 1418:            true_type>::value>
        -: 1419:{
        -: 1420:};
        -: 1421:
        -: 1422:template <class _Alloc>
        -: 1423:auto
        -: 1424:__has_max_size_test(_Alloc&& __a)
        -: 1425:    -> decltype(__a.max_size(), true_type());
        -: 1426:
        -: 1427:template <class _Alloc>
        -: 1428:auto
        -: 1429:__has_max_size_test(const volatile _Alloc& __a)
        -: 1430:    -> false_type;
        -: 1431:
        -: 1432:template <class _Alloc>
        -: 1433:struct __has_max_size
        -: 1434:    : integral_constant<bool,
        -: 1435:        is_same<
        -: 1436:            decltype(_VSTD::__has_max_size_test(declval<_Alloc&>())),
        -: 1437:            true_type>::value>
        -: 1438:{
        -: 1439:};
        -: 1440:
        -: 1441:template <class _Alloc>
        -: 1442:auto
        -: 1443:__has_select_on_container_copy_construction_test(_Alloc&& __a)
        -: 1444:    -> decltype(__a.select_on_container_copy_construction(), true_type());
        -: 1445:
        -: 1446:template <class _Alloc>
        -: 1447:auto
        -: 1448:__has_select_on_container_copy_construction_test(const volatile _Alloc& __a)
        -: 1449:    -> false_type;
        -: 1450:
        -: 1451:template <class _Alloc>
        -: 1452:struct __has_select_on_container_copy_construction
        -: 1453:    : integral_constant<bool,
        -: 1454:        is_same<
        -: 1455:            decltype(_VSTD::__has_select_on_container_copy_construction_test(declval<_Alloc&>())),
        -: 1456:            true_type>::value>
        -: 1457:{
        -: 1458:};
        -: 1459:
        -: 1460:#else  // _LIBCPP_CXX03_LANG
        -: 1461:
        -: 1462:template <class _Alloc, class _Pointer, class _Tp, class = void>
        -: 1463:struct __has_construct : std::false_type {};
        -: 1464:
        -: 1465:template <class _Alloc, class _Pointer, class _Tp>
        -: 1466:struct __has_construct<_Alloc, _Pointer, _Tp, typename __void_t<
        -: 1467:    decltype(_VSTD::declval<_Alloc>().construct(_VSTD::declval<_Pointer>(), _VSTD::declval<_Tp>()))
        -: 1468:>::type> : std::true_type {};
        -: 1469:
        -: 1470:template <class _Alloc, class _Pointer, class = void>
        -: 1471:struct __has_destroy : false_type {};
        -: 1472:
        -: 1473:template <class _Alloc, class _Pointer>
        -: 1474:struct __has_destroy<_Alloc, _Pointer, typename __void_t<
        -: 1475:    decltype(_VSTD::declval<_Alloc>().destroy(_VSTD::declval<_Pointer>()))
        -: 1476:>::type> : std::true_type {};
        -: 1477:
        -: 1478:template <class _Alloc>
        -: 1479:struct __has_max_size
        -: 1480:    : true_type
        -: 1481:{
        -: 1482:};
        -: 1483:
        -: 1484:template <class _Alloc>
        -: 1485:struct __has_select_on_container_copy_construction
        -: 1486:    : false_type
        -: 1487:{
        -: 1488:};
        -: 1489:
        -: 1490:#endif  // _LIBCPP_CXX03_LANG
        -: 1491:
        -: 1492:template <class _Alloc, class _Ptr, bool = __has_difference_type<_Alloc>::value>
        -: 1493:struct __alloc_traits_difference_type
        -: 1494:{
        -: 1495:    typedef typename pointer_traits<_Ptr>::difference_type type;
        -: 1496:};
        -: 1497:
        -: 1498:template <class _Alloc, class _Ptr>
        -: 1499:struct __alloc_traits_difference_type<_Alloc, _Ptr, true>
        -: 1500:{
        -: 1501:    typedef typename _Alloc::difference_type type;
        -: 1502:};
        -: 1503:
        -: 1504:template <class _Tp>
        -: 1505:struct __is_default_allocator : false_type {};
        -: 1506:
        -: 1507:template <class _Tp>
        -: 1508:struct __is_default_allocator<_VSTD::allocator<_Tp> > : true_type {};
        -: 1509:
        -: 1510:template <class _Alloc>
        -: 1511:struct _LIBCPP_TEMPLATE_VIS allocator_traits
        -: 1512:{
        -: 1513:    typedef _Alloc                              allocator_type;
        -: 1514:    typedef typename allocator_type::value_type value_type;
        -: 1515:
        -: 1516:    typedef typename __pointer_type<value_type, allocator_type>::type pointer;
        -: 1517:    typedef typename __const_pointer<value_type, pointer, allocator_type>::type const_pointer;
        -: 1518:    typedef typename __void_pointer<pointer, allocator_type>::type void_pointer;
        -: 1519:    typedef typename __const_void_pointer<pointer, allocator_type>::type const_void_pointer;
        -: 1520:
        -: 1521:    typedef typename __alloc_traits_difference_type<allocator_type, pointer>::type difference_type;
        -: 1522:    typedef typename __size_type<allocator_type, difference_type>::type size_type;
        -: 1523:
        -: 1524:    typedef typename __propagate_on_container_copy_assignment<allocator_type>::type
        -: 1525:                     propagate_on_container_copy_assignment;
        -: 1526:    typedef typename __propagate_on_container_move_assignment<allocator_type>::type
        -: 1527:                     propagate_on_container_move_assignment;
        -: 1528:    typedef typename __propagate_on_container_swap<allocator_type>::type
        -: 1529:                     propagate_on_container_swap;
        -: 1530:    typedef typename __is_always_equal<allocator_type>::type
        -: 1531:                     is_always_equal;
        -: 1532:
        -: 1533:#ifndef _LIBCPP_CXX03_LANG
        -: 1534:    template <class _Tp> using rebind_alloc =
        -: 1535:                  typename __allocator_traits_rebind<allocator_type, _Tp>::type;
        -: 1536:    template <class _Tp> using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;
        -: 1537:#else  // _LIBCPP_CXX03_LANG
        -: 1538:    template <class _Tp> struct rebind_alloc
        -: 1539:        {typedef typename __allocator_traits_rebind<allocator_type, _Tp>::type other;};
        -: 1540:    template <class _Tp> struct rebind_traits
        -: 1541:        {typedef allocator_traits<typename rebind_alloc<_Tp>::other> other;};
        -: 1542:#endif  // _LIBCPP_CXX03_LANG
        -: 1543:
        -: 1544:    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY
        -: 1545:    static pointer allocate(allocator_type& __a, size_type __n)
    #####: 1546:        {return __a.allocate(__n);}
        -: 1547:    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY
        -: 1548:    static pointer allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)
        -: 1549:        {return __allocate(__a, __n, __hint,
        -: 1550:            __has_allocate_hint<allocator_type, size_type, const_void_pointer>());}
        -: 1551:
        -: 1552:    _LIBCPP_INLINE_VISIBILITY
        -: 1553:    static void deallocate(allocator_type& __a, pointer __p, size_type __n) _NOEXCEPT
    #####: 1554:        {__a.deallocate(__p, __n);}
        -: 1555:
        -: 1556:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 1557:    template <class _Tp, class... _Args>
        -: 1558:        _LIBCPP_INLINE_VISIBILITY
        -: 1559:        static void construct(allocator_type& __a, _Tp* __p, _Args&&... __args)
    #####: 1560:            {__construct(__has_construct<allocator_type, _Tp*, _Args...>(),
    #####: 1561:                         __a, __p, _VSTD::forward<_Args>(__args)...);}
        -: 1562:#else  // _LIBCPP_HAS_NO_VARIADICS
        -: 1563:    template <class _Tp>
        -: 1564:        _LIBCPP_INLINE_VISIBILITY
        -: 1565:        static void construct(allocator_type&, _Tp* __p)
        -: 1566:            {
        -: 1567:                ::new ((void*)__p) _Tp();
        -: 1568:            }
        -: 1569:    template <class _Tp, class _A0>
        -: 1570:        _LIBCPP_INLINE_VISIBILITY
        -: 1571:        static void construct(allocator_type& __a, _Tp* __p, const _A0& __a0)
        -: 1572:            {
        -: 1573:                __construct(__has_construct<allocator_type, _Tp*, const _A0&>(),
        -: 1574:                            __a, __p, __a0);
        -: 1575:            }
        -: 1576:    template <class _Tp, class _A0, class _A1>
        -: 1577:        _LIBCPP_INLINE_VISIBILITY
        -: 1578:        static void construct(allocator_type&, _Tp* __p, const _A0& __a0,
        -: 1579:                              const _A1& __a1)
        -: 1580:            {
        -: 1581:                ::new ((void*)__p) _Tp(__a0, __a1);
        -: 1582:            }
        -: 1583:    template <class _Tp, class _A0, class _A1, class _A2>
        -: 1584:        _LIBCPP_INLINE_VISIBILITY
        -: 1585:        static void construct(allocator_type&, _Tp* __p, const _A0& __a0,
        -: 1586:                              const _A1& __a1, const _A2& __a2)
        -: 1587:            {
        -: 1588:                ::new ((void*)__p) _Tp(__a0, __a1, __a2);
        -: 1589:            }
        -: 1590:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 1591:
        -: 1592:    template <class _Tp>
        -: 1593:        _LIBCPP_INLINE_VISIBILITY
        -: 1594:        static void destroy(allocator_type& __a, _Tp* __p)
    #####: 1595:            {__destroy(__has_destroy<allocator_type, _Tp*>(), __a, __p);}
        -: 1596:
        -: 1597:    _LIBCPP_INLINE_VISIBILITY
        -: 1598:    static size_type max_size(const allocator_type& __a) _NOEXCEPT
    #####: 1599:        {return __max_size(__has_max_size<const allocator_type>(), __a);}
        -: 1600:
        -: 1601:    _LIBCPP_INLINE_VISIBILITY
        -: 1602:    static allocator_type
        -: 1603:        select_on_container_copy_construction(const allocator_type& __a)
    #####: 1604:            {return __select_on_container_copy_construction(
    #####: 1605:                __has_select_on_container_copy_construction<const allocator_type>(),
    #####: 1606:                __a);}
        -: 1607:
        -: 1608:    template <class _Ptr>
        -: 1609:        _LIBCPP_INLINE_VISIBILITY
        -: 1610:        static
        -: 1611:        void
        -: 1612:        __construct_forward(allocator_type& __a, _Ptr __begin1, _Ptr __end1, _Ptr& __begin2)
        -: 1613:        {
    #####: 1614:            for (; __begin1 != __end1; ++__begin1, ++__begin2)
    #####: 1615:                construct(__a, _VSTD::__to_raw_pointer(__begin2), _VSTD::move_if_noexcept(*__begin1));
    #####: 1616:        }
        -: 1617:
        -: 1618:    template <class _Tp>
        -: 1619:        _LIBCPP_INLINE_VISIBILITY
        -: 1620:        static
        -: 1621:        typename enable_if
        -: 1622:        <
        -: 1623:            (__is_default_allocator<allocator_type>::value
        -: 1624:                || !__has_construct<allocator_type, _Tp*, _Tp>::value) &&
        -: 1625:             is_trivially_move_constructible<_Tp>::value,
        -: 1626:            void
        -: 1627:        >::type
        -: 1628:        __construct_forward(allocator_type&, _Tp* __begin1, _Tp* __end1, _Tp*& __begin2)
        -: 1629:        {
        -: 1630:            ptrdiff_t _Np = __end1 - __begin1;
        -: 1631:            if (_Np > 0)
        -: 1632:            {
        -: 1633:                _VSTD::memcpy(__begin2, __begin1, _Np * sizeof(_Tp));
        -: 1634:                __begin2 += _Np;
        -: 1635:            }
        -: 1636:        }
        -: 1637:
        -: 1638:    template <class _Iter, class _Ptr>
        -: 1639:        _LIBCPP_INLINE_VISIBILITY
        -: 1640:        static
        -: 1641:        void
        -: 1642:        __construct_range_forward(allocator_type& __a, _Iter __begin1, _Iter __end1, _Ptr& __begin2)
        -: 1643:        {
    #####: 1644:            for (; __begin1 != __end1; ++__begin1, (void) ++__begin2)
    #####: 1645:                construct(__a, _VSTD::__to_raw_pointer(__begin2), *__begin1);
    #####: 1646:        }
        -: 1647:
        -: 1648:    template <class _SourceTp, class _DestTp,
        -: 1649:              class _RawSourceTp = typename remove_const<_SourceTp>::type,
        -: 1650:              class _RawDestTp = typename remove_const<_DestTp>::type>
        -: 1651:        _LIBCPP_INLINE_VISIBILITY
        -: 1652:        static
        -: 1653:        typename enable_if
        -: 1654:        <
        -: 1655:            is_trivially_move_constructible<_DestTp>::value &&
        -: 1656:            is_same<_RawSourceTp, _RawDestTp>::value &&
        -: 1657:            (__is_default_allocator<allocator_type>::value ||
        -: 1658:             !__has_construct<allocator_type, _DestTp*, _SourceTp&>::value),
        -: 1659:            void
        -: 1660:        >::type
        -: 1661:        __construct_range_forward(allocator_type&, _SourceTp* __begin1, _SourceTp* __end1, _DestTp*& __begin2)
        -: 1662:        {
    #####: 1663:            ptrdiff_t _Np = __end1 - __begin1;
    #####: 1664:            if (_Np > 0)
        -: 1665:            {
    #####: 1666:                _VSTD::memcpy(const_cast<_RawDestTp*>(__begin2), __begin1, _Np * sizeof(_DestTp));
    #####: 1667:                __begin2 += _Np;
    #####: 1668:            }
    #####: 1669:        }
        -: 1670:
        -: 1671:    template <class _Ptr>
        -: 1672:        _LIBCPP_INLINE_VISIBILITY
        -: 1673:        static
        -: 1674:        void
        -: 1675:        __construct_backward(allocator_type& __a, _Ptr __begin1, _Ptr __end1, _Ptr& __end2)
        -: 1676:        {
    #####: 1677:            while (__end1 != __begin1)
        -: 1678:            {
    #####: 1679:                construct(__a, _VSTD::__to_raw_pointer(__end2-1), _VSTD::move_if_noexcept(*--__end1));
    #####: 1680:                --__end2;
        -: 1681:            }
    #####: 1682:        }
        -: 1683:
        -: 1684:    template <class _Tp>
        -: 1685:        _LIBCPP_INLINE_VISIBILITY
        -: 1686:        static
        -: 1687:        typename enable_if
        -: 1688:        <
        -: 1689:            (__is_default_allocator<allocator_type>::value
        -: 1690:                || !__has_construct<allocator_type, _Tp*, _Tp>::value) &&
        -: 1691:             is_trivially_move_constructible<_Tp>::value,
        -: 1692:            void
        -: 1693:        >::type
        -: 1694:        __construct_backward(allocator_type&, _Tp* __begin1, _Tp* __end1, _Tp*& __end2)
        -: 1695:        {
    #####: 1696:            ptrdiff_t _Np = __end1 - __begin1;
    #####: 1697:            __end2 -= _Np;
    #####: 1698:            if (_Np > 0)
    #####: 1699:                _VSTD::memcpy(__end2, __begin1, _Np * sizeof(_Tp));
    #####: 1700:        }
        -: 1701:
        -: 1702:private:
        -: 1703:
        -: 1704:    _LIBCPP_INLINE_VISIBILITY
        -: 1705:    static pointer __allocate(allocator_type& __a, size_type __n,
        -: 1706:        const_void_pointer __hint, true_type)
        -: 1707:        {return __a.allocate(__n, __hint);}
        -: 1708:    _LIBCPP_INLINE_VISIBILITY
        -: 1709:    static pointer __allocate(allocator_type& __a, size_type __n,
        -: 1710:        const_void_pointer, false_type)
        -: 1711:        {return __a.allocate(__n);}
        -: 1712:
        -: 1713:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 1714:    template <class _Tp, class... _Args>
        -: 1715:        _LIBCPP_INLINE_VISIBILITY
        -: 1716:        static void __construct(true_type, allocator_type& __a, _Tp* __p, _Args&&... __args)
    #####: 1717:            {__a.construct(__p, _VSTD::forward<_Args>(__args)...);}
        -: 1718:    template <class _Tp, class... _Args>
        -: 1719:        _LIBCPP_INLINE_VISIBILITY
        -: 1720:        static void __construct(false_type, allocator_type&, _Tp* __p, _Args&&... __args)
        -: 1721:            {
        -: 1722:                ::new ((void*)__p) _Tp(_VSTD::forward<_Args>(__args)...);
        -: 1723:            }
        -: 1724:#else  // _LIBCPP_HAS_NO_VARIADICS
        -: 1725:    template <class _Tp, class _A0>
        -: 1726:        _LIBCPP_INLINE_VISIBILITY
        -: 1727:        static void __construct(true_type, allocator_type& __a, _Tp* __p,
        -: 1728:                                const _A0& __a0)
        -: 1729:            {__a.construct(__p, __a0);}
        -: 1730:    template <class _Tp, class _A0>
        -: 1731:        _LIBCPP_INLINE_VISIBILITY
        -: 1732:        static void __construct(false_type, allocator_type&, _Tp* __p,
        -: 1733:                                const _A0& __a0)
        -: 1734:            {
        -: 1735:                ::new ((void*)__p) _Tp(__a0);
        -: 1736:            }
        -: 1737:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 1738:
        -: 1739:    template <class _Tp>
        -: 1740:        _LIBCPP_INLINE_VISIBILITY
        -: 1741:        static void __destroy(true_type, allocator_type& __a, _Tp* __p)
    #####: 1742:            {__a.destroy(__p);}
        -: 1743:    template <class _Tp>
        -: 1744:        _LIBCPP_INLINE_VISIBILITY
        -: 1745:        static void __destroy(false_type, allocator_type&, _Tp* __p)
        -: 1746:            {
    #####: 1747:                __p->~_Tp();
    #####: 1748:            }
        -: 1749:
        -: 1750:    _LIBCPP_INLINE_VISIBILITY
        -: 1751:    static size_type __max_size(true_type, const allocator_type& __a) _NOEXCEPT
    #####: 1752:            {return __a.max_size();}
        -: 1753:    _LIBCPP_INLINE_VISIBILITY
        -: 1754:    static size_type __max_size(false_type, const allocator_type&) _NOEXCEPT
        -: 1755:            {return numeric_limits<size_type>::max() / sizeof(value_type);}
        -: 1756:
        -: 1757:    _LIBCPP_INLINE_VISIBILITY
        -: 1758:    static allocator_type
        -: 1759:        __select_on_container_copy_construction(true_type, const allocator_type& __a)
        -: 1760:            {return __a.select_on_container_copy_construction();}
        -: 1761:    _LIBCPP_INLINE_VISIBILITY
        -: 1762:    static allocator_type
        -: 1763:        __select_on_container_copy_construction(false_type, const allocator_type& __a)
    #####: 1764:            {return __a;}
        -: 1765:};
        -: 1766:
        -: 1767:template <class _Traits, class _Tp>
        -: 1768:struct __rebind_alloc_helper
        -: 1769:{
        -: 1770:#ifndef _LIBCPP_CXX03_LANG
        -: 1771:    typedef typename _Traits::template rebind_alloc<_Tp>        type;
        -: 1772:#else
        -: 1773:    typedef typename _Traits::template rebind_alloc<_Tp>::other type;
        -: 1774:#endif
        -: 1775:};
        -: 1776:
        -: 1777:// allocator
        -: 1778:
        -: 1779:template <class _Tp>
        -: 1780:class _LIBCPP_TEMPLATE_VIS allocator
        -: 1781:{
        -: 1782:public:
        -: 1783:    typedef size_t            size_type;
        -: 1784:    typedef ptrdiff_t         difference_type;
        -: 1785:    typedef _Tp*              pointer;
        -: 1786:    typedef const _Tp*        const_pointer;
        -: 1787:    typedef _Tp&              reference;
        -: 1788:    typedef const _Tp&        const_reference;
        -: 1789:    typedef _Tp               value_type;
        -: 1790:
        -: 1791:    typedef true_type propagate_on_container_move_assignment;
        -: 1792:    typedef true_type is_always_equal;
        -: 1793:
        -: 1794:    template <class _Up> struct rebind {typedef allocator<_Up> other;};
        -: 1795:
        -: 1796:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
    #####: 1797:    allocator() _NOEXCEPT {}
        -: 1798:
        -: 1799:    template <class _Up> 
        -: 1800:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
    #####: 1801:    allocator(const allocator<_Up>&) _NOEXCEPT {}
        -: 1802:
        -: 1803:    _LIBCPP_INLINE_VISIBILITY pointer address(reference __x) const _NOEXCEPT
        -: 1804:        {return _VSTD::addressof(__x);}
        -: 1805:    _LIBCPP_INLINE_VISIBILITY const_pointer address(const_reference __x) const _NOEXCEPT
        -: 1806:        {return _VSTD::addressof(__x);}
        -: 1807:    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY 
        -: 1808:    pointer allocate(size_type __n, allocator<void>::const_pointer = 0)
        -: 1809:        {
    #####: 1810:        if (__n > max_size())
    #####: 1811:            __throw_length_error("allocator<T>::allocate(size_t n)"
        -: 1812:                                 " 'n' exceeds maximum supported size");
    #####: 1813:        return static_cast<pointer>(_VSTD::__libcpp_allocate(__n * sizeof(_Tp), __alignof(_Tp)));
        -: 1814:        }
        -: 1815:    _LIBCPP_INLINE_VISIBILITY void deallocate(pointer __p, size_type) _NOEXCEPT
    #####: 1816:        {_VSTD::__libcpp_deallocate((void*)__p, __alignof(_Tp));}
        -: 1817:    _LIBCPP_INLINE_VISIBILITY size_type max_size() const _NOEXCEPT
    #####: 1818:        {return size_type(~0) / sizeof(_Tp);}
        -: 1819:#if !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) && !defined(_LIBCPP_HAS_NO_VARIADICS)
        -: 1820:    template <class _Up, class... _Args>
        -: 1821:        _LIBCPP_INLINE_VISIBILITY
        -: 1822:        void
        -: 1823:        construct(_Up* __p, _Args&&... __args)
        -: 1824:        {
    #####: 1825:            ::new((void*)__p) _Up(_VSTD::forward<_Args>(__args)...);
    #####: 1826:        }
        -: 1827:#else  // !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) && !defined(_LIBCPP_HAS_NO_VARIADICS)
        -: 1828:        _LIBCPP_INLINE_VISIBILITY
        -: 1829:        void
        -: 1830:        construct(pointer __p)
        -: 1831:        {
        -: 1832:            ::new((void*)__p) _Tp();
        -: 1833:        }
        -: 1834:# if defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 1835:
        -: 1836:    template <class _A0>
        -: 1837:        _LIBCPP_INLINE_VISIBILITY
        -: 1838:        void
        -: 1839:        construct(pointer __p, _A0& __a0)
        -: 1840:        {
        -: 1841:            ::new((void*)__p) _Tp(__a0);
        -: 1842:        }
        -: 1843:    template <class _A0>
        -: 1844:        _LIBCPP_INLINE_VISIBILITY
        -: 1845:        void
        -: 1846:        construct(pointer __p, const _A0& __a0)
        -: 1847:        {
        -: 1848:            ::new((void*)__p) _Tp(__a0);
        -: 1849:        }
        -: 1850:# endif  // defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 1851:    template <class _A0, class _A1>
        -: 1852:        _LIBCPP_INLINE_VISIBILITY
        -: 1853:        void
        -: 1854:        construct(pointer __p, _A0& __a0, _A1& __a1)
        -: 1855:        {
        -: 1856:            ::new((void*)__p) _Tp(__a0, __a1);
        -: 1857:        }
        -: 1858:    template <class _A0, class _A1>
        -: 1859:        _LIBCPP_INLINE_VISIBILITY
        -: 1860:        void
        -: 1861:        construct(pointer __p, const _A0& __a0, _A1& __a1)
        -: 1862:        {
        -: 1863:            ::new((void*)__p) _Tp(__a0, __a1);
        -: 1864:        }
        -: 1865:    template <class _A0, class _A1>
        -: 1866:        _LIBCPP_INLINE_VISIBILITY
        -: 1867:        void
        -: 1868:        construct(pointer __p, _A0& __a0, const _A1& __a1)
        -: 1869:        {
        -: 1870:            ::new((void*)__p) _Tp(__a0, __a1);
        -: 1871:        }
        -: 1872:    template <class _A0, class _A1>
        -: 1873:        _LIBCPP_INLINE_VISIBILITY
        -: 1874:        void
        -: 1875:        construct(pointer __p, const _A0& __a0, const _A1& __a1)
        -: 1876:        {
        -: 1877:            ::new((void*)__p) _Tp(__a0, __a1);
        -: 1878:        }
        -: 1879:#endif  // !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) && !defined(_LIBCPP_HAS_NO_VARIADICS)
    #####: 1880:    _LIBCPP_INLINE_VISIBILITY void destroy(pointer __p) {__p->~_Tp();}
        -: 1881:};
        -: 1882:
        -: 1883:template <class _Tp>
        -: 1884:class _LIBCPP_TEMPLATE_VIS allocator<const _Tp>
        -: 1885:{
        -: 1886:public:
        -: 1887:    typedef size_t            size_type;
        -: 1888:    typedef ptrdiff_t         difference_type;
        -: 1889:    typedef const _Tp*        pointer;
        -: 1890:    typedef const _Tp*        const_pointer;
        -: 1891:    typedef const _Tp&        reference;
        -: 1892:    typedef const _Tp&        const_reference;
        -: 1893:    typedef const _Tp         value_type;
        -: 1894:
        -: 1895:    typedef true_type propagate_on_container_move_assignment;
        -: 1896:    typedef true_type is_always_equal;
        -: 1897:
        -: 1898:    template <class _Up> struct rebind {typedef allocator<_Up> other;};
        -: 1899:
        -: 1900:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
        -: 1901:    allocator() _NOEXCEPT {}
        -: 1902:
        -: 1903:    template <class _Up>
        -: 1904:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 
        -: 1905:    allocator(const allocator<_Up>&) _NOEXCEPT {}
        -: 1906:
        -: 1907:    _LIBCPP_INLINE_VISIBILITY const_pointer address(const_reference __x) const _NOEXCEPT
        -: 1908:        {return _VSTD::addressof(__x);}
        -: 1909:    _LIBCPP_INLINE_VISIBILITY pointer allocate(size_type __n, allocator<void>::const_pointer = 0)
        -: 1910:    {
        -: 1911:        if (__n > max_size())
        -: 1912:            __throw_length_error("allocator<const T>::allocate(size_t n)"
        -: 1913:                                 " 'n' exceeds maximum supported size");
        -: 1914:        return static_cast<pointer>(_VSTD::__libcpp_allocate(__n * sizeof(_Tp), __alignof(_Tp)));
        -: 1915:    }
        -: 1916:    _LIBCPP_INLINE_VISIBILITY void deallocate(pointer __p, size_type) _NOEXCEPT
        -: 1917:        {_VSTD::__libcpp_deallocate((void*) const_cast<_Tp *>(__p), __alignof(_Tp));}
        -: 1918:    _LIBCPP_INLINE_VISIBILITY size_type max_size() const _NOEXCEPT
        -: 1919:        {return size_type(~0) / sizeof(_Tp);}
        -: 1920:#if !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) && !defined(_LIBCPP_HAS_NO_VARIADICS)
        -: 1921:    template <class _Up, class... _Args>
        -: 1922:        _LIBCPP_INLINE_VISIBILITY
        -: 1923:        void
        -: 1924:        construct(_Up* __p, _Args&&... __args)
        -: 1925:        {
        -: 1926:            ::new((void*)__p) _Up(_VSTD::forward<_Args>(__args)...);
        -: 1927:        }
        -: 1928:#else  // !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) && !defined(_LIBCPP_HAS_NO_VARIADICS)
        -: 1929:        _LIBCPP_INLINE_VISIBILITY
        -: 1930:        void
        -: 1931:        construct(pointer __p)
        -: 1932:        {
        -: 1933:            ::new((void*) const_cast<_Tp *>(__p)) _Tp();
        -: 1934:        }
        -: 1935:# if defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 1936:
        -: 1937:    template <class _A0>
        -: 1938:        _LIBCPP_INLINE_VISIBILITY
        -: 1939:        void
        -: 1940:        construct(pointer __p, _A0& __a0)
        -: 1941:        {
        -: 1942:            ::new((void*) const_cast<_Tp *>(__p)) _Tp(__a0);
        -: 1943:        }
        -: 1944:    template <class _A0>
        -: 1945:        _LIBCPP_INLINE_VISIBILITY
        -: 1946:        void
        -: 1947:        construct(pointer __p, const _A0& __a0)
        -: 1948:        {
        -: 1949:            ::new((void*) const_cast<_Tp *>(__p)) _Tp(__a0);
        -: 1950:        }
        -: 1951:# endif  // defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 1952:    template <class _A0, class _A1>
        -: 1953:        _LIBCPP_INLINE_VISIBILITY
        -: 1954:        void
        -: 1955:        construct(pointer __p, _A0& __a0, _A1& __a1)
        -: 1956:        {
        -: 1957:            ::new((void*) const_cast<_Tp *>(__p)) _Tp(__a0, __a1);
        -: 1958:        }
        -: 1959:    template <class _A0, class _A1>
        -: 1960:        _LIBCPP_INLINE_VISIBILITY
        -: 1961:        void
        -: 1962:        construct(pointer __p, const _A0& __a0, _A1& __a1)
        -: 1963:        {
        -: 1964:            ::new((void*) const_cast<_Tp *>(__p)) _Tp(__a0, __a1);
        -: 1965:        }
        -: 1966:    template <class _A0, class _A1>
        -: 1967:        _LIBCPP_INLINE_VISIBILITY
        -: 1968:        void
        -: 1969:        construct(pointer __p, _A0& __a0, const _A1& __a1)
        -: 1970:        {
        -: 1971:            ::new((void*) const_cast<_Tp *>(__p)) _Tp(__a0, __a1);
        -: 1972:        }
        -: 1973:    template <class _A0, class _A1>
        -: 1974:        _LIBCPP_INLINE_VISIBILITY
        -: 1975:        void
        -: 1976:        construct(pointer __p, const _A0& __a0, const _A1& __a1)
        -: 1977:        {
        -: 1978:            ::new((void*) const_cast<_Tp *>(__p)) _Tp(__a0, __a1);
        -: 1979:        }
        -: 1980:#endif  // !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) && !defined(_LIBCPP_HAS_NO_VARIADICS)
        -: 1981:    _LIBCPP_INLINE_VISIBILITY void destroy(pointer __p) {__p->~_Tp();}
        -: 1982:};
        -: 1983:
        -: 1984:template <class _Tp, class _Up>
        -: 1985:inline _LIBCPP_INLINE_VISIBILITY
        -: 1986:bool operator==(const allocator<_Tp>&, const allocator<_Up>&) _NOEXCEPT {return true;}
        -: 1987:
        -: 1988:template <class _Tp, class _Up>
        -: 1989:inline _LIBCPP_INLINE_VISIBILITY
        -: 1990:bool operator!=(const allocator<_Tp>&, const allocator<_Up>&) _NOEXCEPT {return false;}
        -: 1991:
        -: 1992:template <class _OutputIterator, class _Tp>
        -: 1993:class _LIBCPP_TEMPLATE_VIS raw_storage_iterator
        -: 1994:    : public iterator<output_iterator_tag,
        -: 1995:                      _Tp,                                         // purposefully not C++03
        -: 1996:                      ptrdiff_t,                                   // purposefully not C++03
        -: 1997:                      _Tp*,                                        // purposefully not C++03
        -: 1998:                      raw_storage_iterator<_OutputIterator, _Tp>&> // purposefully not C++03
        -: 1999:{
        -: 2000:private:
        -: 2001:    _OutputIterator __x_;
        -: 2002:public:
        -: 2003:    _LIBCPP_INLINE_VISIBILITY explicit raw_storage_iterator(_OutputIterator __x) : __x_(__x) {}
        -: 2004:    _LIBCPP_INLINE_VISIBILITY raw_storage_iterator& operator*() {return *this;}
        -: 2005:    _LIBCPP_INLINE_VISIBILITY raw_storage_iterator& operator=(const _Tp& __element)
        -: 2006:        {::new(_VSTD::addressof(*__x_)) _Tp(__element); return *this;}
        -: 2007:#if _LIBCPP_STD_VER >= 14
        -: 2008:    _LIBCPP_INLINE_VISIBILITY raw_storage_iterator& operator=(_Tp&& __element)
        -: 2009:        {::new(_VSTD::addressof(*__x_)) _Tp(_VSTD::move(__element)); return *this;}
        -: 2010:#endif
        -: 2011:    _LIBCPP_INLINE_VISIBILITY raw_storage_iterator& operator++() {++__x_; return *this;}
        -: 2012:    _LIBCPP_INLINE_VISIBILITY raw_storage_iterator  operator++(int)
        -: 2013:        {raw_storage_iterator __t(*this); ++__x_; return __t;}
        -: 2014:#if _LIBCPP_STD_VER >= 14
        -: 2015:    _LIBCPP_INLINE_VISIBILITY _OutputIterator base() const { return __x_; }
        -: 2016:#endif
        -: 2017:};
        -: 2018:
        -: 2019:template <class _Tp>
        -: 2020:_LIBCPP_NO_CFI
        -: 2021:pair<_Tp*, ptrdiff_t>
        -: 2022:get_temporary_buffer(ptrdiff_t __n) _NOEXCEPT
        -: 2023:{
        -: 2024:    pair<_Tp*, ptrdiff_t> __r(0, 0);
        -: 2025:    const ptrdiff_t __m = (~ptrdiff_t(0) ^
        -: 2026:                           ptrdiff_t(ptrdiff_t(1) << (sizeof(ptrdiff_t) * __CHAR_BIT__ - 1)))
        -: 2027:                           / sizeof(_Tp);
        -: 2028:    if (__n > __m)
        -: 2029:        __n = __m;
        -: 2030:    while (__n > 0)
        -: 2031:    {
        -: 2032:#if !defined(_LIBCPP_HAS_NO_ALIGNED_ALLOCATION)
        -: 2033:    if (__is_overaligned_for_new(__alignof(_Tp)))
        -: 2034:        {
        -: 2035:            std::align_val_t __al =
        -: 2036:                std::align_val_t(std::alignment_of<_Tp>::value);
        -: 2037:            __r.first = static_cast<_Tp*>(::operator new(
        -: 2038:                __n * sizeof(_Tp), __al, nothrow));
        -: 2039:        } else {
        -: 2040:            __r.first = static_cast<_Tp*>(::operator new(
        -: 2041:                __n * sizeof(_Tp), nothrow));
        -: 2042:        }
        -: 2043:#else
        -: 2044:    if (__is_overaligned_for_new(__alignof(_Tp)))
        -: 2045:        {
        -: 2046:            // Since aligned operator new is unavailable, return an empty
        -: 2047:            // buffer rather than one with invalid alignment.
        -: 2048:            return __r;
        -: 2049:        }
        -: 2050:
        -: 2051:        __r.first = static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), nothrow));
        -: 2052:#endif
        -: 2053:
        -: 2054:        if (__r.first)
        -: 2055:        {
        -: 2056:            __r.second = __n;
        -: 2057:            break;
        -: 2058:        }
        -: 2059:        __n /= 2;
        -: 2060:    }
        -: 2061:    return __r;
        -: 2062:}
        -: 2063:
        -: 2064:template <class _Tp>
        -: 2065:inline _LIBCPP_INLINE_VISIBILITY
        -: 2066:void return_temporary_buffer(_Tp* __p) _NOEXCEPT
        -: 2067:{
        -: 2068:  _VSTD::__libcpp_deallocate((void*)__p, __alignof(_Tp));
        -: 2069:}
        -: 2070:
        -: 2071:#if _LIBCPP_STD_VER <= 14 || defined(_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR)
        -: 2072:template <class _Tp>
        -: 2073:struct auto_ptr_ref
        -: 2074:{
        -: 2075:    _Tp* __ptr_;
        -: 2076:};
        -: 2077:
        -: 2078:template<class _Tp>
        -: 2079:class _LIBCPP_TEMPLATE_VIS auto_ptr
        -: 2080:{
        -: 2081:private:
        -: 2082:    _Tp* __ptr_;
        -: 2083:public:
        -: 2084:    typedef _Tp element_type;
        -: 2085:
        -: 2086:    _LIBCPP_INLINE_VISIBILITY explicit auto_ptr(_Tp* __p = 0) throw() : __ptr_(__p) {}
        -: 2087:    _LIBCPP_INLINE_VISIBILITY auto_ptr(auto_ptr& __p) throw() : __ptr_(__p.release()) {}
        -: 2088:    template<class _Up> _LIBCPP_INLINE_VISIBILITY auto_ptr(auto_ptr<_Up>& __p) throw()
        -: 2089:        : __ptr_(__p.release()) {}
        -: 2090:    _LIBCPP_INLINE_VISIBILITY auto_ptr& operator=(auto_ptr& __p) throw()
        -: 2091:        {reset(__p.release()); return *this;}
        -: 2092:    template<class _Up> _LIBCPP_INLINE_VISIBILITY auto_ptr& operator=(auto_ptr<_Up>& __p) throw()
        -: 2093:        {reset(__p.release()); return *this;}
        -: 2094:    _LIBCPP_INLINE_VISIBILITY auto_ptr& operator=(auto_ptr_ref<_Tp> __p) throw()
        -: 2095:        {reset(__p.__ptr_); return *this;}
        -: 2096:    _LIBCPP_INLINE_VISIBILITY ~auto_ptr() throw() {delete __ptr_;}
        -: 2097:
        -: 2098:    _LIBCPP_INLINE_VISIBILITY _Tp& operator*() const throw()
        -: 2099:        {return *__ptr_;}
        -: 2100:    _LIBCPP_INLINE_VISIBILITY _Tp* operator->() const throw() {return __ptr_;}
        -: 2101:    _LIBCPP_INLINE_VISIBILITY _Tp* get() const throw() {return __ptr_;}
        -: 2102:    _LIBCPP_INLINE_VISIBILITY _Tp* release() throw()
        -: 2103:    {
        -: 2104:        _Tp* __t = __ptr_;
        -: 2105:        __ptr_ = 0;
        -: 2106:        return __t;
        -: 2107:    }
        -: 2108:    _LIBCPP_INLINE_VISIBILITY void reset(_Tp* __p = 0) throw()
        -: 2109:    {
        -: 2110:        if (__ptr_ != __p)
        -: 2111:            delete __ptr_;
        -: 2112:        __ptr_ = __p;
        -: 2113:    }
        -: 2114:
        -: 2115:    _LIBCPP_INLINE_VISIBILITY auto_ptr(auto_ptr_ref<_Tp> __p) throw() : __ptr_(__p.__ptr_) {}
        -: 2116:    template<class _Up> _LIBCPP_INLINE_VISIBILITY operator auto_ptr_ref<_Up>() throw()
        -: 2117:        {auto_ptr_ref<_Up> __t; __t.__ptr_ = release(); return __t;}
        -: 2118:    template<class _Up> _LIBCPP_INLINE_VISIBILITY operator auto_ptr<_Up>() throw()
        -: 2119:        {return auto_ptr<_Up>(release());}
        -: 2120:};
        -: 2121:
        -: 2122:template <>
        -: 2123:class _LIBCPP_TEMPLATE_VIS auto_ptr<void>
        -: 2124:{
        -: 2125:public:
        -: 2126:    typedef void element_type;
        -: 2127:};
        -: 2128:#endif
        -: 2129:
        -: 2130:template <class _Tp, int _Idx,
        -: 2131:          bool _CanBeEmptyBase =
        -: 2132:              is_empty<_Tp>::value && !__libcpp_is_final<_Tp>::value>
    #####: 2133:struct __compressed_pair_elem {
        -: 2134:  typedef _Tp _ParamT;
        -: 2135:  typedef _Tp& reference;
        -: 2136:  typedef const _Tp& const_reference;
        -: 2137:
        -: 2138:#ifndef _LIBCPP_CXX03_LANG
    #####: 2139:  _LIBCPP_INLINE_VISIBILITY constexpr __compressed_pair_elem() : __value_() {}
        -: 2140:
        -: 2141:  template <class _Up, class = typename enable_if<
        -: 2142:      !is_same<__compressed_pair_elem, typename decay<_Up>::type>::value
        -: 2143:  >::type>
        -: 2144:  _LIBCPP_INLINE_VISIBILITY
        -: 2145:  constexpr explicit
        -: 2146:  __compressed_pair_elem(_Up&& __u)
    #####: 2147:      : __value_(_VSTD::forward<_Up>(__u)){};
        -: 2148:
        -: 2149:  template <class... _Args, size_t... _Indexes>
        -: 2150:  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 2151:  __compressed_pair_elem(piecewise_construct_t, tuple<_Args...> __args,
        -: 2152:                         __tuple_indices<_Indexes...>)
    #####: 2153:      : __value_(_VSTD::forward<_Args>(_VSTD::get<_Indexes>(__args))...) {}
        -: 2154:#else
        -: 2155:  _LIBCPP_INLINE_VISIBILITY __compressed_pair_elem() : __value_() {}
        -: 2156:  _LIBCPP_INLINE_VISIBILITY
        -: 2157:  __compressed_pair_elem(_ParamT __p) : __value_(std::forward<_ParamT>(__p)) {}
        -: 2158:#endif
        -: 2159:
    #####: 2160:  _LIBCPP_INLINE_VISIBILITY reference __get() _NOEXCEPT { return __value_; }
        -: 2161:  _LIBCPP_INLINE_VISIBILITY
    #####: 2162:  const_reference __get() const _NOEXCEPT { return __value_; }
        -: 2163:
        -: 2164:private:
        -: 2165:  _Tp __value_;
        -: 2166:};
        -: 2167:
        -: 2168:template <class _Tp, int _Idx>
        -: 2169:struct __compressed_pair_elem<_Tp, _Idx, true> : private _Tp {
        -: 2170:  typedef _Tp _ParamT;
        -: 2171:  typedef _Tp& reference;
        -: 2172:  typedef const _Tp& const_reference;
        -: 2173:  typedef _Tp __value_type;
        -: 2174:
        -: 2175:#ifndef _LIBCPP_CXX03_LANG
    #####: 2176:  _LIBCPP_INLINE_VISIBILITY constexpr __compressed_pair_elem() = default;
        -: 2177:
        -: 2178:  template <class _Up, class = typename enable_if<
        -: 2179:        !is_same<__compressed_pair_elem, typename decay<_Up>::type>::value
        -: 2180:  >::type>
        -: 2181:  _LIBCPP_INLINE_VISIBILITY
        -: 2182:  constexpr explicit
        -: 2183:  __compressed_pair_elem(_Up&& __u)
    #####: 2184:      : __value_type(_VSTD::forward<_Up>(__u)){};
        -: 2185:
        -: 2186:  template <class... _Args, size_t... _Indexes>
        -: 2187:  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 2188:  __compressed_pair_elem(piecewise_construct_t, tuple<_Args...> __args,
        -: 2189:                         __tuple_indices<_Indexes...>)
    #####: 2190:      : __value_type(_VSTD::forward<_Args>(_VSTD::get<_Indexes>(__args))...) {}
        -: 2191:#else
        -: 2192:  _LIBCPP_INLINE_VISIBILITY __compressed_pair_elem() : __value_type() {}
        -: 2193:  _LIBCPP_INLINE_VISIBILITY
        -: 2194:  __compressed_pair_elem(_ParamT __p)
        -: 2195:      : __value_type(std::forward<_ParamT>(__p)) {}
        -: 2196:#endif
        -: 2197:
    #####: 2198:  _LIBCPP_INLINE_VISIBILITY reference __get() _NOEXCEPT { return *this; }
        -: 2199:  _LIBCPP_INLINE_VISIBILITY
    #####: 2200:  const_reference __get() const _NOEXCEPT { return *this; }
        -: 2201:};
        -: 2202:
        -: 2203:// Tag used to construct the second element of the compressed pair.
        -: 2204:struct __second_tag {};
        -: 2205:
        -: 2206:template <class _T1, class _T2>
    #####: 2207:class __compressed_pair : private __compressed_pair_elem<_T1, 0>,
        -: 2208:                          private __compressed_pair_elem<_T2, 1> {
        -: 2209:  typedef __compressed_pair_elem<_T1, 0> _Base1;
        -: 2210:  typedef __compressed_pair_elem<_T2, 1> _Base2;
        -: 2211:
        -: 2212:  // NOTE: This static assert should never fire because __compressed_pair
        -: 2213:  // is *almost never* used in a scenario where it's possible for T1 == T2.
        -: 2214:  // (The exception is std::function where it is possible that the function
        -: 2215:  //  object and the allocator have the same type).
        -: 2216:  static_assert((!is_same<_T1, _T2>::value),
        -: 2217:    "__compressed_pair cannot be instantated when T1 and T2 are the same type; "
        -: 2218:    "The current implementation is NOT ABI-compatible with the previous "
        -: 2219:    "implementation for this configuration");
        -: 2220:
        -: 2221:public:
        -: 2222:#ifndef _LIBCPP_CXX03_LANG
        -: 2223:  template <bool _Dummy = true,
        -: 2224:      class = typename enable_if<
        -: 2225:          __dependent_type<is_default_constructible<_T1>, _Dummy>::value &&
        -: 2226:          __dependent_type<is_default_constructible<_T2>, _Dummy>::value
        -: 2227:      >::type
        -: 2228:  >
        -: 2229:  _LIBCPP_INLINE_VISIBILITY
    #####: 2230:  constexpr __compressed_pair() {}
        -: 2231:
        -: 2232:  template <class _Tp, typename enable_if<!is_same<typename decay<_Tp>::type,
        -: 2233:                                                   __compressed_pair>::value,
        -: 2234:                                          bool>::type = true>
        -: 2235:  _LIBCPP_INLINE_VISIBILITY constexpr explicit
        -: 2236:  __compressed_pair(_Tp&& __t)
    #####: 2237:      : _Base1(std::forward<_Tp>(__t)), _Base2() {}
        -: 2238:
        -: 2239:  template <class _Tp>
        -: 2240:  _LIBCPP_INLINE_VISIBILITY constexpr
        -: 2241:  __compressed_pair(__second_tag, _Tp&& __t)
    #####: 2242:      : _Base1(), _Base2(std::forward<_Tp>(__t)) {}
        -: 2243:
        -: 2244:  template <class _U1, class _U2>
        -: 2245:  _LIBCPP_INLINE_VISIBILITY constexpr
        -: 2246:  __compressed_pair(_U1&& __t1, _U2&& __t2)
    #####: 2247:      : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2)) {}
        -: 2248:
        -: 2249:  template <class... _Args1, class... _Args2>
        -: 2250:  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 2251:  __compressed_pair(piecewise_construct_t __pc, tuple<_Args1...> __first_args,
        -: 2252:                    tuple<_Args2...> __second_args)
    #####: 2253:      : _Base1(__pc, _VSTD::move(__first_args),
        -: 2254:               typename __make_tuple_indices<sizeof...(_Args1)>::type()),
    #####: 2255:        _Base2(__pc, _VSTD::move(__second_args),
    #####: 2256:               typename __make_tuple_indices<sizeof...(_Args2)>::type()) {}
        -: 2257:
        -: 2258:#else
        -: 2259:  _LIBCPP_INLINE_VISIBILITY
        -: 2260:  __compressed_pair() {}
        -: 2261:
        -: 2262:  _LIBCPP_INLINE_VISIBILITY explicit
        -: 2263:  __compressed_pair(_T1 __t1) : _Base1(_VSTD::forward<_T1>(__t1)) {}
        -: 2264:
        -: 2265:  _LIBCPP_INLINE_VISIBILITY
        -: 2266:  __compressed_pair(__second_tag, _T2 __t2)
        -: 2267:      : _Base1(), _Base2(_VSTD::forward<_T2>(__t2)) {}
        -: 2268:
        -: 2269:  _LIBCPP_INLINE_VISIBILITY
        -: 2270:  __compressed_pair(_T1 __t1, _T2 __t2)
        -: 2271:      : _Base1(_VSTD::forward<_T1>(__t1)), _Base2(_VSTD::forward<_T2>(__t2)) {}
        -: 2272:#endif
        -: 2273:
        -: 2274:  _LIBCPP_INLINE_VISIBILITY
        -: 2275:  typename _Base1::reference first() _NOEXCEPT {
    #####: 2276:    return static_cast<_Base1&>(*this).__get();
        -: 2277:  }
        -: 2278:
        -: 2279:  _LIBCPP_INLINE_VISIBILITY
        -: 2280:  typename _Base1::const_reference first() const _NOEXCEPT {
    #####: 2281:    return static_cast<_Base1 const&>(*this).__get();
        -: 2282:  }
        -: 2283:
        -: 2284:  _LIBCPP_INLINE_VISIBILITY
        -: 2285:  typename _Base2::reference second() _NOEXCEPT {
    #####: 2286:    return static_cast<_Base2&>(*this).__get();
        -: 2287:  }
        -: 2288:
        -: 2289:  _LIBCPP_INLINE_VISIBILITY
        -: 2290:  typename _Base2::const_reference second() const _NOEXCEPT {
    #####: 2291:    return static_cast<_Base2 const&>(*this).__get();
        -: 2292:  }
        -: 2293:
        -: 2294:  _LIBCPP_INLINE_VISIBILITY
        -: 2295:  void swap(__compressed_pair& __x)
        -: 2296:    _NOEXCEPT_(__is_nothrow_swappable<_T1>::value &&
        -: 2297:               __is_nothrow_swappable<_T2>::value)
        -: 2298:  {
        -: 2299:    using std::swap;
        -: 2300:    swap(first(), __x.first());
        -: 2301:    swap(second(), __x.second());
        -: 2302:  }
        -: 2303:};
        -: 2304:
        -: 2305:template <class _T1, class _T2>
        -: 2306:inline _LIBCPP_INLINE_VISIBILITY
        -: 2307:void swap(__compressed_pair<_T1, _T2>& __x, __compressed_pair<_T1, _T2>& __y)
        -: 2308:    _NOEXCEPT_(__is_nothrow_swappable<_T1>::value &&
        -: 2309:               __is_nothrow_swappable<_T2>::value) {
        -: 2310:  __x.swap(__y);
        -: 2311:}
        -: 2312:
        -: 2313:// default_delete
        -: 2314:
        -: 2315:template <class _Tp>
        -: 2316:struct _LIBCPP_TEMPLATE_VIS default_delete {
        -: 2317:    static_assert(!is_function<_Tp>::value,
        -: 2318:                  "default_delete cannot be instantiated for function types");
        -: 2319:#ifndef _LIBCPP_CXX03_LANG
        -: 2320:  _LIBCPP_INLINE_VISIBILITY constexpr default_delete() noexcept = default;
        -: 2321:#else
        -: 2322:  _LIBCPP_INLINE_VISIBILITY default_delete() {}
        -: 2323:#endif
        -: 2324:  template <class _Up>
        -: 2325:  _LIBCPP_INLINE_VISIBILITY
        -: 2326:  default_delete(const default_delete<_Up>&,
        -: 2327:                 typename enable_if<is_convertible<_Up*, _Tp*>::value>::type* =
    #####: 2328:                     0) _NOEXCEPT {}
        -: 2329:
        -: 2330:  _LIBCPP_INLINE_VISIBILITY void operator()(_Tp* __ptr) const _NOEXCEPT {
        -: 2331:    static_assert(sizeof(_Tp) > 0,
        -: 2332:                  "default_delete can not delete incomplete type");
        -: 2333:    static_assert(!is_void<_Tp>::value,
        -: 2334:                  "default_delete can not delete incomplete type");
    #####: 2335:    delete __ptr;
    #####: 2336:  }
        -: 2337:};
        -: 2338:
        -: 2339:template <class _Tp>
        -: 2340:struct _LIBCPP_TEMPLATE_VIS default_delete<_Tp[]> {
        -: 2341:private:
        -: 2342:  template <class _Up>
        -: 2343:  struct _EnableIfConvertible
        -: 2344:      : enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value> {};
        -: 2345:
        -: 2346:public:
        -: 2347:#ifndef _LIBCPP_CXX03_LANG
        -: 2348:  _LIBCPP_INLINE_VISIBILITY constexpr default_delete() noexcept = default;
        -: 2349:#else
        -: 2350:  _LIBCPP_INLINE_VISIBILITY default_delete() {}
        -: 2351:#endif
        -: 2352:
        -: 2353:  template <class _Up>
        -: 2354:  _LIBCPP_INLINE_VISIBILITY
        -: 2355:  default_delete(const default_delete<_Up[]>&,
        -: 2356:                 typename _EnableIfConvertible<_Up>::type* = 0) _NOEXCEPT {}
        -: 2357:
        -: 2358:  template <class _Up>
        -: 2359:  _LIBCPP_INLINE_VISIBILITY
        -: 2360:  typename _EnableIfConvertible<_Up>::type
        -: 2361:  operator()(_Up* __ptr) const _NOEXCEPT {
        -: 2362:    static_assert(sizeof(_Tp) > 0,
        -: 2363:                  "default_delete can not delete incomplete type");
        -: 2364:    static_assert(!is_void<_Tp>::value,
        -: 2365:                  "default_delete can not delete void type");
        -: 2366:    delete[] __ptr;
        -: 2367:  }
        -: 2368:};
        -: 2369:
        -: 2370:
        -: 2371:
        -: 2372:#ifndef _LIBCPP_CXX03_LANG
        -: 2373:template <class _Deleter>
        -: 2374:struct __unique_ptr_deleter_sfinae {
        -: 2375:  static_assert(!is_reference<_Deleter>::value, "incorrect specialization");
        -: 2376:  typedef const _Deleter& __lval_ref_type;
        -: 2377:  typedef _Deleter&& __good_rval_ref_type;
        -: 2378:  typedef true_type __enable_rval_overload;
        -: 2379:};
        -: 2380:
        -: 2381:template <class _Deleter>
        -: 2382:struct __unique_ptr_deleter_sfinae<_Deleter const&> {
        -: 2383:  typedef const _Deleter& __lval_ref_type;
        -: 2384:  typedef const _Deleter&& __bad_rval_ref_type;
        -: 2385:  typedef false_type __enable_rval_overload;
        -: 2386:};
        -: 2387:
        -: 2388:template <class _Deleter>
        -: 2389:struct __unique_ptr_deleter_sfinae<_Deleter&> {
        -: 2390:  typedef _Deleter& __lval_ref_type;
        -: 2391:  typedef _Deleter&& __bad_rval_ref_type;
        -: 2392:  typedef false_type __enable_rval_overload;
        -: 2393:};
        -: 2394:#endif // !defined(_LIBCPP_CXX03_LANG)
        -: 2395:
        -: 2396:template <class _Tp, class _Dp = default_delete<_Tp> >
        -: 2397:class _LIBCPP_TEMPLATE_VIS unique_ptr {
        -: 2398:public:
        -: 2399:  typedef _Tp element_type;
        -: 2400:  typedef _Dp deleter_type;
        -: 2401:  typedef typename __pointer_type<_Tp, deleter_type>::type pointer;
        -: 2402:
        -: 2403:  static_assert(!is_rvalue_reference<deleter_type>::value,
        -: 2404:                "the specified deleter type cannot be an rvalue reference");
        -: 2405:
        -: 2406:private:
        -: 2407:  __compressed_pair<pointer, deleter_type> __ptr_;
        -: 2408:
        -: 2409:  struct __nat { int __for_bool_; };
        -: 2410:
        -: 2411:#ifndef _LIBCPP_CXX03_LANG
        -: 2412:  typedef __unique_ptr_deleter_sfinae<_Dp> _DeleterSFINAE;
        -: 2413:
        -: 2414:  template <bool _Dummy>
        -: 2415:  using _LValRefType =
        -: 2416:      typename __dependent_type<_DeleterSFINAE, _Dummy>::__lval_ref_type;
        -: 2417:
        -: 2418:  template <bool _Dummy>
        -: 2419:  using _GoodRValRefType =
        -: 2420:      typename __dependent_type<_DeleterSFINAE, _Dummy>::__good_rval_ref_type;
        -: 2421:
        -: 2422:  template <bool _Dummy>
        -: 2423:  using _BadRValRefType =
        -: 2424:      typename __dependent_type<_DeleterSFINAE, _Dummy>::__bad_rval_ref_type;
        -: 2425:
        -: 2426:  template <bool _Dummy, class _Deleter = typename __dependent_type<
        -: 2427:                             __identity<deleter_type>, _Dummy>::type>
        -: 2428:  using _EnableIfDeleterDefaultConstructible =
        -: 2429:      typename enable_if<is_default_constructible<_Deleter>::value &&
        -: 2430:                         !is_pointer<_Deleter>::value>::type;
        -: 2431:
        -: 2432:  template <class _ArgType>
        -: 2433:  using _EnableIfDeleterConstructible =
        -: 2434:      typename enable_if<is_constructible<deleter_type, _ArgType>::value>::type;
        -: 2435:
        -: 2436:  template <class _UPtr, class _Up>
        -: 2437:  using _EnableIfMoveConvertible = typename enable_if<
        -: 2438:      is_convertible<typename _UPtr::pointer, pointer>::value &&
        -: 2439:      !is_array<_Up>::value
        -: 2440:  >::type;
        -: 2441:
        -: 2442:  template <class _UDel>
        -: 2443:  using _EnableIfDeleterConvertible = typename enable_if<
        -: 2444:      (is_reference<_Dp>::value && is_same<_Dp, _UDel>::value) ||
        -: 2445:      (!is_reference<_Dp>::value && is_convertible<_UDel, _Dp>::value)
        -: 2446:    >::type;
        -: 2447:
        -: 2448:  template <class _UDel>
        -: 2449:  using _EnableIfDeleterAssignable = typename enable_if<
        -: 2450:      is_assignable<_Dp&, _UDel&&>::value
        -: 2451:    >::type;
        -: 2452:
        -: 2453:public:
        -: 2454:  template <bool _Dummy = true,
        -: 2455:            class = _EnableIfDeleterDefaultConstructible<_Dummy>>
        -: 2456:  _LIBCPP_INLINE_VISIBILITY
    #####: 2457:  constexpr unique_ptr() noexcept : __ptr_(pointer()) {}
        -: 2458:
        -: 2459:  template <bool _Dummy = true,
        -: 2460:            class = _EnableIfDeleterDefaultConstructible<_Dummy>>
        -: 2461:  _LIBCPP_INLINE_VISIBILITY
    #####: 2462:  constexpr unique_ptr(nullptr_t) noexcept : __ptr_(pointer()) {}
        -: 2463:
        -: 2464:  template <bool _Dummy = true,
        -: 2465:            class = _EnableIfDeleterDefaultConstructible<_Dummy>>
        -: 2466:  _LIBCPP_INLINE_VISIBILITY
    #####: 2467:  explicit unique_ptr(pointer __p) noexcept : __ptr_(__p) {}
        -: 2468:
        -: 2469:  template <bool _Dummy = true,
        -: 2470:            class = _EnableIfDeleterConstructible<_LValRefType<_Dummy>>>
        -: 2471:  _LIBCPP_INLINE_VISIBILITY
        -: 2472:  unique_ptr(pointer __p, _LValRefType<_Dummy> __d) noexcept
        -: 2473:      : __ptr_(__p, __d) {}
        -: 2474:
        -: 2475:  template <bool _Dummy = true,
        -: 2476:            class = _EnableIfDeleterConstructible<_GoodRValRefType<_Dummy>>>
        -: 2477:  _LIBCPP_INLINE_VISIBILITY
        -: 2478:  unique_ptr(pointer __p, _GoodRValRefType<_Dummy> __d) noexcept
    #####: 2479:      : __ptr_(__p, _VSTD::move(__d)) {
        -: 2480:    static_assert(!is_reference<deleter_type>::value,
        -: 2481:                  "rvalue deleter bound to reference");
    #####: 2482:  }
        -: 2483:
        -: 2484:  template <bool _Dummy = true,
        -: 2485:            class = _EnableIfDeleterConstructible<_BadRValRefType<_Dummy>>>
        -: 2486:  _LIBCPP_INLINE_VISIBILITY
        -: 2487:  unique_ptr(pointer __p, _BadRValRefType<_Dummy> __d) = delete;
        -: 2488:
        -: 2489:  _LIBCPP_INLINE_VISIBILITY
        -: 2490:  unique_ptr(unique_ptr&& __u) noexcept
    #####: 2491:      : __ptr_(__u.release(), _VSTD::forward<deleter_type>(__u.get_deleter())) {
    #####: 2492:  }
        -: 2493:
        -: 2494:  template <class _Up, class _Ep,
        -: 2495:      class = _EnableIfMoveConvertible<unique_ptr<_Up, _Ep>, _Up>,
        -: 2496:      class = _EnableIfDeleterConvertible<_Ep>
        -: 2497:  >
        -: 2498:  _LIBCPP_INLINE_VISIBILITY
        -: 2499:  unique_ptr(unique_ptr<_Up, _Ep>&& __u) _NOEXCEPT
    #####: 2500:      : __ptr_(__u.release(), _VSTD::forward<_Ep>(__u.get_deleter())) {}
        -: 2501:
        -: 2502:#if _LIBCPP_STD_VER <= 14 || defined(_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR)
        -: 2503:  template <class _Up>
        -: 2504:  _LIBCPP_INLINE_VISIBILITY
        -: 2505:  unique_ptr(auto_ptr<_Up>&& __p,
        -: 2506:             typename enable_if<is_convertible<_Up*, _Tp*>::value &&
        -: 2507:                                    is_same<_Dp, default_delete<_Tp>>::value,
        -: 2508:                                __nat>::type = __nat()) _NOEXCEPT
        -: 2509:      : __ptr_(__p.release()) {}
        -: 2510:#endif
        -: 2511:
        -: 2512:  _LIBCPP_INLINE_VISIBILITY
        -: 2513:  unique_ptr& operator=(unique_ptr&& __u) _NOEXCEPT {
    #####: 2514:    reset(__u.release());
    #####: 2515:    __ptr_.second() = _VSTD::forward<deleter_type>(__u.get_deleter());
    #####: 2516:    return *this;
        -: 2517:  }
        -: 2518:
        -: 2519:  template <class _Up, class _Ep,
        -: 2520:      class = _EnableIfMoveConvertible<unique_ptr<_Up, _Ep>, _Up>,
        -: 2521:      class = _EnableIfDeleterAssignable<_Ep>
        -: 2522:  >
        -: 2523:  _LIBCPP_INLINE_VISIBILITY
        -: 2524:  unique_ptr& operator=(unique_ptr<_Up, _Ep>&& __u) _NOEXCEPT {
        -: 2525:    reset(__u.release());
        -: 2526:    __ptr_.second() = _VSTD::forward<_Ep>(__u.get_deleter());
        -: 2527:    return *this;
        -: 2528:  }
        -: 2529:
        -: 2530:#else  // _LIBCPP_CXX03_LANG
        -: 2531:private:
        -: 2532:  unique_ptr(unique_ptr&);
        -: 2533:  template <class _Up, class _Ep> unique_ptr(unique_ptr<_Up, _Ep>&);
        -: 2534:
        -: 2535:  unique_ptr& operator=(unique_ptr&);
        -: 2536:  template <class _Up, class _Ep> unique_ptr& operator=(unique_ptr<_Up, _Ep>&);
        -: 2537:
        -: 2538:public:
        -: 2539:  _LIBCPP_INLINE_VISIBILITY
        -: 2540:  unique_ptr() : __ptr_(pointer())
        -: 2541:  {
        -: 2542:    static_assert(!is_pointer<deleter_type>::value,
        -: 2543:                  "unique_ptr constructed with null function pointer deleter");
        -: 2544:    static_assert(is_default_constructible<deleter_type>::value,
        -: 2545:                  "unique_ptr::deleter_type is not default constructible");
        -: 2546:  }
        -: 2547:  _LIBCPP_INLINE_VISIBILITY
        -: 2548:  unique_ptr(nullptr_t) : __ptr_(pointer())
        -: 2549:  {
        -: 2550:    static_assert(!is_pointer<deleter_type>::value,
        -: 2551:                  "unique_ptr constructed with null function pointer deleter");
        -: 2552:  }
        -: 2553:  _LIBCPP_INLINE_VISIBILITY
        -: 2554:  explicit unique_ptr(pointer __p)
        -: 2555:      : __ptr_(_VSTD::move(__p)) {
        -: 2556:    static_assert(!is_pointer<deleter_type>::value,
        -: 2557:                  "unique_ptr constructed with null function pointer deleter");
        -: 2558:  }
        -: 2559:
        -: 2560:  _LIBCPP_INLINE_VISIBILITY
        -: 2561:  operator __rv<unique_ptr>() {
        -: 2562:    return __rv<unique_ptr>(*this);
        -: 2563:  }
        -: 2564:
        -: 2565:  _LIBCPP_INLINE_VISIBILITY
        -: 2566:  unique_ptr(__rv<unique_ptr> __u)
        -: 2567:      : __ptr_(__u->release(),
        -: 2568:               _VSTD::forward<deleter_type>(__u->get_deleter())) {}
        -: 2569:
        -: 2570:  template <class _Up, class _Ep>
        -: 2571:  _LIBCPP_INLINE_VISIBILITY
        -: 2572:  typename enable_if<
        -: 2573:      !is_array<_Up>::value &&
        -: 2574:          is_convertible<typename unique_ptr<_Up, _Ep>::pointer,
        -: 2575:                         pointer>::value &&
        -: 2576:          is_assignable<deleter_type&, _Ep&>::value,
        -: 2577:      unique_ptr&>::type
        -: 2578:  operator=(unique_ptr<_Up, _Ep> __u) {
        -: 2579:    reset(__u.release());
        -: 2580:    __ptr_.second() = _VSTD::forward<_Ep>(__u.get_deleter());
        -: 2581:    return *this;
        -: 2582:  }
        -: 2583:
        -: 2584:  _LIBCPP_INLINE_VISIBILITY
        -: 2585:  unique_ptr(pointer __p, deleter_type __d)
        -: 2586:      : __ptr_(_VSTD::move(__p), _VSTD::move(__d)) {}
        -: 2587:#endif // _LIBCPP_CXX03_LANG
        -: 2588:
        -: 2589:#if _LIBCPP_STD_VER <= 14 || defined(_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR)
        -: 2590:  template <class _Up>
        -: 2591:  _LIBCPP_INLINE_VISIBILITY
        -: 2592:      typename enable_if<is_convertible<_Up*, _Tp*>::value &&
        -: 2593:                             is_same<_Dp, default_delete<_Tp> >::value,
        -: 2594:                         unique_ptr&>::type
        -: 2595:      operator=(auto_ptr<_Up> __p) {
        -: 2596:    reset(__p.release());
        -: 2597:    return *this;
        -: 2598:  }
        -: 2599:#endif
        -: 2600:
        -: 2601:  _LIBCPP_INLINE_VISIBILITY
    #####: 2602:  ~unique_ptr() { reset(); }
        -: 2603:
        -: 2604:  _LIBCPP_INLINE_VISIBILITY
        -: 2605:  unique_ptr& operator=(nullptr_t) _NOEXCEPT {
        -: 2606:    reset();
        -: 2607:    return *this;
        -: 2608:  }
        -: 2609:
        -: 2610:  _LIBCPP_INLINE_VISIBILITY
        -: 2611:  typename add_lvalue_reference<_Tp>::type
        -: 2612:  operator*() const {
    #####: 2613:    return *__ptr_.first();
        -: 2614:  }
        -: 2615:  _LIBCPP_INLINE_VISIBILITY
        -: 2616:  pointer operator->() const _NOEXCEPT {
    #####: 2617:    return __ptr_.first();
        -: 2618:  }
        -: 2619:  _LIBCPP_INLINE_VISIBILITY
        -: 2620:  pointer get() const _NOEXCEPT {
    #####: 2621:    return __ptr_.first();
        -: 2622:  }
        -: 2623:  _LIBCPP_INLINE_VISIBILITY
        -: 2624:  deleter_type& get_deleter() _NOEXCEPT {
    #####: 2625:    return __ptr_.second();
        -: 2626:  }
        -: 2627:  _LIBCPP_INLINE_VISIBILITY
        -: 2628:  const deleter_type& get_deleter() const _NOEXCEPT {
        -: 2629:    return __ptr_.second();
        -: 2630:  }
        -: 2631:  _LIBCPP_INLINE_VISIBILITY
        -: 2632:  _LIBCPP_EXPLICIT operator bool() const _NOEXCEPT {
    #####: 2633:    return __ptr_.first() != nullptr;
        -: 2634:  }
        -: 2635:
        -: 2636:  _LIBCPP_INLINE_VISIBILITY
        -: 2637:  pointer release() _NOEXCEPT {
    #####: 2638:    pointer __t = __ptr_.first();
    #####: 2639:    __ptr_.first() = pointer();
    #####: 2640:    return __t;
        -: 2641:  }
        -: 2642:
        -: 2643:  _LIBCPP_INLINE_VISIBILITY
        -: 2644:  void reset(pointer __p = pointer()) _NOEXCEPT {
    #####: 2645:    pointer __tmp = __ptr_.first();
    #####: 2646:    __ptr_.first() = __p;
    #####: 2647:    if (__tmp)
    #####: 2648:      __ptr_.second()(__tmp);
    #####: 2649:  }
        -: 2650:
        -: 2651:  _LIBCPP_INLINE_VISIBILITY
        -: 2652:  void swap(unique_ptr& __u) _NOEXCEPT {
        -: 2653:    __ptr_.swap(__u.__ptr_);
        -: 2654:  }
        -: 2655:};
        -: 2656:
        -: 2657:
        -: 2658:template <class _Tp, class _Dp>
        -: 2659:class _LIBCPP_TEMPLATE_VIS unique_ptr<_Tp[], _Dp> {
        -: 2660:public:
        -: 2661:  typedef _Tp element_type;
        -: 2662:  typedef _Dp deleter_type;
        -: 2663:  typedef typename __pointer_type<_Tp, deleter_type>::type pointer;
        -: 2664:
        -: 2665:private:
        -: 2666:  __compressed_pair<pointer, deleter_type> __ptr_;
        -: 2667:
        -: 2668:  template <class _From>
        -: 2669:  struct _CheckArrayPointerConversion : is_same<_From, pointer> {};
        -: 2670:
        -: 2671:  template <class _FromElem>
        -: 2672:  struct _CheckArrayPointerConversion<_FromElem*>
        -: 2673:      : integral_constant<bool,
        -: 2674:          is_same<_FromElem*, pointer>::value ||
        -: 2675:            (is_same<pointer, element_type*>::value &&
        -: 2676:             is_convertible<_FromElem(*)[], element_type(*)[]>::value)
        -: 2677:      >
        -: 2678:  {};
        -: 2679:
        -: 2680:#ifndef _LIBCPP_CXX03_LANG
        -: 2681:  typedef __unique_ptr_deleter_sfinae<_Dp> _DeleterSFINAE;
        -: 2682:
        -: 2683:  template <bool _Dummy>
        -: 2684:  using _LValRefType =
        -: 2685:      typename __dependent_type<_DeleterSFINAE, _Dummy>::__lval_ref_type;
        -: 2686:
        -: 2687:  template <bool _Dummy>
        -: 2688:  using _GoodRValRefType =
        -: 2689:      typename __dependent_type<_DeleterSFINAE, _Dummy>::__good_rval_ref_type;
        -: 2690:
        -: 2691:  template <bool _Dummy>
        -: 2692:  using _BadRValRefType =
        -: 2693:      typename __dependent_type<_DeleterSFINAE, _Dummy>::__bad_rval_ref_type;
        -: 2694:
        -: 2695:  template <bool _Dummy, class _Deleter = typename __dependent_type<
        -: 2696:                             __identity<deleter_type>, _Dummy>::type>
        -: 2697:  using _EnableIfDeleterDefaultConstructible =
        -: 2698:      typename enable_if<is_default_constructible<_Deleter>::value &&
        -: 2699:                         !is_pointer<_Deleter>::value>::type;
        -: 2700:
        -: 2701:  template <class _ArgType>
        -: 2702:  using _EnableIfDeleterConstructible =
        -: 2703:      typename enable_if<is_constructible<deleter_type, _ArgType>::value>::type;
        -: 2704:
        -: 2705:  template <class _Pp>
        -: 2706:  using _EnableIfPointerConvertible = typename enable_if<
        -: 2707:      _CheckArrayPointerConversion<_Pp>::value
        -: 2708:  >::type;
        -: 2709:
        -: 2710:  template <class _UPtr, class _Up,
        -: 2711:        class _ElemT = typename _UPtr::element_type>
        -: 2712:  using _EnableIfMoveConvertible = typename enable_if<
        -: 2713:      is_array<_Up>::value &&
        -: 2714:      is_same<pointer, element_type*>::value &&
        -: 2715:      is_same<typename _UPtr::pointer, _ElemT*>::value &&
        -: 2716:      is_convertible<_ElemT(*)[], element_type(*)[]>::value
        -: 2717:    >::type;
        -: 2718:
        -: 2719:  template <class _UDel>
        -: 2720:  using _EnableIfDeleterConvertible = typename enable_if<
        -: 2721:      (is_reference<_Dp>::value && is_same<_Dp, _UDel>::value) ||
        -: 2722:      (!is_reference<_Dp>::value && is_convertible<_UDel, _Dp>::value)
        -: 2723:    >::type;
        -: 2724:
        -: 2725:  template <class _UDel>
        -: 2726:  using _EnableIfDeleterAssignable = typename enable_if<
        -: 2727:      is_assignable<_Dp&, _UDel&&>::value
        -: 2728:    >::type;
        -: 2729:
        -: 2730:public:
        -: 2731:  template <bool _Dummy = true,
        -: 2732:            class = _EnableIfDeleterDefaultConstructible<_Dummy>>
        -: 2733:  _LIBCPP_INLINE_VISIBILITY
        -: 2734:  constexpr unique_ptr() noexcept : __ptr_(pointer()) {}
        -: 2735:
        -: 2736:  template <bool _Dummy = true,
        -: 2737:            class = _EnableIfDeleterDefaultConstructible<_Dummy>>
        -: 2738:  _LIBCPP_INLINE_VISIBILITY
        -: 2739:  constexpr unique_ptr(nullptr_t) noexcept : __ptr_(pointer()) {}
        -: 2740:
        -: 2741:  template <class _Pp, bool _Dummy = true,
        -: 2742:            class = _EnableIfDeleterDefaultConstructible<_Dummy>,
        -: 2743:            class = _EnableIfPointerConvertible<_Pp>>
        -: 2744:  _LIBCPP_INLINE_VISIBILITY
        -: 2745:  explicit unique_ptr(_Pp __p) noexcept
        -: 2746:      : __ptr_(__p) {}
        -: 2747:
        -: 2748:  template <class _Pp, bool _Dummy = true,
        -: 2749:            class = _EnableIfDeleterConstructible<_LValRefType<_Dummy>>,
        -: 2750:            class = _EnableIfPointerConvertible<_Pp>>
        -: 2751:  _LIBCPP_INLINE_VISIBILITY
        -: 2752:  unique_ptr(_Pp __p, _LValRefType<_Dummy> __d) noexcept
        -: 2753:      : __ptr_(__p, __d) {}
        -: 2754:
        -: 2755:  template <bool _Dummy = true,
        -: 2756:            class = _EnableIfDeleterConstructible<_LValRefType<_Dummy>>>
        -: 2757:  _LIBCPP_INLINE_VISIBILITY
        -: 2758:  unique_ptr(nullptr_t, _LValRefType<_Dummy> __d) noexcept
        -: 2759:      : __ptr_(nullptr, __d) {}
        -: 2760:
        -: 2761:  template <class _Pp, bool _Dummy = true,
        -: 2762:            class = _EnableIfDeleterConstructible<_GoodRValRefType<_Dummy>>,
        -: 2763:            class = _EnableIfPointerConvertible<_Pp>>
        -: 2764:  _LIBCPP_INLINE_VISIBILITY
        -: 2765:  unique_ptr(_Pp __p, _GoodRValRefType<_Dummy> __d) noexcept
        -: 2766:      : __ptr_(__p, _VSTD::move(__d)) {
        -: 2767:    static_assert(!is_reference<deleter_type>::value,
        -: 2768:                  "rvalue deleter bound to reference");
        -: 2769:  }
        -: 2770:
        -: 2771:  template <bool _Dummy = true,
        -: 2772:            class = _EnableIfDeleterConstructible<_GoodRValRefType<_Dummy>>>
        -: 2773:  _LIBCPP_INLINE_VISIBILITY
        -: 2774:  unique_ptr(nullptr_t, _GoodRValRefType<_Dummy> __d) noexcept
        -: 2775:      : __ptr_(nullptr, _VSTD::move(__d)) {
        -: 2776:    static_assert(!is_reference<deleter_type>::value,
        -: 2777:                  "rvalue deleter bound to reference");
        -: 2778:  }
        -: 2779:
        -: 2780:  template <class _Pp, bool _Dummy = true,
        -: 2781:            class = _EnableIfDeleterConstructible<_BadRValRefType<_Dummy>>,
        -: 2782:            class = _EnableIfPointerConvertible<_Pp>>
        -: 2783:  _LIBCPP_INLINE_VISIBILITY
        -: 2784:  unique_ptr(_Pp __p, _BadRValRefType<_Dummy> __d) = delete;
        -: 2785:
        -: 2786:  _LIBCPP_INLINE_VISIBILITY
        -: 2787:  unique_ptr(unique_ptr&& __u) noexcept
        -: 2788:      : __ptr_(__u.release(), _VSTD::forward<deleter_type>(__u.get_deleter())) {
        -: 2789:  }
        -: 2790:
        -: 2791:  _LIBCPP_INLINE_VISIBILITY
        -: 2792:  unique_ptr& operator=(unique_ptr&& __u) noexcept {
        -: 2793:    reset(__u.release());
        -: 2794:    __ptr_.second() = _VSTD::forward<deleter_type>(__u.get_deleter());
        -: 2795:    return *this;
        -: 2796:  }
        -: 2797:
        -: 2798:  template <class _Up, class _Ep,
        -: 2799:      class = _EnableIfMoveConvertible<unique_ptr<_Up, _Ep>, _Up>,
        -: 2800:      class = _EnableIfDeleterConvertible<_Ep>
        -: 2801:  >
        -: 2802:  _LIBCPP_INLINE_VISIBILITY
        -: 2803:  unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
        -: 2804:      : __ptr_(__u.release(), _VSTD::forward<_Ep>(__u.get_deleter())) {
        -: 2805:  }
        -: 2806:
        -: 2807:  template <class _Up, class _Ep,
        -: 2808:      class = _EnableIfMoveConvertible<unique_ptr<_Up, _Ep>, _Up>,
        -: 2809:      class = _EnableIfDeleterAssignable<_Ep>
        -: 2810:  >
        -: 2811:  _LIBCPP_INLINE_VISIBILITY
        -: 2812:  unique_ptr&
        -: 2813:  operator=(unique_ptr<_Up, _Ep>&& __u) noexcept {
        -: 2814:    reset(__u.release());
        -: 2815:    __ptr_.second() = _VSTD::forward<_Ep>(__u.get_deleter());
        -: 2816:    return *this;
        -: 2817:  }
        -: 2818:
        -: 2819:#else // _LIBCPP_CXX03_LANG
        -: 2820:private:
        -: 2821:  template <class _Up> explicit unique_ptr(_Up);
        -: 2822:
        -: 2823:  unique_ptr(unique_ptr&);
        -: 2824:  template <class _Up> unique_ptr(unique_ptr<_Up>&);
        -: 2825:
        -: 2826:  unique_ptr& operator=(unique_ptr&);
        -: 2827:  template <class _Up> unique_ptr& operator=(unique_ptr<_Up>&);
        -: 2828:
        -: 2829:  template <class _Up>
        -: 2830:  unique_ptr(_Up __u,
        -: 2831:             typename conditional<
        -: 2832:                 is_reference<deleter_type>::value, deleter_type,
        -: 2833:                 typename add_lvalue_reference<const deleter_type>::type>::type,
        -: 2834:             typename enable_if<is_convertible<_Up, pointer>::value,
        -: 2835:                                __nat>::type = __nat());
        -: 2836:public:
        -: 2837:  _LIBCPP_INLINE_VISIBILITY
        -: 2838:  unique_ptr() : __ptr_(pointer()) {
        -: 2839:    static_assert(!is_pointer<deleter_type>::value,
        -: 2840:                  "unique_ptr constructed with null function pointer deleter");
        -: 2841:  }
        -: 2842:  _LIBCPP_INLINE_VISIBILITY
        -: 2843:  unique_ptr(nullptr_t) : __ptr_(pointer()) {
        -: 2844:    static_assert(!is_pointer<deleter_type>::value,
        -: 2845:                  "unique_ptr constructed with null function pointer deleter");
        -: 2846:  }
        -: 2847:
        -: 2848:  _LIBCPP_INLINE_VISIBILITY
        -: 2849:  explicit unique_ptr(pointer __p) : __ptr_(__p) {
        -: 2850:    static_assert(!is_pointer<deleter_type>::value,
        -: 2851:                  "unique_ptr constructed with null function pointer deleter");
        -: 2852:  }
        -: 2853:
        -: 2854:  _LIBCPP_INLINE_VISIBILITY
        -: 2855:  unique_ptr(pointer __p, deleter_type __d)
        -: 2856:      : __ptr_(__p, _VSTD::forward<deleter_type>(__d)) {}
        -: 2857:
        -: 2858:  _LIBCPP_INLINE_VISIBILITY
        -: 2859:  unique_ptr(nullptr_t, deleter_type __d)
        -: 2860:      : __ptr_(pointer(), _VSTD::forward<deleter_type>(__d)) {}
        -: 2861:
        -: 2862:  _LIBCPP_INLINE_VISIBILITY
        -: 2863:  operator __rv<unique_ptr>() {
        -: 2864:    return __rv<unique_ptr>(*this);
        -: 2865:  }
        -: 2866:
        -: 2867:  _LIBCPP_INLINE_VISIBILITY
        -: 2868:  unique_ptr(__rv<unique_ptr> __u)
        -: 2869:      : __ptr_(__u->release(),
        -: 2870:               _VSTD::forward<deleter_type>(__u->get_deleter())) {}
        -: 2871:
        -: 2872:  _LIBCPP_INLINE_VISIBILITY
        -: 2873:  unique_ptr& operator=(__rv<unique_ptr> __u) {
        -: 2874:    reset(__u->release());
        -: 2875:    __ptr_.second() = _VSTD::forward<deleter_type>(__u->get_deleter());
        -: 2876:    return *this;
        -: 2877:  }
        -: 2878:
        -: 2879:#endif // _LIBCPP_CXX03_LANG
        -: 2880:
        -: 2881:public:
        -: 2882:  _LIBCPP_INLINE_VISIBILITY
        -: 2883:  ~unique_ptr() { reset(); }
        -: 2884:
        -: 2885:  _LIBCPP_INLINE_VISIBILITY
        -: 2886:  unique_ptr& operator=(nullptr_t) _NOEXCEPT {
        -: 2887:    reset();
        -: 2888:    return *this;
        -: 2889:  }
        -: 2890:
        -: 2891:  _LIBCPP_INLINE_VISIBILITY
        -: 2892:  typename add_lvalue_reference<_Tp>::type
        -: 2893:  operator[](size_t __i) const {
        -: 2894:    return __ptr_.first()[__i];
        -: 2895:  }
        -: 2896:  _LIBCPP_INLINE_VISIBILITY
        -: 2897:  pointer get() const _NOEXCEPT {
        -: 2898:    return __ptr_.first();
        -: 2899:  }
        -: 2900:
        -: 2901:  _LIBCPP_INLINE_VISIBILITY
        -: 2902:  deleter_type& get_deleter() _NOEXCEPT {
        -: 2903:    return __ptr_.second();
        -: 2904:  }
        -: 2905:
        -: 2906:  _LIBCPP_INLINE_VISIBILITY
        -: 2907:  const deleter_type& get_deleter() const _NOEXCEPT {
        -: 2908:    return __ptr_.second();
        -: 2909:  }
        -: 2910:  _LIBCPP_INLINE_VISIBILITY
        -: 2911:  _LIBCPP_EXPLICIT operator bool() const _NOEXCEPT {
        -: 2912:    return __ptr_.first() != nullptr;
        -: 2913:  }
        -: 2914:
        -: 2915:  _LIBCPP_INLINE_VISIBILITY
        -: 2916:  pointer release() _NOEXCEPT {
        -: 2917:    pointer __t = __ptr_.first();
        -: 2918:    __ptr_.first() = pointer();
        -: 2919:    return __t;
        -: 2920:  }
        -: 2921:
        -: 2922:  template <class _Pp>
        -: 2923:  _LIBCPP_INLINE_VISIBILITY
        -: 2924:  typename enable_if<
        -: 2925:      _CheckArrayPointerConversion<_Pp>::value
        -: 2926:  >::type
        -: 2927:  reset(_Pp __p) _NOEXCEPT {
        -: 2928:    pointer __tmp = __ptr_.first();
        -: 2929:    __ptr_.first() = __p;
        -: 2930:    if (__tmp)
        -: 2931:      __ptr_.second()(__tmp);
        -: 2932:  }
        -: 2933:
        -: 2934:  _LIBCPP_INLINE_VISIBILITY
        -: 2935:  void reset(nullptr_t = nullptr) _NOEXCEPT {
        -: 2936:    pointer __tmp = __ptr_.first();
        -: 2937:    __ptr_.first() = nullptr;
        -: 2938:    if (__tmp)
        -: 2939:      __ptr_.second()(__tmp);
        -: 2940:  }
        -: 2941:
        -: 2942:  _LIBCPP_INLINE_VISIBILITY
        -: 2943:  void swap(unique_ptr& __u) _NOEXCEPT {
        -: 2944:    __ptr_.swap(__u.__ptr_);
        -: 2945:  }
        -: 2946:
        -: 2947:};
        -: 2948:
        -: 2949:template <class _Tp, class _Dp>
        -: 2950:inline _LIBCPP_INLINE_VISIBILITY
        -: 2951:typename enable_if<
        -: 2952:    __is_swappable<_Dp>::value,
        -: 2953:    void
        -: 2954:>::type
        -: 2955:swap(unique_ptr<_Tp, _Dp>& __x, unique_ptr<_Tp, _Dp>& __y) _NOEXCEPT {__x.swap(__y);}
        -: 2956:
        -: 2957:template <class _T1, class _D1, class _T2, class _D2>
        -: 2958:inline _LIBCPP_INLINE_VISIBILITY
        -: 2959:bool
        -: 2960:operator==(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return __x.get() == __y.get();}
        -: 2961:
        -: 2962:template <class _T1, class _D1, class _T2, class _D2>
        -: 2963:inline _LIBCPP_INLINE_VISIBILITY
        -: 2964:bool
        -: 2965:operator!=(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return !(__x == __y);}
        -: 2966:
        -: 2967:template <class _T1, class _D1, class _T2, class _D2>
        -: 2968:inline _LIBCPP_INLINE_VISIBILITY
        -: 2969:bool
        -: 2970:operator< (const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y)
        -: 2971:{
        -: 2972:    typedef typename unique_ptr<_T1, _D1>::pointer _P1;
        -: 2973:    typedef typename unique_ptr<_T2, _D2>::pointer _P2;
        -: 2974:    typedef typename common_type<_P1, _P2>::type _Vp;
        -: 2975:    return less<_Vp>()(__x.get(), __y.get());
        -: 2976:}
        -: 2977:
        -: 2978:template <class _T1, class _D1, class _T2, class _D2>
        -: 2979:inline _LIBCPP_INLINE_VISIBILITY
        -: 2980:bool
        -: 2981:operator> (const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return __y < __x;}
        -: 2982:
        -: 2983:template <class _T1, class _D1, class _T2, class _D2>
        -: 2984:inline _LIBCPP_INLINE_VISIBILITY
        -: 2985:bool
        -: 2986:operator<=(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return !(__y < __x);}
        -: 2987:
        -: 2988:template <class _T1, class _D1, class _T2, class _D2>
        -: 2989:inline _LIBCPP_INLINE_VISIBILITY
        -: 2990:bool
        -: 2991:operator>=(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return !(__x < __y);}
        -: 2992:
        -: 2993:template <class _T1, class _D1>
        -: 2994:inline _LIBCPP_INLINE_VISIBILITY
        -: 2995:bool
        -: 2996:operator==(const unique_ptr<_T1, _D1>& __x, nullptr_t) _NOEXCEPT
        -: 2997:{
        -: 2998:    return !__x;
        -: 2999:}
        -: 3000:
        -: 3001:template <class _T1, class _D1>
        -: 3002:inline _LIBCPP_INLINE_VISIBILITY
        -: 3003:bool
        -: 3004:operator==(nullptr_t, const unique_ptr<_T1, _D1>& __x) _NOEXCEPT
        -: 3005:{
        -: 3006:    return !__x;
        -: 3007:}
        -: 3008:
        -: 3009:template <class _T1, class _D1>
        -: 3010:inline _LIBCPP_INLINE_VISIBILITY
        -: 3011:bool
        -: 3012:operator!=(const unique_ptr<_T1, _D1>& __x, nullptr_t) _NOEXCEPT
        -: 3013:{
        -: 3014:    return static_cast<bool>(__x);
        -: 3015:}
        -: 3016:
        -: 3017:template <class _T1, class _D1>
        -: 3018:inline _LIBCPP_INLINE_VISIBILITY
        -: 3019:bool
        -: 3020:operator!=(nullptr_t, const unique_ptr<_T1, _D1>& __x) _NOEXCEPT
        -: 3021:{
        -: 3022:    return static_cast<bool>(__x);
        -: 3023:}
        -: 3024:
        -: 3025:template <class _T1, class _D1>
        -: 3026:inline _LIBCPP_INLINE_VISIBILITY
        -: 3027:bool
        -: 3028:operator<(const unique_ptr<_T1, _D1>& __x, nullptr_t)
        -: 3029:{
        -: 3030:    typedef typename unique_ptr<_T1, _D1>::pointer _P1;
        -: 3031:    return less<_P1>()(__x.get(), nullptr);
        -: 3032:}
        -: 3033:
        -: 3034:template <class _T1, class _D1>
        -: 3035:inline _LIBCPP_INLINE_VISIBILITY
        -: 3036:bool
        -: 3037:operator<(nullptr_t, const unique_ptr<_T1, _D1>& __x)
        -: 3038:{
        -: 3039:    typedef typename unique_ptr<_T1, _D1>::pointer _P1;
        -: 3040:    return less<_P1>()(nullptr, __x.get());
        -: 3041:}
        -: 3042:
        -: 3043:template <class _T1, class _D1>
        -: 3044:inline _LIBCPP_INLINE_VISIBILITY
        -: 3045:bool
        -: 3046:operator>(const unique_ptr<_T1, _D1>& __x, nullptr_t)
        -: 3047:{
        -: 3048:    return nullptr < __x;
        -: 3049:}
        -: 3050:
        -: 3051:template <class _T1, class _D1>
        -: 3052:inline _LIBCPP_INLINE_VISIBILITY
        -: 3053:bool
        -: 3054:operator>(nullptr_t, const unique_ptr<_T1, _D1>& __x)
        -: 3055:{
        -: 3056:    return __x < nullptr;
        -: 3057:}
        -: 3058:
        -: 3059:template <class _T1, class _D1>
        -: 3060:inline _LIBCPP_INLINE_VISIBILITY
        -: 3061:bool
        -: 3062:operator<=(const unique_ptr<_T1, _D1>& __x, nullptr_t)
        -: 3063:{
        -: 3064:    return !(nullptr < __x);
        -: 3065:}
        -: 3066:
        -: 3067:template <class _T1, class _D1>
        -: 3068:inline _LIBCPP_INLINE_VISIBILITY
        -: 3069:bool
        -: 3070:operator<=(nullptr_t, const unique_ptr<_T1, _D1>& __x)
        -: 3071:{
        -: 3072:    return !(__x < nullptr);
        -: 3073:}
        -: 3074:
        -: 3075:template <class _T1, class _D1>
        -: 3076:inline _LIBCPP_INLINE_VISIBILITY
        -: 3077:bool
        -: 3078:operator>=(const unique_ptr<_T1, _D1>& __x, nullptr_t)
        -: 3079:{
        -: 3080:    return !(__x < nullptr);
        -: 3081:}
        -: 3082:
        -: 3083:template <class _T1, class _D1>
        -: 3084:inline _LIBCPP_INLINE_VISIBILITY
        -: 3085:bool
        -: 3086:operator>=(nullptr_t, const unique_ptr<_T1, _D1>& __x)
        -: 3087:{
        -: 3088:    return !(nullptr < __x);
        -: 3089:}
        -: 3090:
        -: 3091:#ifdef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3092:
        -: 3093:template <class _Tp, class _Dp>
        -: 3094:inline _LIBCPP_INLINE_VISIBILITY
        -: 3095:unique_ptr<_Tp, _Dp>
        -: 3096:move(unique_ptr<_Tp, _Dp>& __t)
        -: 3097:{
        -: 3098:    return unique_ptr<_Tp, _Dp>(__rv<unique_ptr<_Tp, _Dp> >(__t));
        -: 3099:}
        -: 3100:
        -: 3101:#endif
        -: 3102:
        -: 3103:#if _LIBCPP_STD_VER > 11
        -: 3104:
        -: 3105:template<class _Tp>
        -: 3106:struct __unique_if
        -: 3107:{
        -: 3108:    typedef unique_ptr<_Tp> __unique_single;
        -: 3109:};
        -: 3110:
        -: 3111:template<class _Tp>
        -: 3112:struct __unique_if<_Tp[]>
        -: 3113:{
        -: 3114:    typedef unique_ptr<_Tp[]> __unique_array_unknown_bound;
        -: 3115:};
        -: 3116:
        -: 3117:template<class _Tp, size_t _Np>
        -: 3118:struct __unique_if<_Tp[_Np]>
        -: 3119:{
        -: 3120:    typedef void __unique_array_known_bound;
        -: 3121:};
        -: 3122:
        -: 3123:template<class _Tp, class... _Args>
        -: 3124:inline _LIBCPP_INLINE_VISIBILITY
        -: 3125:typename __unique_if<_Tp>::__unique_single
        -: 3126:make_unique(_Args&&... __args)
        -: 3127:{
        -: 3128:    return unique_ptr<_Tp>(new _Tp(_VSTD::forward<_Args>(__args)...));
        -: 3129:}
        -: 3130:
        -: 3131:template<class _Tp>
        -: 3132:inline _LIBCPP_INLINE_VISIBILITY
        -: 3133:typename __unique_if<_Tp>::__unique_array_unknown_bound
        -: 3134:make_unique(size_t __n)
        -: 3135:{
        -: 3136:    typedef typename remove_extent<_Tp>::type _Up;
        -: 3137:    return unique_ptr<_Tp>(new _Up[__n]());
        -: 3138:}
        -: 3139:
        -: 3140:template<class _Tp, class... _Args>
        -: 3141:    typename __unique_if<_Tp>::__unique_array_known_bound
        -: 3142:    make_unique(_Args&&...) = delete;
        -: 3143:
        -: 3144:#endif  // _LIBCPP_STD_VER > 11
        -: 3145:
        -: 3146:template <class _Tp, class _Dp>
        -: 3147:#ifdef _LIBCPP_CXX03_LANG
        -: 3148:struct _LIBCPP_TEMPLATE_VIS hash<unique_ptr<_Tp, _Dp> >
        -: 3149:#else
        -: 3150:struct _LIBCPP_TEMPLATE_VIS hash<__enable_hash_helper<
        -: 3151:    unique_ptr<_Tp, _Dp>, typename unique_ptr<_Tp, _Dp>::pointer>>
        -: 3152:#endif
        -: 3153:{
        -: 3154:    typedef unique_ptr<_Tp, _Dp> argument_type;
        -: 3155:    typedef size_t               result_type;
        -: 3156:    _LIBCPP_INLINE_VISIBILITY
        -: 3157:    result_type operator()(const argument_type& __ptr) const
        -: 3158:    {
        -: 3159:        typedef typename argument_type::pointer pointer;
        -: 3160:        return hash<pointer>()(__ptr.get());
        -: 3161:    }
        -: 3162:};
        -: 3163:
        -: 3164:struct __destruct_n
        -: 3165:{
        -: 3166:private:
        -: 3167:    size_t __size_;
        -: 3168:
        -: 3169:    template <class _Tp>
        -: 3170:    _LIBCPP_INLINE_VISIBILITY void __process(_Tp* __p, false_type) _NOEXCEPT
        -: 3171:        {for (size_t __i = 0; __i < __size_; ++__i, ++__p) __p->~_Tp();}
        -: 3172:
        -: 3173:    template <class _Tp>
        -: 3174:    _LIBCPP_INLINE_VISIBILITY void __process(_Tp*, true_type) _NOEXCEPT
        -: 3175:        {}
        -: 3176:
        -: 3177:    _LIBCPP_INLINE_VISIBILITY void __incr(false_type) _NOEXCEPT
        -: 3178:        {++__size_;}
        -: 3179:    _LIBCPP_INLINE_VISIBILITY void __incr(true_type) _NOEXCEPT
        -: 3180:        {}
        -: 3181:
        -: 3182:    _LIBCPP_INLINE_VISIBILITY void __set(size_t __s, false_type) _NOEXCEPT
        -: 3183:        {__size_ = __s;}
        -: 3184:    _LIBCPP_INLINE_VISIBILITY void __set(size_t, true_type) _NOEXCEPT
        -: 3185:        {}
        -: 3186:public:
        -: 3187:    _LIBCPP_INLINE_VISIBILITY explicit __destruct_n(size_t __s) _NOEXCEPT
        -: 3188:        : __size_(__s) {}
        -: 3189:
        -: 3190:    template <class _Tp>
        -: 3191:    _LIBCPP_INLINE_VISIBILITY void __incr(_Tp*) _NOEXCEPT
        -: 3192:        {__incr(integral_constant<bool, is_trivially_destructible<_Tp>::value>());}
        -: 3193:
        -: 3194:    template <class _Tp>
        -: 3195:    _LIBCPP_INLINE_VISIBILITY void __set(size_t __s, _Tp*) _NOEXCEPT
        -: 3196:        {__set(__s, integral_constant<bool, is_trivially_destructible<_Tp>::value>());}
        -: 3197:
        -: 3198:    template <class _Tp>
        -: 3199:    _LIBCPP_INLINE_VISIBILITY void operator()(_Tp* __p) _NOEXCEPT
        -: 3200:        {__process(__p, integral_constant<bool, is_trivially_destructible<_Tp>::value>());}
        -: 3201:};
        -: 3202:
        -: 3203:template <class _Alloc>
        -: 3204:class __allocator_destructor
        -: 3205:{
        -: 3206:    typedef allocator_traits<_Alloc> __alloc_traits;
        -: 3207:public:
        -: 3208:    typedef typename __alloc_traits::pointer pointer;
        -: 3209:    typedef typename __alloc_traits::size_type size_type;
        -: 3210:private:
        -: 3211:    _Alloc& __alloc_;
        -: 3212:    size_type __s_;
        -: 3213:public:
        -: 3214:    _LIBCPP_INLINE_VISIBILITY __allocator_destructor(_Alloc& __a, size_type __s)
        -: 3215:             _NOEXCEPT
    #####: 3216:        : __alloc_(__a), __s_(__s) {}
        -: 3217:    _LIBCPP_INLINE_VISIBILITY
        -: 3218:    void operator()(pointer __p) _NOEXCEPT
    #####: 3219:        {__alloc_traits::deallocate(__alloc_, __p, __s_);}
        -: 3220:};
        -: 3221:
        -: 3222:template <class _InputIterator, class _ForwardIterator>
        -: 3223:_ForwardIterator
        -: 3224:uninitialized_copy(_InputIterator __f, _InputIterator __l, _ForwardIterator __r)
        -: 3225:{
        -: 3226:    typedef typename iterator_traits<_ForwardIterator>::value_type value_type;
        -: 3227:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3228:    _ForwardIterator __s = __r;
        -: 3229:    try
        -: 3230:    {
        -: 3231:#endif
        -: 3232:        for (; __f != __l; ++__f, (void) ++__r)
        -: 3233:            ::new (static_cast<void*>(_VSTD::addressof(*__r))) value_type(*__f);
        -: 3234:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3235:    }
        -: 3236:    catch (...)
        -: 3237:    {
        -: 3238:        for (; __s != __r; ++__s)
        -: 3239:            __s->~value_type();
        -: 3240:        throw;
        -: 3241:    }
        -: 3242:#endif
        -: 3243:    return __r;
        -: 3244:}
        -: 3245:
        -: 3246:template <class _InputIterator, class _Size, class _ForwardIterator>
        -: 3247:_ForwardIterator
        -: 3248:uninitialized_copy_n(_InputIterator __f, _Size __n, _ForwardIterator __r)
        -: 3249:{
        -: 3250:    typedef typename iterator_traits<_ForwardIterator>::value_type value_type;
        -: 3251:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3252:    _ForwardIterator __s = __r;
        -: 3253:    try
        -: 3254:    {
        -: 3255:#endif
        -: 3256:        for (; __n > 0; ++__f, (void) ++__r, (void) --__n)
        -: 3257:            ::new (static_cast<void*>(_VSTD::addressof(*__r))) value_type(*__f);
        -: 3258:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3259:    }
        -: 3260:    catch (...)
        -: 3261:    {
        -: 3262:        for (; __s != __r; ++__s)
        -: 3263:            __s->~value_type();
        -: 3264:        throw;
        -: 3265:    }
        -: 3266:#endif
        -: 3267:    return __r;
        -: 3268:}
        -: 3269:
        -: 3270:template <class _ForwardIterator, class _Tp>
        -: 3271:void
        -: 3272:uninitialized_fill(_ForwardIterator __f, _ForwardIterator __l, const _Tp& __x)
        -: 3273:{
        -: 3274:    typedef typename iterator_traits<_ForwardIterator>::value_type value_type;
        -: 3275:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3276:    _ForwardIterator __s = __f;
        -: 3277:    try
        -: 3278:    {
        -: 3279:#endif
        -: 3280:        for (; __f != __l; ++__f)
        -: 3281:            ::new (static_cast<void*>(_VSTD::addressof(*__f))) value_type(__x);
        -: 3282:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3283:    }
        -: 3284:    catch (...)
        -: 3285:    {
        -: 3286:        for (; __s != __f; ++__s)
        -: 3287:            __s->~value_type();
        -: 3288:        throw;
        -: 3289:    }
        -: 3290:#endif
        -: 3291:}
        -: 3292:
        -: 3293:template <class _ForwardIterator, class _Size, class _Tp>
        -: 3294:_ForwardIterator
        -: 3295:uninitialized_fill_n(_ForwardIterator __f, _Size __n, const _Tp& __x)
        -: 3296:{
        -: 3297:    typedef typename iterator_traits<_ForwardIterator>::value_type value_type;
        -: 3298:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3299:    _ForwardIterator __s = __f;
        -: 3300:    try
        -: 3301:    {
        -: 3302:#endif
        -: 3303:        for (; __n > 0; ++__f, (void) --__n)
        -: 3304:            ::new (static_cast<void*>(_VSTD::addressof(*__f))) value_type(__x);
        -: 3305:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3306:    }
        -: 3307:    catch (...)
        -: 3308:    {
        -: 3309:        for (; __s != __f; ++__s)
        -: 3310:            __s->~value_type();
        -: 3311:        throw;
        -: 3312:    }
        -: 3313:#endif
        -: 3314:    return __f;
        -: 3315:}
        -: 3316:
        -: 3317:#if _LIBCPP_STD_VER > 14
        -: 3318:
        -: 3319:template <class _Tp>
        -: 3320:inline _LIBCPP_INLINE_VISIBILITY
        -: 3321:void destroy_at(_Tp* __loc) {
        -: 3322:    _LIBCPP_ASSERT(__loc, "null pointer given to destroy_at");
        -: 3323:    __loc->~_Tp();
        -: 3324:}
        -: 3325:
        -: 3326:template <class _ForwardIterator>
        -: 3327:inline _LIBCPP_INLINE_VISIBILITY
        -: 3328:void destroy(_ForwardIterator __first, _ForwardIterator __last) {
        -: 3329:    for (; __first != __last; ++__first)
        -: 3330:        _VSTD::destroy_at(_VSTD::addressof(*__first));
        -: 3331:}
        -: 3332:
        -: 3333:template <class _ForwardIterator, class _Size>
        -: 3334:inline _LIBCPP_INLINE_VISIBILITY
        -: 3335:_ForwardIterator destroy_n(_ForwardIterator __first, _Size __n) {
        -: 3336:    for (; __n > 0; (void)++__first, --__n)
        -: 3337:        _VSTD::destroy_at(_VSTD::addressof(*__first));
        -: 3338:    return __first;
        -: 3339:}
        -: 3340:
        -: 3341:template <class _ForwardIterator>
        -: 3342:inline _LIBCPP_INLINE_VISIBILITY
        -: 3343:void uninitialized_default_construct(_ForwardIterator __first, _ForwardIterator __last) {
        -: 3344:    using _Vt = typename iterator_traits<_ForwardIterator>::value_type;
        -: 3345:    auto __idx = __first;
        -: 3346:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3347:    try {
        -: 3348:#endif
        -: 3349:    for (; __idx != __last; ++__idx)
        -: 3350:        ::new((void*)_VSTD::addressof(*__idx)) _Vt;
        -: 3351:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3352:    } catch (...) {
        -: 3353:        _VSTD::destroy(__first, __idx);
        -: 3354:        throw;
        -: 3355:    }
        -: 3356:#endif
        -: 3357:}
        -: 3358:
        -: 3359:template <class _ForwardIterator, class _Size>
        -: 3360:inline _LIBCPP_INLINE_VISIBILITY
        -: 3361:_ForwardIterator uninitialized_default_construct_n(_ForwardIterator __first, _Size __n) {
        -: 3362:    using _Vt = typename iterator_traits<_ForwardIterator>::value_type;
        -: 3363:    auto __idx = __first;
        -: 3364:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3365:    try {
        -: 3366:#endif
        -: 3367:    for (; __n > 0; (void)++__idx, --__n)
        -: 3368:        ::new((void*)_VSTD::addressof(*__idx)) _Vt;
        -: 3369:    return __idx;
        -: 3370:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3371:    } catch (...) {
        -: 3372:        _VSTD::destroy(__first, __idx);
        -: 3373:        throw;
        -: 3374:    }
        -: 3375:#endif
        -: 3376:}
        -: 3377:
        -: 3378:
        -: 3379:template <class _ForwardIterator>
        -: 3380:inline _LIBCPP_INLINE_VISIBILITY
        -: 3381:void uninitialized_value_construct(_ForwardIterator __first, _ForwardIterator __last) {
        -: 3382:    using _Vt = typename iterator_traits<_ForwardIterator>::value_type;
        -: 3383:    auto __idx = __first;
        -: 3384:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3385:    try {
        -: 3386:#endif
        -: 3387:    for (; __idx != __last; ++__idx)
        -: 3388:        ::new((void*)_VSTD::addressof(*__idx)) _Vt();
        -: 3389:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3390:    } catch (...) {
        -: 3391:        _VSTD::destroy(__first, __idx);
        -: 3392:        throw;
        -: 3393:    }
        -: 3394:#endif
        -: 3395:}
        -: 3396:
        -: 3397:template <class _ForwardIterator, class _Size>
        -: 3398:inline _LIBCPP_INLINE_VISIBILITY
        -: 3399:_ForwardIterator uninitialized_value_construct_n(_ForwardIterator __first, _Size __n) {
        -: 3400:    using _Vt = typename iterator_traits<_ForwardIterator>::value_type;
        -: 3401:    auto __idx = __first;
        -: 3402:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3403:    try {
        -: 3404:#endif
        -: 3405:    for (; __n > 0; (void)++__idx, --__n)
        -: 3406:        ::new((void*)_VSTD::addressof(*__idx)) _Vt();
        -: 3407:    return __idx;
        -: 3408:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3409:    } catch (...) {
        -: 3410:        _VSTD::destroy(__first, __idx);
        -: 3411:        throw;
        -: 3412:    }
        -: 3413:#endif
        -: 3414:}
        -: 3415:
        -: 3416:
        -: 3417:template <class _InputIt, class _ForwardIt>
        -: 3418:inline _LIBCPP_INLINE_VISIBILITY
        -: 3419:_ForwardIt uninitialized_move(_InputIt __first, _InputIt __last, _ForwardIt __first_res) {
        -: 3420:    using _Vt = typename iterator_traits<_ForwardIt>::value_type;
        -: 3421:    auto __idx = __first_res;
        -: 3422:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3423:    try {
        -: 3424:#endif
        -: 3425:    for (; __first != __last; (void)++__idx, ++__first)
        -: 3426:        ::new((void*)_VSTD::addressof(*__idx)) _Vt(std::move(*__first));
        -: 3427:    return __idx;
        -: 3428:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3429:    } catch (...) {
        -: 3430:        _VSTD::destroy(__first_res, __idx);
        -: 3431:        throw;
        -: 3432:    }
        -: 3433:#endif
        -: 3434:}
        -: 3435:
        -: 3436:template <class _InputIt, class _Size, class _ForwardIt>
        -: 3437:inline _LIBCPP_INLINE_VISIBILITY
        -: 3438:pair<_InputIt, _ForwardIt>
        -: 3439:uninitialized_move_n(_InputIt __first, _Size __n, _ForwardIt __first_res) {
        -: 3440:    using _Vt = typename iterator_traits<_ForwardIt>::value_type;
        -: 3441:    auto __idx = __first_res;
        -: 3442:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3443:    try {
        -: 3444:#endif
        -: 3445:    for (; __n > 0; ++__idx, (void)++__first, --__n)
        -: 3446:        ::new((void*)_VSTD::addressof(*__idx)) _Vt(std::move(*__first));
        -: 3447:    return {__first, __idx};
        -: 3448:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3449:    } catch (...) {
        -: 3450:        _VSTD::destroy(__first_res, __idx);
        -: 3451:        throw;
        -: 3452:    }
        -: 3453:#endif
        -: 3454:}
        -: 3455:
        -: 3456:
        -: 3457:#endif // _LIBCPP_STD_VER > 14
        -: 3458:
        -: 3459:// NOTE: Relaxed and acq/rel atomics (for increment and decrement respectively)
        -: 3460:// should be sufficient for thread safety.
        -: 3461:// See https://bugs.llvm.org/show_bug.cgi?id=22803
        -: 3462:#if defined(__clang__) && __has_builtin(__atomic_add_fetch)          \
        -: 3463:                       && defined(__ATOMIC_RELAXED)                  \
        -: 3464:                       && defined(__ATOMIC_ACQ_REL)
        -: 3465:#   define _LIBCPP_HAS_BUILTIN_ATOMIC_SUPPORT
        -: 3466:#elif !defined(__clang__) && defined(_GNUC_VER) && _GNUC_VER >= 407
        -: 3467:#   define _LIBCPP_HAS_BUILTIN_ATOMIC_SUPPORT
        -: 3468:#endif
        -: 3469:
        -: 3470:template <class _Tp>
        -: 3471:inline _LIBCPP_INLINE_VISIBILITY _Tp
        -: 3472:__libcpp_atomic_refcount_increment(_Tp& __t) _NOEXCEPT
        -: 3473:{
        -: 3474:#if defined(_LIBCPP_HAS_BUILTIN_ATOMIC_SUPPORT) && !defined(_LIBCPP_HAS_NO_THREADS)
    #####: 3475:    return __atomic_add_fetch(&__t, 1, __ATOMIC_RELAXED);
        -: 3476:#else
        -: 3477:    return __t += 1;
        -: 3478:#endif
        -: 3479:}
        -: 3480:
        -: 3481:template <class _Tp>
        -: 3482:inline _LIBCPP_INLINE_VISIBILITY _Tp
        -: 3483:__libcpp_atomic_refcount_decrement(_Tp& __t) _NOEXCEPT
        -: 3484:{
        -: 3485:#if defined(_LIBCPP_HAS_BUILTIN_ATOMIC_SUPPORT) && !defined(_LIBCPP_HAS_NO_THREADS)
    #####: 3486:    return __atomic_add_fetch(&__t, -1, __ATOMIC_ACQ_REL);
        -: 3487:#else
        -: 3488:    return __t -= 1;
        -: 3489:#endif
        -: 3490:}
        -: 3491:
        -: 3492:class _LIBCPP_EXCEPTION_ABI bad_weak_ptr
        -: 3493:    : public std::exception
        -: 3494:{
        -: 3495:public:
        -: 3496:    virtual ~bad_weak_ptr() _NOEXCEPT;
        -: 3497:    virtual const char* what() const  _NOEXCEPT;
        -: 3498:};
        -: 3499:
        -: 3500:_LIBCPP_NORETURN inline _LIBCPP_INLINE_VISIBILITY
        -: 3501:void __throw_bad_weak_ptr()
        -: 3502:{
        -: 3503:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3504:    throw bad_weak_ptr();
        -: 3505:#else
        -: 3506:    _VSTD::abort();
        -: 3507:#endif
        -: 3508:}
        -: 3509:
        -: 3510:template<class _Tp> class _LIBCPP_TEMPLATE_VIS weak_ptr;
        -: 3511:
        -: 3512:class _LIBCPP_TYPE_VIS __shared_count
        -: 3513:{
        -: 3514:    __shared_count(const __shared_count&);
        -: 3515:    __shared_count& operator=(const __shared_count&);
        -: 3516:
        -: 3517:protected:
        -: 3518:    long __shared_owners_;
        -: 3519:    virtual ~__shared_count();
        -: 3520:private:
        -: 3521:    virtual void __on_zero_shared() _NOEXCEPT = 0;
        -: 3522:
        -: 3523:public:
        -: 3524:    _LIBCPP_INLINE_VISIBILITY
        -: 3525:    explicit __shared_count(long __refs = 0) _NOEXCEPT
    #####: 3526:        : __shared_owners_(__refs) {}
        -: 3527:
        -: 3528:#if defined(_LIBCPP_BUILDING_LIBRARY) && \
        -: 3529:    defined(_LIBCPP_DEPRECATED_ABI_LEGACY_LIBRARY_DEFINITIONS_FOR_INLINE_FUNCTIONS)
        -: 3530:    void __add_shared() _NOEXCEPT;
        -: 3531:    bool __release_shared() _NOEXCEPT;
        -: 3532:#else
        -: 3533:    _LIBCPP_INLINE_VISIBILITY
        -: 3534:    void __add_shared() _NOEXCEPT {
    #####: 3535:      __libcpp_atomic_refcount_increment(__shared_owners_);
    #####: 3536:    }
        -: 3537:    _LIBCPP_INLINE_VISIBILITY
        -: 3538:    bool __release_shared() _NOEXCEPT {
    #####: 3539:      if (__libcpp_atomic_refcount_decrement(__shared_owners_) == -1) {
    #####: 3540:        __on_zero_shared();
    #####: 3541:        return true;
        -: 3542:      }
    #####: 3543:      return false;
    #####: 3544:    }
        -: 3545:#endif
        -: 3546:    _LIBCPP_INLINE_VISIBILITY
        -: 3547:    long use_count() const _NOEXCEPT {
        -: 3548:        return __libcpp_relaxed_load(&__shared_owners_) + 1;
        -: 3549:    }
        -: 3550:};
        -: 3551:
        -: 3552:class _LIBCPP_TYPE_VIS __shared_weak_count
        -: 3553:    : private __shared_count
        -: 3554:{
        -: 3555:    long __shared_weak_owners_;
        -: 3556:
        -: 3557:public:
        -: 3558:    _LIBCPP_INLINE_VISIBILITY
        -: 3559:    explicit __shared_weak_count(long __refs = 0) _NOEXCEPT
    #####: 3560:        : __shared_count(__refs),
    #####: 3561:          __shared_weak_owners_(__refs) {}
        -: 3562:protected:
        -: 3563:    virtual ~__shared_weak_count();
        -: 3564:
        -: 3565:public:
        -: 3566:#if defined(_LIBCPP_BUILDING_LIBRARY) && \
        -: 3567:    defined(_LIBCPP_DEPRECATED_ABI_LEGACY_LIBRARY_DEFINITIONS_FOR_INLINE_FUNCTIONS)
        -: 3568:    void __add_shared() _NOEXCEPT;
        -: 3569:    void __add_weak() _NOEXCEPT;
        -: 3570:    void __release_shared() _NOEXCEPT;
        -: 3571:#else
        -: 3572:    _LIBCPP_INLINE_VISIBILITY
        -: 3573:    void __add_shared() _NOEXCEPT {
    #####: 3574:      __shared_count::__add_shared();
    #####: 3575:    }
        -: 3576:    _LIBCPP_INLINE_VISIBILITY
        -: 3577:    void __add_weak() _NOEXCEPT {
        -: 3578:      __libcpp_atomic_refcount_increment(__shared_weak_owners_);
        -: 3579:    }
        -: 3580:    _LIBCPP_INLINE_VISIBILITY
        -: 3581:    void __release_shared() _NOEXCEPT {
    #####: 3582:      if (__shared_count::__release_shared())
    #####: 3583:        __release_weak();
    #####: 3584:    }
        -: 3585:#endif
        -: 3586:    void __release_weak() _NOEXCEPT;
        -: 3587:    _LIBCPP_INLINE_VISIBILITY
        -: 3588:    long use_count() const _NOEXCEPT {return __shared_count::use_count();}
        -: 3589:    __shared_weak_count* lock() _NOEXCEPT;
        -: 3590:
        -: 3591:    // Define the function out only if we build static libc++ without RTTI.
        -: 3592:    // Otherwise we may break clients who need to compile their projects with
        -: 3593:    // -fno-rtti and yet link against a libc++.dylib compiled
        -: 3594:    // without -fno-rtti.
        -: 3595:#if !defined(_LIBCPP_NO_RTTI) || !defined(_LIBCPP_BUILD_STATIC)
        -: 3596:    virtual const void* __get_deleter(const type_info&) const _NOEXCEPT;
        -: 3597:#endif
        -: 3598:private:
        -: 3599:    virtual void __on_zero_shared_weak() _NOEXCEPT = 0;
        -: 3600:};
        -: 3601:
        -: 3602:template <class _Tp, class _Dp, class _Alloc>
    #####: 3603:class __shared_ptr_pointer
        -: 3604:    : public __shared_weak_count
        -: 3605:{
        -: 3606:    __compressed_pair<__compressed_pair<_Tp, _Dp>, _Alloc> __data_;
        -: 3607:public:
        -: 3608:    _LIBCPP_INLINE_VISIBILITY
    #####: 3609:    __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a)
    #####: 3610:        :  __data_(__compressed_pair<_Tp, _Dp>(__p, _VSTD::move(__d)), _VSTD::move(__a)) {}
        -: 3611:
        -: 3612:#ifndef _LIBCPP_NO_RTTI
        -: 3613:    virtual const void* __get_deleter(const type_info&) const _NOEXCEPT;
        -: 3614:#endif
        -: 3615:
        -: 3616:private:
        -: 3617:    virtual void __on_zero_shared() _NOEXCEPT;
        -: 3618:    virtual void __on_zero_shared_weak() _NOEXCEPT;
        -: 3619:};
        -: 3620:
        -: 3621:#ifndef _LIBCPP_NO_RTTI
        -: 3622:
        -: 3623:template <class _Tp, class _Dp, class _Alloc>
        -: 3624:const void*
        -: 3625:__shared_ptr_pointer<_Tp, _Dp, _Alloc>::__get_deleter(const type_info& __t) const _NOEXCEPT
        -: 3626:{
    #####: 3627:    return __t == typeid(_Dp) ? _VSTD::addressof(__data_.first().second()) : nullptr;
        -: 3628:}
        -: 3629:
        -: 3630:#endif  // _LIBCPP_NO_RTTI
        -: 3631:
        -: 3632:template <class _Tp, class _Dp, class _Alloc>
        -: 3633:void
        -: 3634:__shared_ptr_pointer<_Tp, _Dp, _Alloc>::__on_zero_shared() _NOEXCEPT
        -: 3635:{
    #####: 3636:    __data_.first().second()(__data_.first().first());
    #####: 3637:    __data_.first().second().~_Dp();
    #####: 3638:}
        -: 3639:
        -: 3640:template <class _Tp, class _Dp, class _Alloc>
        -: 3641:void
        -: 3642:__shared_ptr_pointer<_Tp, _Dp, _Alloc>::__on_zero_shared_weak() _NOEXCEPT
        -: 3643:{
        -: 3644:    typedef typename __allocator_traits_rebind<_Alloc, __shared_ptr_pointer>::type _Al;
        -: 3645:    typedef allocator_traits<_Al> _ATraits;
        -: 3646:    typedef pointer_traits<typename _ATraits::pointer> _PTraits;
        -: 3647:
    #####: 3648:    _Al __a(__data_.second());
    #####: 3649:    __data_.second().~_Alloc();
    #####: 3650:    __a.deallocate(_PTraits::pointer_to(*this), 1);
    #####: 3651:}
        -: 3652:
        -: 3653:template <class _Tp, class _Alloc>
    #####: 3654:class __shared_ptr_emplace
        -: 3655:    : public __shared_weak_count
        -: 3656:{
        -: 3657:    __compressed_pair<_Alloc, _Tp> __data_;
        -: 3658:public:
        -: 3659:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 3660:
        -: 3661:    _LIBCPP_INLINE_VISIBILITY
    #####: 3662:    __shared_ptr_emplace(_Alloc __a)
    #####: 3663:        :  __data_(_VSTD::move(__a)) {}
        -: 3664:
        -: 3665:    template <class ..._Args>
        -: 3666:        _LIBCPP_INLINE_VISIBILITY
    #####: 3667:        __shared_ptr_emplace(_Alloc __a, _Args&& ...__args)
    #####: 3668:            :  __data_(piecewise_construct, _VSTD::forward_as_tuple(__a),
    #####: 3669:                   _VSTD::forward_as_tuple(_VSTD::forward<_Args>(__args)...)) {}
        -: 3670:
        -: 3671:#else  // _LIBCPP_HAS_NO_VARIADICS
        -: 3672:
        -: 3673:    _LIBCPP_INLINE_VISIBILITY
        -: 3674:    __shared_ptr_emplace(_Alloc __a)
        -: 3675:        :  __data_(__a) {}
        -: 3676:
        -: 3677:    template <class _A0>
        -: 3678:        _LIBCPP_INLINE_VISIBILITY
        -: 3679:        __shared_ptr_emplace(_Alloc __a, _A0& __a0)
        -: 3680:            :  __data_(__a, _Tp(__a0)) {}
        -: 3681:
        -: 3682:    template <class _A0, class _A1>
        -: 3683:        _LIBCPP_INLINE_VISIBILITY
        -: 3684:        __shared_ptr_emplace(_Alloc __a, _A0& __a0, _A1& __a1)
        -: 3685:            :  __data_(__a, _Tp(__a0, __a1)) {}
        -: 3686:
        -: 3687:    template <class _A0, class _A1, class _A2>
        -: 3688:        _LIBCPP_INLINE_VISIBILITY
        -: 3689:        __shared_ptr_emplace(_Alloc __a, _A0& __a0, _A1& __a1, _A2& __a2)
        -: 3690:            :  __data_(__a, _Tp(__a0, __a1, __a2)) {}
        -: 3691:
        -: 3692:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 3693:
        -: 3694:private:
        -: 3695:    virtual void __on_zero_shared() _NOEXCEPT;
        -: 3696:    virtual void __on_zero_shared_weak() _NOEXCEPT;
        -: 3697:public:
        -: 3698:    _LIBCPP_INLINE_VISIBILITY
    #####: 3699:    _Tp* get() _NOEXCEPT {return _VSTD::addressof(__data_.second());}
        -: 3700:};
        -: 3701:
        -: 3702:template <class _Tp, class _Alloc>
        -: 3703:void
        -: 3704:__shared_ptr_emplace<_Tp, _Alloc>::__on_zero_shared() _NOEXCEPT
        -: 3705:{
    #####: 3706:    __data_.second().~_Tp();
    #####: 3707:}
        -: 3708:
        -: 3709:template <class _Tp, class _Alloc>
        -: 3710:void
        -: 3711:__shared_ptr_emplace<_Tp, _Alloc>::__on_zero_shared_weak() _NOEXCEPT
        -: 3712:{
        -: 3713:    typedef typename __allocator_traits_rebind<_Alloc, __shared_ptr_emplace>::type _Al;
        -: 3714:    typedef allocator_traits<_Al> _ATraits;
        -: 3715:    typedef pointer_traits<typename _ATraits::pointer> _PTraits;
    #####: 3716:    _Al __a(__data_.first());
    #####: 3717:    __data_.first().~_Alloc();
    #####: 3718:    __a.deallocate(_PTraits::pointer_to(*this), 1);
    #####: 3719:}
        -: 3720:
        -: 3721:struct __shared_ptr_dummy_rebind_allocator_type;
        -: 3722:template <>
        -: 3723:class _LIBCPP_TEMPLATE_VIS allocator<__shared_ptr_dummy_rebind_allocator_type>
        -: 3724:{
        -: 3725:public:
        -: 3726:    template <class _Other>
        -: 3727:    struct rebind
        -: 3728:    {
        -: 3729:        typedef allocator<_Other> other;
        -: 3730:    };
        -: 3731:};
        -: 3732:
        -: 3733:template<class _Tp> class _LIBCPP_TEMPLATE_VIS enable_shared_from_this;
        -: 3734:
        -: 3735:template<class _Tp>
        -: 3736:class _LIBCPP_TEMPLATE_VIS shared_ptr
        -: 3737:{
        -: 3738:public:
        -: 3739:    typedef _Tp element_type;
        -: 3740:
        -: 3741:#if _LIBCPP_STD_VER > 14
        -: 3742:    typedef weak_ptr<_Tp> weak_type;
        -: 3743:#endif
        -: 3744:private:
        -: 3745:    element_type*      __ptr_;
        -: 3746:    __shared_weak_count* __cntrl_;
        -: 3747:
        -: 3748:    struct __nat {int __for_bool_;};
        -: 3749:public:
        -: 3750:    _LIBCPP_INLINE_VISIBILITY
        -: 3751:    _LIBCPP_CONSTEXPR shared_ptr() _NOEXCEPT;
        -: 3752:    _LIBCPP_INLINE_VISIBILITY
        -: 3753:    _LIBCPP_CONSTEXPR shared_ptr(nullptr_t) _NOEXCEPT;
        -: 3754:    template<class _Yp>
        -: 3755:        explicit shared_ptr(_Yp* __p,
        -: 3756:                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type = __nat());
        -: 3757:    template<class _Yp, class _Dp>
        -: 3758:        shared_ptr(_Yp* __p, _Dp __d,
        -: 3759:                   typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type = __nat());
        -: 3760:    template<class _Yp, class _Dp, class _Alloc>
        -: 3761:        shared_ptr(_Yp* __p, _Dp __d, _Alloc __a,
        -: 3762:                   typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type = __nat());
        -: 3763:    template <class _Dp> shared_ptr(nullptr_t __p, _Dp __d);
        -: 3764:    template <class _Dp, class _Alloc> shared_ptr(nullptr_t __p, _Dp __d, _Alloc __a);
        -: 3765:    template<class _Yp> _LIBCPP_INLINE_VISIBILITY shared_ptr(const shared_ptr<_Yp>& __r, element_type* __p) _NOEXCEPT;
        -: 3766:    _LIBCPP_INLINE_VISIBILITY
        -: 3767:    shared_ptr(const shared_ptr& __r) _NOEXCEPT;
        -: 3768:    template<class _Yp>
        -: 3769:        _LIBCPP_INLINE_VISIBILITY
        -: 3770:        shared_ptr(const shared_ptr<_Yp>& __r,
        -: 3771:                   typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type = __nat())
        -: 3772:                       _NOEXCEPT;
        -: 3773:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3774:    _LIBCPP_INLINE_VISIBILITY
        -: 3775:    shared_ptr(shared_ptr&& __r) _NOEXCEPT;
        -: 3776:    template<class _Yp> _LIBCPP_INLINE_VISIBILITY  shared_ptr(shared_ptr<_Yp>&& __r,
        -: 3777:                   typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type = __nat())
        -: 3778:                       _NOEXCEPT;
        -: 3779:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3780:    template<class _Yp> explicit shared_ptr(const weak_ptr<_Yp>& __r,
        -: 3781:                   typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type= __nat());
        -: 3782:#if _LIBCPP_STD_VER <= 14 || defined(_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR)
        -: 3783:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3784:    template<class _Yp>
        -: 3785:        shared_ptr(auto_ptr<_Yp>&& __r,
        -: 3786:                   typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type = __nat());
        -: 3787:#else
        -: 3788:    template<class _Yp>
        -: 3789:        shared_ptr(auto_ptr<_Yp> __r,
        -: 3790:                   typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type = __nat());
        -: 3791:#endif
        -: 3792:#endif
        -: 3793:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3794:    template <class _Yp, class _Dp>
        -: 3795:        shared_ptr(unique_ptr<_Yp, _Dp>&&,
        -: 3796:                   typename enable_if
        -: 3797:                   <
        -: 3798:                       !is_lvalue_reference<_Dp>::value &&
        -: 3799:                       !is_array<_Yp>::value &&
        -: 3800:                       is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 3801:                       __nat
        -: 3802:                   >::type = __nat());
        -: 3803:    template <class _Yp, class _Dp>
        -: 3804:        shared_ptr(unique_ptr<_Yp, _Dp>&&,
        -: 3805:                   typename enable_if
        -: 3806:                   <
        -: 3807:                       is_lvalue_reference<_Dp>::value &&
        -: 3808:                       !is_array<_Yp>::value &&
        -: 3809:                       is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 3810:                       __nat
        -: 3811:                   >::type = __nat());
        -: 3812:#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3813:    template <class _Yp, class _Dp>
        -: 3814:        shared_ptr(unique_ptr<_Yp, _Dp>,
        -: 3815:                   typename enable_if
        -: 3816:                   <
        -: 3817:                       !is_lvalue_reference<_Dp>::value &&
        -: 3818:                       !is_array<_Yp>::value &&
        -: 3819:                       is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 3820:                       __nat
        -: 3821:                   >::type = __nat());
        -: 3822:    template <class _Yp, class _Dp>
        -: 3823:        shared_ptr(unique_ptr<_Yp, _Dp>,
        -: 3824:                   typename enable_if
        -: 3825:                   <
        -: 3826:                       is_lvalue_reference<_Dp>::value &&
        -: 3827:                       !is_array<_Yp>::value &&
        -: 3828:                       is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 3829:                       __nat
        -: 3830:                   >::type = __nat());
        -: 3831:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3832:
        -: 3833:    ~shared_ptr();
        -: 3834:
        -: 3835:    _LIBCPP_INLINE_VISIBILITY
        -: 3836:    shared_ptr& operator=(const shared_ptr& __r) _NOEXCEPT;
        -: 3837:    template<class _Yp>
        -: 3838:        typename enable_if
        -: 3839:        <
        -: 3840:            is_convertible<_Yp*, element_type*>::value,
        -: 3841:            shared_ptr&
        -: 3842:        >::type
        -: 3843:        _LIBCPP_INLINE_VISIBILITY
        -: 3844:        operator=(const shared_ptr<_Yp>& __r) _NOEXCEPT;
        -: 3845:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3846:    _LIBCPP_INLINE_VISIBILITY
        -: 3847:    shared_ptr& operator=(shared_ptr&& __r) _NOEXCEPT;
        -: 3848:    template<class _Yp>
        -: 3849:        typename enable_if
        -: 3850:        <
        -: 3851:            is_convertible<_Yp*, element_type*>::value,
        -: 3852:            shared_ptr<_Tp>&
        -: 3853:        >::type
        -: 3854:        _LIBCPP_INLINE_VISIBILITY
        -: 3855:        operator=(shared_ptr<_Yp>&& __r);
        -: 3856:#if _LIBCPP_STD_VER <= 14 || defined(_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR)
        -: 3857:    template<class _Yp>
        -: 3858:        _LIBCPP_INLINE_VISIBILITY
        -: 3859:        typename enable_if
        -: 3860:        <
        -: 3861:            !is_array<_Yp>::value &&
        -: 3862:            is_convertible<_Yp*, element_type*>::value,
        -: 3863:            shared_ptr
        -: 3864:        >::type&
        -: 3865:        operator=(auto_ptr<_Yp>&& __r);
        -: 3866:#endif
        -: 3867:#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3868:#if _LIBCPP_STD_VER <= 14 || defined(_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR)
        -: 3869:    template<class _Yp>
        -: 3870:        _LIBCPP_INLINE_VISIBILITY
        -: 3871:        typename enable_if
        -: 3872:        <
        -: 3873:            !is_array<_Yp>::value &&
        -: 3874:            is_convertible<_Yp*, element_type*>::value,
        -: 3875:            shared_ptr&
        -: 3876:        >::type
        -: 3877:        operator=(auto_ptr<_Yp> __r);
        -: 3878:#endif
        -: 3879:#endif
        -: 3880:    template <class _Yp, class _Dp>
        -: 3881:        typename enable_if
        -: 3882:        <
        -: 3883:            !is_array<_Yp>::value &&
        -: 3884:            is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 3885:            shared_ptr&
        -: 3886:        >::type
        -: 3887:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3888:        _LIBCPP_INLINE_VISIBILITY
        -: 3889:        operator=(unique_ptr<_Yp, _Dp>&& __r);
        -: 3890:#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3891:        _LIBCPP_INLINE_VISIBILITY
        -: 3892:        operator=(unique_ptr<_Yp, _Dp> __r);
        -: 3893:#endif
        -: 3894:
        -: 3895:    _LIBCPP_INLINE_VISIBILITY
        -: 3896:    void swap(shared_ptr& __r) _NOEXCEPT;
        -: 3897:    _LIBCPP_INLINE_VISIBILITY
        -: 3898:    void reset() _NOEXCEPT;
        -: 3899:    template<class _Yp>
        -: 3900:        typename enable_if
        -: 3901:        <
        -: 3902:            is_convertible<_Yp*, element_type*>::value,
        -: 3903:            void
        -: 3904:        >::type
        -: 3905:        _LIBCPP_INLINE_VISIBILITY
        -: 3906:        reset(_Yp* __p);
        -: 3907:    template<class _Yp, class _Dp>
        -: 3908:        typename enable_if
        -: 3909:        <
        -: 3910:            is_convertible<_Yp*, element_type*>::value,
        -: 3911:            void
        -: 3912:        >::type
        -: 3913:        _LIBCPP_INLINE_VISIBILITY
        -: 3914:        reset(_Yp* __p, _Dp __d);
        -: 3915:    template<class _Yp, class _Dp, class _Alloc>
        -: 3916:        typename enable_if
        -: 3917:        <
        -: 3918:            is_convertible<_Yp*, element_type*>::value,
        -: 3919:            void
        -: 3920:        >::type
        -: 3921:        _LIBCPP_INLINE_VISIBILITY
        -: 3922:        reset(_Yp* __p, _Dp __d, _Alloc __a);
        -: 3923:
        -: 3924:    _LIBCPP_INLINE_VISIBILITY
    #####: 3925:    element_type* get() const _NOEXCEPT {return __ptr_;}
        -: 3926:    _LIBCPP_INLINE_VISIBILITY
        -: 3927:    typename add_lvalue_reference<element_type>::type operator*() const _NOEXCEPT
    #####: 3928:        {return *__ptr_;}
        -: 3929:    _LIBCPP_INLINE_VISIBILITY
    #####: 3930:    element_type* operator->() const _NOEXCEPT {return __ptr_;}
        -: 3931:    _LIBCPP_INLINE_VISIBILITY
        -: 3932:    long use_count() const _NOEXCEPT {return __cntrl_ ? __cntrl_->use_count() : 0;}
        -: 3933:    _LIBCPP_INLINE_VISIBILITY
        -: 3934:    bool unique() const _NOEXCEPT {return use_count() == 1;}
        -: 3935:    _LIBCPP_INLINE_VISIBILITY
    #####: 3936:    _LIBCPP_EXPLICIT operator bool() const _NOEXCEPT {return get() != 0;}
        -: 3937:    template <class _Up>
        -: 3938:        _LIBCPP_INLINE_VISIBILITY
        -: 3939:        bool owner_before(shared_ptr<_Up> const& __p) const _NOEXCEPT
        -: 3940:        {return __cntrl_ < __p.__cntrl_;}
        -: 3941:    template <class _Up>
        -: 3942:        _LIBCPP_INLINE_VISIBILITY
        -: 3943:        bool owner_before(weak_ptr<_Up> const& __p) const _NOEXCEPT
        -: 3944:        {return __cntrl_ < __p.__cntrl_;}
        -: 3945:    _LIBCPP_INLINE_VISIBILITY
        -: 3946:    bool
        -: 3947:    __owner_equivalent(const shared_ptr& __p) const
        -: 3948:        {return __cntrl_ == __p.__cntrl_;}
        -: 3949:
        -: 3950:#ifndef _LIBCPP_NO_RTTI
        -: 3951:    template <class _Dp>
        -: 3952:        _LIBCPP_INLINE_VISIBILITY
        -: 3953:        _Dp* __get_deleter() const _NOEXCEPT
        -: 3954:            {return static_cast<_Dp*>(__cntrl_
        -: 3955:                    ? const_cast<void *>(__cntrl_->__get_deleter(typeid(_Dp)))
        -: 3956:                      : nullptr);}
        -: 3957:#endif  // _LIBCPP_NO_RTTI
        -: 3958:
        -: 3959:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 3960:
        -: 3961:    template<class ..._Args>
        -: 3962:        static
        -: 3963:        shared_ptr<_Tp>
        -: 3964:        make_shared(_Args&& ...__args);
        -: 3965:
        -: 3966:    template<class _Alloc, class ..._Args>
        -: 3967:        static
        -: 3968:        shared_ptr<_Tp>
        -: 3969:        allocate_shared(const _Alloc& __a, _Args&& ...__args);
        -: 3970:
        -: 3971:#else  // _LIBCPP_HAS_NO_VARIADICS
        -: 3972:
        -: 3973:    static shared_ptr<_Tp> make_shared();
        -: 3974:
        -: 3975:    template<class _A0>
        -: 3976:        static shared_ptr<_Tp> make_shared(_A0&);
        -: 3977:
        -: 3978:    template<class _A0, class _A1>
        -: 3979:        static shared_ptr<_Tp> make_shared(_A0&, _A1&);
        -: 3980:
        -: 3981:    template<class _A0, class _A1, class _A2>
        -: 3982:        static shared_ptr<_Tp> make_shared(_A0&, _A1&, _A2&);
        -: 3983:
        -: 3984:    template<class _Alloc>
        -: 3985:        static shared_ptr<_Tp>
        -: 3986:        allocate_shared(const _Alloc& __a);
        -: 3987:
        -: 3988:    template<class _Alloc, class _A0>
        -: 3989:        static shared_ptr<_Tp>
        -: 3990:        allocate_shared(const _Alloc& __a, _A0& __a0);
        -: 3991:
        -: 3992:    template<class _Alloc, class _A0, class _A1>
        -: 3993:        static shared_ptr<_Tp>
        -: 3994:        allocate_shared(const _Alloc& __a, _A0& __a0, _A1& __a1);
        -: 3995:
        -: 3996:    template<class _Alloc, class _A0, class _A1, class _A2>
        -: 3997:        static shared_ptr<_Tp>
        -: 3998:        allocate_shared(const _Alloc& __a, _A0& __a0, _A1& __a1, _A2& __a2);
        -: 3999:
        -: 4000:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 4001:
        -: 4002:private:
        -: 4003:    template <class _Yp, bool = is_function<_Yp>::value>
        -: 4004:        struct __shared_ptr_default_allocator
        -: 4005:        {
        -: 4006:            typedef allocator<_Yp> type;
        -: 4007:        };
        -: 4008:
        -: 4009:    template <class _Yp>
        -: 4010:        struct __shared_ptr_default_allocator<_Yp, true>
        -: 4011:        {
        -: 4012:            typedef allocator<__shared_ptr_dummy_rebind_allocator_type> type;
        -: 4013:        };
        -: 4014:
        -: 4015:    template <class _Yp, class _OrigPtr>
        -: 4016:        _LIBCPP_INLINE_VISIBILITY
        -: 4017:        typename enable_if<is_convertible<_OrigPtr*,
        -: 4018:                                          const enable_shared_from_this<_Yp>*
        -: 4019:        >::value,
        -: 4020:            void>::type
        -: 4021:        __enable_weak_this(const enable_shared_from_this<_Yp>* __e,
        -: 4022:                           _OrigPtr* __ptr) _NOEXCEPT
        -: 4023:        {
        -: 4024:            typedef typename remove_cv<_Yp>::type _RawYp;
        -: 4025:            if (__e && __e->__weak_this_.expired())
        -: 4026:            {
        -: 4027:                __e->__weak_this_ = shared_ptr<_RawYp>(*this,
        -: 4028:                    const_cast<_RawYp*>(static_cast<const _Yp*>(__ptr)));
        -: 4029:            }
        -: 4030:        }
        -: 4031:
    #####: 4032:    _LIBCPP_INLINE_VISIBILITY void __enable_weak_this(...) _NOEXCEPT {}
        -: 4033:
        -: 4034:    template <class _Up> friend class _LIBCPP_TEMPLATE_VIS shared_ptr;
        -: 4035:    template <class _Up> friend class _LIBCPP_TEMPLATE_VIS weak_ptr;
        -: 4036:};
        -: 4037:
        -: 4038:
        -: 4039:template<class _Tp>
        -: 4040:inline
        -: 4041:_LIBCPP_CONSTEXPR
        -: 4042:shared_ptr<_Tp>::shared_ptr() _NOEXCEPT
    #####: 4043:    : __ptr_(0),
    #####: 4044:      __cntrl_(0)
    #####: 4045:{
    #####: 4046:}
        -: 4047:
        -: 4048:template<class _Tp>
        -: 4049:inline
        -: 4050:_LIBCPP_CONSTEXPR
        -: 4051:shared_ptr<_Tp>::shared_ptr(nullptr_t) _NOEXCEPT
    #####: 4052:    : __ptr_(0),
    #####: 4053:      __cntrl_(0)
    #####: 4054:{
    #####: 4055:}
        -: 4056:
        -: 4057:template<class _Tp>
        -: 4058:template<class _Yp>
        -: 4059:shared_ptr<_Tp>::shared_ptr(_Yp* __p,
        -: 4060:                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type)
    #####: 4061:    : __ptr_(__p)
    #####: 4062:{
    #####: 4063:    unique_ptr<_Yp> __hold(__p);
        -: 4064:    typedef typename __shared_ptr_default_allocator<_Yp>::type _AllocT;
        -: 4065:    typedef __shared_ptr_pointer<_Yp*, default_delete<_Yp>, _AllocT > _CntrlBlk;
    #####: 4066:    __cntrl_ = new _CntrlBlk(__p, default_delete<_Yp>(), _AllocT());
    #####: 4067:    __hold.release();
    #####: 4068:    __enable_weak_this(__p, __p);
    #####: 4069:}
        -: 4070:
        -: 4071:template<class _Tp>
        -: 4072:template<class _Yp, class _Dp>
        -: 4073:shared_ptr<_Tp>::shared_ptr(_Yp* __p, _Dp __d,
        -: 4074:                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type)
        -: 4075:    : __ptr_(__p)
        -: 4076:{
        -: 4077:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 4078:    try
        -: 4079:    {
        -: 4080:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 4081:        typedef typename __shared_ptr_default_allocator<_Yp>::type _AllocT;
        -: 4082:        typedef __shared_ptr_pointer<_Yp*, _Dp, _AllocT > _CntrlBlk;
        -: 4083:        __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());
        -: 4084:        __enable_weak_this(__p, __p);
        -: 4085:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 4086:    }
        -: 4087:    catch (...)
        -: 4088:    {
        -: 4089:        __d(__p);
        -: 4090:        throw;
        -: 4091:    }
        -: 4092:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 4093:}
        -: 4094:
        -: 4095:template<class _Tp>
        -: 4096:template<class _Dp>
        -: 4097:shared_ptr<_Tp>::shared_ptr(nullptr_t __p, _Dp __d)
        -: 4098:    : __ptr_(0)
        -: 4099:{
        -: 4100:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 4101:    try
        -: 4102:    {
        -: 4103:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 4104:        typedef typename __shared_ptr_default_allocator<_Tp>::type _AllocT;
        -: 4105:        typedef __shared_ptr_pointer<nullptr_t, _Dp, _AllocT > _CntrlBlk;
        -: 4106:        __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());
        -: 4107:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 4108:    }
        -: 4109:    catch (...)
        -: 4110:    {
        -: 4111:        __d(__p);
        -: 4112:        throw;
        -: 4113:    }
        -: 4114:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 4115:}
        -: 4116:
        -: 4117:template<class _Tp>
        -: 4118:template<class _Yp, class _Dp, class _Alloc>
        -: 4119:shared_ptr<_Tp>::shared_ptr(_Yp* __p, _Dp __d, _Alloc __a,
        -: 4120:                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type)
        -: 4121:    : __ptr_(__p)
        -: 4122:{
        -: 4123:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 4124:    try
        -: 4125:    {
        -: 4126:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 4127:        typedef __shared_ptr_pointer<_Yp*, _Dp, _Alloc> _CntrlBlk;
        -: 4128:        typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _A2;
        -: 4129:        typedef __allocator_destructor<_A2> _D2;
        -: 4130:        _A2 __a2(__a);
        -: 4131:        unique_ptr<_CntrlBlk, _D2> __hold2(__a2.allocate(1), _D2(__a2, 1));
        -: 4132:        ::new(static_cast<void*>(_VSTD::addressof(*__hold2.get())))
        -: 4133:            _CntrlBlk(__p, __d, __a);
        -: 4134:        __cntrl_ = _VSTD::addressof(*__hold2.release());
        -: 4135:        __enable_weak_this(__p, __p);
        -: 4136:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 4137:    }
        -: 4138:    catch (...)
        -: 4139:    {
        -: 4140:        __d(__p);
        -: 4141:        throw;
        -: 4142:    }
        -: 4143:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 4144:}
        -: 4145:
        -: 4146:template<class _Tp>
        -: 4147:template<class _Dp, class _Alloc>
        -: 4148:shared_ptr<_Tp>::shared_ptr(nullptr_t __p, _Dp __d, _Alloc __a)
        -: 4149:    : __ptr_(0)
        -: 4150:{
        -: 4151:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 4152:    try
        -: 4153:    {
        -: 4154:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 4155:        typedef __shared_ptr_pointer<nullptr_t, _Dp, _Alloc> _CntrlBlk;
        -: 4156:        typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _A2;
        -: 4157:        typedef __allocator_destructor<_A2> _D2;
        -: 4158:        _A2 __a2(__a);
        -: 4159:        unique_ptr<_CntrlBlk, _D2> __hold2(__a2.allocate(1), _D2(__a2, 1));
        -: 4160:        ::new(static_cast<void*>(_VSTD::addressof(*__hold2.get())))
        -: 4161:            _CntrlBlk(__p, __d, __a);
        -: 4162:        __cntrl_ = _VSTD::addressof(*__hold2.release());
        -: 4163:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 4164:    }
        -: 4165:    catch (...)
        -: 4166:    {
        -: 4167:        __d(__p);
        -: 4168:        throw;
        -: 4169:    }
        -: 4170:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 4171:}
        -: 4172:
        -: 4173:template<class _Tp>
        -: 4174:template<class _Yp>
        -: 4175:inline
        -: 4176:shared_ptr<_Tp>::shared_ptr(const shared_ptr<_Yp>& __r, element_type *__p) _NOEXCEPT
    #####: 4177:    : __ptr_(__p),
    #####: 4178:      __cntrl_(__r.__cntrl_)
    #####: 4179:{
    #####: 4180:    if (__cntrl_)
    #####: 4181:        __cntrl_->__add_shared();
    #####: 4182:}
        -: 4183:
        -: 4184:template<class _Tp>
        -: 4185:inline
        -: 4186:shared_ptr<_Tp>::shared_ptr(const shared_ptr& __r) _NOEXCEPT
    #####: 4187:    : __ptr_(__r.__ptr_),
    #####: 4188:      __cntrl_(__r.__cntrl_)
    #####: 4189:{
    #####: 4190:    if (__cntrl_)
    #####: 4191:        __cntrl_->__add_shared();
    #####: 4192:}
        -: 4193:
        -: 4194:template<class _Tp>
        -: 4195:template<class _Yp>
        -: 4196:inline
        -: 4197:shared_ptr<_Tp>::shared_ptr(const shared_ptr<_Yp>& __r,
        -: 4198:                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type)
        -: 4199:         _NOEXCEPT
    #####: 4200:    : __ptr_(__r.__ptr_),
    #####: 4201:      __cntrl_(__r.__cntrl_)
    #####: 4202:{
    #####: 4203:    if (__cntrl_)
    #####: 4204:        __cntrl_->__add_shared();
    #####: 4205:}
        -: 4206:
        -: 4207:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4208:
        -: 4209:template<class _Tp>
        -: 4210:inline
        -: 4211:shared_ptr<_Tp>::shared_ptr(shared_ptr&& __r) _NOEXCEPT
    #####: 4212:    : __ptr_(__r.__ptr_),
    #####: 4213:      __cntrl_(__r.__cntrl_)
    #####: 4214:{
    #####: 4215:    __r.__ptr_ = 0;
    #####: 4216:    __r.__cntrl_ = 0;
    #####: 4217:}
        -: 4218:
        -: 4219:template<class _Tp>
        -: 4220:template<class _Yp>
        -: 4221:inline
        -: 4222:shared_ptr<_Tp>::shared_ptr(shared_ptr<_Yp>&& __r,
        -: 4223:                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type)
        -: 4224:         _NOEXCEPT
    #####: 4225:    : __ptr_(__r.__ptr_),
    #####: 4226:      __cntrl_(__r.__cntrl_)
    #####: 4227:{
    #####: 4228:    __r.__ptr_ = 0;
    #####: 4229:    __r.__cntrl_ = 0;
    #####: 4230:}
        -: 4231:
        -: 4232:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4233:
        -: 4234:#if _LIBCPP_STD_VER <= 14 || defined(_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR)
        -: 4235:template<class _Tp>
        -: 4236:template<class _Yp>
        -: 4237:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4238:shared_ptr<_Tp>::shared_ptr(auto_ptr<_Yp>&& __r,
        -: 4239:#else
        -: 4240:shared_ptr<_Tp>::shared_ptr(auto_ptr<_Yp> __r,
        -: 4241:#endif
        -: 4242:                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type)
        -: 4243:    : __ptr_(__r.get())
        -: 4244:{
        -: 4245:    typedef __shared_ptr_pointer<_Yp*, default_delete<_Yp>, allocator<_Yp> > _CntrlBlk;
        -: 4246:    __cntrl_ = new _CntrlBlk(__r.get(), default_delete<_Yp>(), allocator<_Yp>());
        -: 4247:    __enable_weak_this(__r.get(), __r.get());
        -: 4248:    __r.release();
        -: 4249:}
        -: 4250:#endif
        -: 4251:
        -: 4252:template<class _Tp>
        -: 4253:template <class _Yp, class _Dp>
        -: 4254:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4255:shared_ptr<_Tp>::shared_ptr(unique_ptr<_Yp, _Dp>&& __r,
        -: 4256:#else
        -: 4257:shared_ptr<_Tp>::shared_ptr(unique_ptr<_Yp, _Dp> __r,
        -: 4258:#endif
        -: 4259:                            typename enable_if
        -: 4260:                            <
        -: 4261:                                !is_lvalue_reference<_Dp>::value &&
        -: 4262:                                !is_array<_Yp>::value &&
        -: 4263:                                is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 4264:                                __nat
        -: 4265:                            >::type)
        -: 4266:    : __ptr_(__r.get())
        -: 4267:{
        -: 4268:#if _LIBCPP_STD_VER > 11
        -: 4269:    if (__ptr_ == nullptr)
        -: 4270:        __cntrl_ = nullptr;
        -: 4271:    else
        -: 4272:#endif
        -: 4273:    {
        -: 4274:        typedef typename __shared_ptr_default_allocator<_Yp>::type _AllocT;
        -: 4275:        typedef __shared_ptr_pointer<_Yp*, _Dp, _AllocT > _CntrlBlk;
        -: 4276:        __cntrl_ = new _CntrlBlk(__r.get(), __r.get_deleter(), _AllocT());
        -: 4277:        __enable_weak_this(__r.get(), __r.get());
        -: 4278:    }
        -: 4279:    __r.release();
        -: 4280:}
        -: 4281:
        -: 4282:template<class _Tp>
        -: 4283:template <class _Yp, class _Dp>
        -: 4284:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4285:shared_ptr<_Tp>::shared_ptr(unique_ptr<_Yp, _Dp>&& __r,
        -: 4286:#else
        -: 4287:shared_ptr<_Tp>::shared_ptr(unique_ptr<_Yp, _Dp> __r,
        -: 4288:#endif
        -: 4289:                            typename enable_if
        -: 4290:                            <
        -: 4291:                                is_lvalue_reference<_Dp>::value &&
        -: 4292:                                !is_array<_Yp>::value &&
        -: 4293:                                is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 4294:                                __nat
        -: 4295:                            >::type)
        -: 4296:    : __ptr_(__r.get())
        -: 4297:{
        -: 4298:#if _LIBCPP_STD_VER > 11
        -: 4299:    if (__ptr_ == nullptr)
        -: 4300:        __cntrl_ = nullptr;
        -: 4301:    else
        -: 4302:#endif
        -: 4303:    {
        -: 4304:        typedef typename __shared_ptr_default_allocator<_Yp>::type _AllocT;
        -: 4305:        typedef __shared_ptr_pointer<_Yp*,
        -: 4306:                                     reference_wrapper<typename remove_reference<_Dp>::type>,
        -: 4307:                                     _AllocT > _CntrlBlk;
        -: 4308:        __cntrl_ = new _CntrlBlk(__r.get(), ref(__r.get_deleter()), _AllocT());
        -: 4309:        __enable_weak_this(__r.get(), __r.get());
        -: 4310:    }
        -: 4311:    __r.release();
        -: 4312:}
        -: 4313:
        -: 4314:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 4315:
        -: 4316:template<class _Tp>
        -: 4317:template<class ..._Args>
        -: 4318:shared_ptr<_Tp>
        -: 4319:shared_ptr<_Tp>::make_shared(_Args&& ...__args)
        -: 4320:{
        -: 4321:    static_assert( is_constructible<_Tp, _Args...>::value, "Can't construct object in make_shared" );
        -: 4322:    typedef __shared_ptr_emplace<_Tp, allocator<_Tp> > _CntrlBlk;
        -: 4323:    typedef allocator<_CntrlBlk> _A2;
        -: 4324:    typedef __allocator_destructor<_A2> _D2;
    #####: 4325:    _A2 __a2;
    #####: 4326:    unique_ptr<_CntrlBlk, _D2> __hold2(__a2.allocate(1), _D2(__a2, 1));
    #####: 4327:    ::new(__hold2.get()) _CntrlBlk(__a2, _VSTD::forward<_Args>(__args)...);
    #####: 4328:    shared_ptr<_Tp> __r;
    #####: 4329:    __r.__ptr_ = __hold2.get()->get();
    #####: 4330:    __r.__cntrl_ = __hold2.release();
    #####: 4331:    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);
    #####: 4332:    return __r;
    #####: 4333:}
        -: 4334:
        -: 4335:template<class _Tp>
        -: 4336:template<class _Alloc, class ..._Args>
        -: 4337:shared_ptr<_Tp>
        -: 4338:shared_ptr<_Tp>::allocate_shared(const _Alloc& __a, _Args&& ...__args)
        -: 4339:{
        -: 4340:    static_assert( is_constructible<_Tp, _Args...>::value, "Can't construct object in allocate_shared" );
        -: 4341:    typedef __shared_ptr_emplace<_Tp, _Alloc> _CntrlBlk;
        -: 4342:    typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _A2;
        -: 4343:    typedef __allocator_destructor<_A2> _D2;
        -: 4344:    _A2 __a2(__a);
        -: 4345:    unique_ptr<_CntrlBlk, _D2> __hold2(__a2.allocate(1), _D2(__a2, 1));
        -: 4346:    ::new(static_cast<void*>(_VSTD::addressof(*__hold2.get())))
        -: 4347:        _CntrlBlk(__a, _VSTD::forward<_Args>(__args)...);
        -: 4348:    shared_ptr<_Tp> __r;
        -: 4349:    __r.__ptr_ = __hold2.get()->get();
        -: 4350:    __r.__cntrl_ = _VSTD::addressof(*__hold2.release());
        -: 4351:    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);
        -: 4352:    return __r;
        -: 4353:}
        -: 4354:
        -: 4355:#else  // _LIBCPP_HAS_NO_VARIADICS
        -: 4356:
        -: 4357:template<class _Tp>
        -: 4358:shared_ptr<_Tp>
        -: 4359:shared_ptr<_Tp>::make_shared()
        -: 4360:{
        -: 4361:    static_assert((is_constructible<_Tp>::value), "Can't construct object in make_shared" );
        -: 4362:    typedef __shared_ptr_emplace<_Tp, allocator<_Tp> > _CntrlBlk;
        -: 4363:    typedef allocator<_CntrlBlk> _Alloc2;
        -: 4364:    typedef __allocator_destructor<_Alloc2> _D2;
        -: 4365:    _Alloc2 __alloc2;
        -: 4366:    unique_ptr<_CntrlBlk, _D2> __hold2(__alloc2.allocate(1), _D2(__alloc2, 1));
        -: 4367:    ::new(__hold2.get()) _CntrlBlk(__alloc2);
        -: 4368:    shared_ptr<_Tp> __r;
        -: 4369:    __r.__ptr_ = __hold2.get()->get();
        -: 4370:    __r.__cntrl_ = __hold2.release();
        -: 4371:    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);
        -: 4372:    return __r;
        -: 4373:}
        -: 4374:
        -: 4375:template<class _Tp>
        -: 4376:template<class _A0>
        -: 4377:shared_ptr<_Tp>
        -: 4378:shared_ptr<_Tp>::make_shared(_A0& __a0)
        -: 4379:{
        -: 4380:    static_assert((is_constructible<_Tp, _A0>::value), "Can't construct object in make_shared" );
        -: 4381:    typedef __shared_ptr_emplace<_Tp, allocator<_Tp> > _CntrlBlk;
        -: 4382:    typedef allocator<_CntrlBlk> _Alloc2;
        -: 4383:    typedef __allocator_destructor<_Alloc2> _D2;
        -: 4384:    _Alloc2 __alloc2;
        -: 4385:    unique_ptr<_CntrlBlk, _D2> __hold2(__alloc2.allocate(1), _D2(__alloc2, 1));
        -: 4386:    ::new(__hold2.get()) _CntrlBlk(__alloc2, __a0);
        -: 4387:    shared_ptr<_Tp> __r;
        -: 4388:    __r.__ptr_ = __hold2.get()->get();
        -: 4389:    __r.__cntrl_ = __hold2.release();
        -: 4390:    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);
        -: 4391:    return __r;
        -: 4392:}
        -: 4393:
        -: 4394:template<class _Tp>
        -: 4395:template<class _A0, class _A1>
        -: 4396:shared_ptr<_Tp>
        -: 4397:shared_ptr<_Tp>::make_shared(_A0& __a0, _A1& __a1)
        -: 4398:{
        -: 4399:    static_assert((is_constructible<_Tp, _A0, _A1>::value), "Can't construct object in make_shared" );
        -: 4400:    typedef __shared_ptr_emplace<_Tp, allocator<_Tp> > _CntrlBlk;
        -: 4401:    typedef allocator<_CntrlBlk> _Alloc2;
        -: 4402:    typedef __allocator_destructor<_Alloc2> _D2;
        -: 4403:    _Alloc2 __alloc2;
        -: 4404:    unique_ptr<_CntrlBlk, _D2> __hold2(__alloc2.allocate(1), _D2(__alloc2, 1));
        -: 4405:    ::new(__hold2.get()) _CntrlBlk(__alloc2, __a0, __a1);
        -: 4406:    shared_ptr<_Tp> __r;
        -: 4407:    __r.__ptr_ = __hold2.get()->get();
        -: 4408:    __r.__cntrl_ = __hold2.release();
        -: 4409:    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);
        -: 4410:    return __r;
        -: 4411:}
        -: 4412:
        -: 4413:template<class _Tp>
        -: 4414:template<class _A0, class _A1, class _A2>
        -: 4415:shared_ptr<_Tp>
        -: 4416:shared_ptr<_Tp>::make_shared(_A0& __a0, _A1& __a1, _A2& __a2)
        -: 4417:{
        -: 4418:    static_assert((is_constructible<_Tp, _A0, _A1, _A2>::value), "Can't construct object in make_shared" );
        -: 4419:    typedef __shared_ptr_emplace<_Tp, allocator<_Tp> > _CntrlBlk;
        -: 4420:    typedef allocator<_CntrlBlk> _Alloc2;
        -: 4421:    typedef __allocator_destructor<_Alloc2> _D2;
        -: 4422:    _Alloc2 __alloc2;
        -: 4423:    unique_ptr<_CntrlBlk, _D2> __hold2(__alloc2.allocate(1), _D2(__alloc2, 1));
        -: 4424:    ::new(__hold2.get()) _CntrlBlk(__alloc2, __a0, __a1, __a2);
        -: 4425:    shared_ptr<_Tp> __r;
        -: 4426:    __r.__ptr_ = __hold2.get()->get();
        -: 4427:    __r.__cntrl_ = __hold2.release();
        -: 4428:    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);
        -: 4429:    return __r;
        -: 4430:}
        -: 4431:
        -: 4432:template<class _Tp>
        -: 4433:template<class _Alloc>
        -: 4434:shared_ptr<_Tp>
        -: 4435:shared_ptr<_Tp>::allocate_shared(const _Alloc& __a)
        -: 4436:{
        -: 4437:    static_assert((is_constructible<_Tp>::value), "Can't construct object in allocate_shared" );
        -: 4438:    typedef __shared_ptr_emplace<_Tp, _Alloc> _CntrlBlk;
        -: 4439:    typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _Alloc2;
        -: 4440:    typedef __allocator_destructor<_Alloc2> _D2;
        -: 4441:    _Alloc2 __alloc2(__a);
        -: 4442:    unique_ptr<_CntrlBlk, _D2> __hold2(__alloc2.allocate(1), _D2(__alloc2, 1));
        -: 4443:    ::new(static_cast<void*>(_VSTD::addressof(*__hold2.get())))
        -: 4444:        _CntrlBlk(__a);
        -: 4445:    shared_ptr<_Tp> __r;
        -: 4446:    __r.__ptr_ = __hold2.get()->get();
        -: 4447:    __r.__cntrl_ = _VSTD::addressof(*__hold2.release());
        -: 4448:    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);
        -: 4449:    return __r;
        -: 4450:}
        -: 4451:
        -: 4452:template<class _Tp>
        -: 4453:template<class _Alloc, class _A0>
        -: 4454:shared_ptr<_Tp>
        -: 4455:shared_ptr<_Tp>::allocate_shared(const _Alloc& __a, _A0& __a0)
        -: 4456:{
        -: 4457:    static_assert((is_constructible<_Tp, _A0>::value), "Can't construct object in allocate_shared" );
        -: 4458:    typedef __shared_ptr_emplace<_Tp, _Alloc> _CntrlBlk;
        -: 4459:    typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _Alloc2;
        -: 4460:    typedef __allocator_destructor<_Alloc2> _D2;
        -: 4461:    _Alloc2 __alloc2(__a);
        -: 4462:    unique_ptr<_CntrlBlk, _D2> __hold2(__alloc2.allocate(1), _D2(__alloc2, 1));
        -: 4463:    ::new(static_cast<void*>(_VSTD::addressof(*__hold2.get())))
        -: 4464:        _CntrlBlk(__a, __a0);
        -: 4465:    shared_ptr<_Tp> __r;
        -: 4466:    __r.__ptr_ = __hold2.get()->get();
        -: 4467:    __r.__cntrl_ = _VSTD::addressof(*__hold2.release());
        -: 4468:    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);
        -: 4469:    return __r;
        -: 4470:}
        -: 4471:
        -: 4472:template<class _Tp>
        -: 4473:template<class _Alloc, class _A0, class _A1>
        -: 4474:shared_ptr<_Tp>
        -: 4475:shared_ptr<_Tp>::allocate_shared(const _Alloc& __a, _A0& __a0, _A1& __a1)
        -: 4476:{
        -: 4477:    static_assert((is_constructible<_Tp, _A0, _A1>::value), "Can't construct object in allocate_shared" );
        -: 4478:    typedef __shared_ptr_emplace<_Tp, _Alloc> _CntrlBlk;
        -: 4479:    typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _Alloc2;
        -: 4480:    typedef __allocator_destructor<_Alloc2> _D2;
        -: 4481:    _Alloc2 __alloc2(__a);
        -: 4482:    unique_ptr<_CntrlBlk, _D2> __hold2(__alloc2.allocate(1), _D2(__alloc2, 1));
        -: 4483:    ::new(static_cast<void*>(_VSTD::addressof(*__hold2.get())))
        -: 4484:        _CntrlBlk(__a, __a0, __a1);
        -: 4485:    shared_ptr<_Tp> __r;
        -: 4486:    __r.__ptr_ = __hold2.get()->get();
        -: 4487:    __r.__cntrl_ = _VSTD::addressof(*__hold2.release());
        -: 4488:    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);
        -: 4489:    return __r;
        -: 4490:}
        -: 4491:
        -: 4492:template<class _Tp>
        -: 4493:template<class _Alloc, class _A0, class _A1, class _A2>
        -: 4494:shared_ptr<_Tp>
        -: 4495:shared_ptr<_Tp>::allocate_shared(const _Alloc& __a, _A0& __a0, _A1& __a1, _A2& __a2)
        -: 4496:{
        -: 4497:    static_assert((is_constructible<_Tp, _A0, _A1, _A2>::value), "Can't construct object in allocate_shared" );
        -: 4498:    typedef __shared_ptr_emplace<_Tp, _Alloc> _CntrlBlk;
        -: 4499:    typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _Alloc2;
        -: 4500:    typedef __allocator_destructor<_Alloc2> _D2;
        -: 4501:    _Alloc2 __alloc2(__a);
        -: 4502:    unique_ptr<_CntrlBlk, _D2> __hold2(__alloc2.allocate(1), _D2(__alloc2, 1));
        -: 4503:    ::new(static_cast<void*>(_VSTD::addressof(*__hold2.get())))
        -: 4504:        _CntrlBlk(__a, __a0, __a1, __a2);
        -: 4505:    shared_ptr<_Tp> __r;
        -: 4506:    __r.__ptr_ = __hold2.get()->get();
        -: 4507:    __r.__cntrl_ = _VSTD::addressof(*__hold2.release());
        -: 4508:    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);
        -: 4509:    return __r;
        -: 4510:}
        -: 4511:
        -: 4512:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 4513:
        -: 4514:template<class _Tp>
        -: 4515:shared_ptr<_Tp>::~shared_ptr()
    #####: 4516:{
    #####: 4517:    if (__cntrl_)
    #####: 4518:        __cntrl_->__release_shared();
    #####: 4519:}
        -: 4520:
        -: 4521:template<class _Tp>
        -: 4522:inline
        -: 4523:shared_ptr<_Tp>&
        -: 4524:shared_ptr<_Tp>::operator=(const shared_ptr& __r) _NOEXCEPT
        -: 4525:{
    #####: 4526:    shared_ptr(__r).swap(*this);
    #####: 4527:    return *this;
        -: 4528:}
        -: 4529:
        -: 4530:template<class _Tp>
        -: 4531:template<class _Yp>
        -: 4532:inline
        -: 4533:typename enable_if
        -: 4534:<
        -: 4535:    is_convertible<_Yp*, typename shared_ptr<_Tp>::element_type*>::value,
        -: 4536:    shared_ptr<_Tp>&
        -: 4537:>::type
        -: 4538:shared_ptr<_Tp>::operator=(const shared_ptr<_Yp>& __r) _NOEXCEPT
        -: 4539:{
        -: 4540:    shared_ptr(__r).swap(*this);
        -: 4541:    return *this;
        -: 4542:}
        -: 4543:
        -: 4544:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4545:
        -: 4546:template<class _Tp>
        -: 4547:inline
        -: 4548:shared_ptr<_Tp>&
        -: 4549:shared_ptr<_Tp>::operator=(shared_ptr&& __r) _NOEXCEPT
        -: 4550:{
    #####: 4551:    shared_ptr(_VSTD::move(__r)).swap(*this);
    #####: 4552:    return *this;
        -: 4553:}
        -: 4554:
        -: 4555:template<class _Tp>
        -: 4556:template<class _Yp>
        -: 4557:inline
        -: 4558:typename enable_if
        -: 4559:<
        -: 4560:    is_convertible<_Yp*, typename shared_ptr<_Tp>::element_type*>::value,
        -: 4561:    shared_ptr<_Tp>&
        -: 4562:>::type
        -: 4563:shared_ptr<_Tp>::operator=(shared_ptr<_Yp>&& __r)
        -: 4564:{
    #####: 4565:    shared_ptr(_VSTD::move(__r)).swap(*this);
    #####: 4566:    return *this;
        -: 4567:}
        -: 4568:
        -: 4569:#if _LIBCPP_STD_VER <= 14 || defined(_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR)
        -: 4570:template<class _Tp>
        -: 4571:template<class _Yp>
        -: 4572:inline
        -: 4573:typename enable_if
        -: 4574:<
        -: 4575:    !is_array<_Yp>::value &&
        -: 4576:    is_convertible<_Yp*, typename shared_ptr<_Tp>::element_type*>::value,
        -: 4577:    shared_ptr<_Tp>
        -: 4578:>::type&
        -: 4579:shared_ptr<_Tp>::operator=(auto_ptr<_Yp>&& __r)
        -: 4580:{
        -: 4581:    shared_ptr(_VSTD::move(__r)).swap(*this);
        -: 4582:    return *this;
        -: 4583:}
        -: 4584:#endif
        -: 4585:
        -: 4586:template<class _Tp>
        -: 4587:template <class _Yp, class _Dp>
        -: 4588:inline
        -: 4589:typename enable_if
        -: 4590:<
        -: 4591:    !is_array<_Yp>::value &&
        -: 4592:    is_convertible<typename unique_ptr<_Yp, _Dp>::pointer,
        -: 4593:                   typename shared_ptr<_Tp>::element_type*>::value,
        -: 4594:    shared_ptr<_Tp>&
        -: 4595:>::type
        -: 4596:shared_ptr<_Tp>::operator=(unique_ptr<_Yp, _Dp>&& __r)
        -: 4597:{
        -: 4598:    shared_ptr(_VSTD::move(__r)).swap(*this);
        -: 4599:    return *this;
        -: 4600:}
        -: 4601:
        -: 4602:#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4603:
        -: 4604:#if _LIBCPP_STD_VER <= 14 || defined(_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR)
        -: 4605:template<class _Tp>
        -: 4606:template<class _Yp>
        -: 4607:inline _LIBCPP_INLINE_VISIBILITY
        -: 4608:typename enable_if
        -: 4609:<
        -: 4610:    !is_array<_Yp>::value &&
        -: 4611:    is_convertible<_Yp*, typename shared_ptr<_Tp>::element_type*>::value,
        -: 4612:    shared_ptr<_Tp>&
        -: 4613:>::type
        -: 4614:shared_ptr<_Tp>::operator=(auto_ptr<_Yp> __r)
        -: 4615:{
        -: 4616:    shared_ptr(__r).swap(*this);
        -: 4617:    return *this;
        -: 4618:}
        -: 4619:#endif
        -: 4620:
        -: 4621:template<class _Tp>
        -: 4622:template <class _Yp, class _Dp>
        -: 4623:inline _LIBCPP_INLINE_VISIBILITY
        -: 4624:typename enable_if
        -: 4625:<
        -: 4626:    !is_array<_Yp>::value &&
        -: 4627:    is_convertible<typename unique_ptr<_Yp, _Dp>::pointer,
        -: 4628:                   typename shared_ptr<_Tp>::element_type*>::value,
        -: 4629:    shared_ptr<_Tp>&
        -: 4630:>::type
        -: 4631:shared_ptr<_Tp>::operator=(unique_ptr<_Yp, _Dp> __r)
        -: 4632:{
        -: 4633:    shared_ptr(_VSTD::move(__r)).swap(*this);
        -: 4634:    return *this;
        -: 4635:}
        -: 4636:
        -: 4637:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4638:
        -: 4639:template<class _Tp>
        -: 4640:inline
        -: 4641:void
        -: 4642:shared_ptr<_Tp>::swap(shared_ptr& __r) _NOEXCEPT
        -: 4643:{
    #####: 4644:    _VSTD::swap(__ptr_, __r.__ptr_);
    #####: 4645:    _VSTD::swap(__cntrl_, __r.__cntrl_);
    #####: 4646:}
        -: 4647:
        -: 4648:template<class _Tp>
        -: 4649:inline
        -: 4650:void
        -: 4651:shared_ptr<_Tp>::reset() _NOEXCEPT
        -: 4652:{
    #####: 4653:    shared_ptr().swap(*this);
    #####: 4654:}
        -: 4655:
        -: 4656:template<class _Tp>
        -: 4657:template<class _Yp>
        -: 4658:inline
        -: 4659:typename enable_if
        -: 4660:<
        -: 4661:    is_convertible<_Yp*, typename shared_ptr<_Tp>::element_type*>::value,
        -: 4662:    void
        -: 4663:>::type
        -: 4664:shared_ptr<_Tp>::reset(_Yp* __p)
        -: 4665:{
    #####: 4666:    shared_ptr(__p).swap(*this);
    #####: 4667:}
        -: 4668:
        -: 4669:template<class _Tp>
        -: 4670:template<class _Yp, class _Dp>
        -: 4671:inline
        -: 4672:typename enable_if
        -: 4673:<
        -: 4674:    is_convertible<_Yp*, typename shared_ptr<_Tp>::element_type*>::value,
        -: 4675:    void
        -: 4676:>::type
        -: 4677:shared_ptr<_Tp>::reset(_Yp* __p, _Dp __d)
        -: 4678:{
        -: 4679:    shared_ptr(__p, __d).swap(*this);
        -: 4680:}
        -: 4681:
        -: 4682:template<class _Tp>
        -: 4683:template<class _Yp, class _Dp, class _Alloc>
        -: 4684:inline
        -: 4685:typename enable_if
        -: 4686:<
        -: 4687:    is_convertible<_Yp*, typename shared_ptr<_Tp>::element_type*>::value,
        -: 4688:    void
        -: 4689:>::type
        -: 4690:shared_ptr<_Tp>::reset(_Yp* __p, _Dp __d, _Alloc __a)
        -: 4691:{
        -: 4692:    shared_ptr(__p, __d, __a).swap(*this);
        -: 4693:}
        -: 4694:
        -: 4695:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 4696:
        -: 4697:template<class _Tp, class ..._Args>
        -: 4698:inline _LIBCPP_INLINE_VISIBILITY
        -: 4699:typename enable_if
        -: 4700:<
        -: 4701:    !is_array<_Tp>::value,
        -: 4702:    shared_ptr<_Tp>
        -: 4703:>::type
        -: 4704:make_shared(_Args&& ...__args)
        -: 4705:{
    #####: 4706:    return shared_ptr<_Tp>::make_shared(_VSTD::forward<_Args>(__args)...);
        -: 4707:}
        -: 4708:
        -: 4709:template<class _Tp, class _Alloc, class ..._Args>
        -: 4710:inline _LIBCPP_INLINE_VISIBILITY
        -: 4711:typename enable_if
        -: 4712:<
        -: 4713:    !is_array<_Tp>::value,
        -: 4714:    shared_ptr<_Tp>
        -: 4715:>::type
        -: 4716:allocate_shared(const _Alloc& __a, _Args&& ...__args)
        -: 4717:{
        -: 4718:    return shared_ptr<_Tp>::allocate_shared(__a, _VSTD::forward<_Args>(__args)...);
        -: 4719:}
        -: 4720:
        -: 4721:#else  // _LIBCPP_HAS_NO_VARIADICS
        -: 4722:
        -: 4723:template<class _Tp>
        -: 4724:inline _LIBCPP_INLINE_VISIBILITY
        -: 4725:shared_ptr<_Tp>
        -: 4726:make_shared()
        -: 4727:{
        -: 4728:    return shared_ptr<_Tp>::make_shared();
        -: 4729:}
        -: 4730:
        -: 4731:template<class _Tp, class _A0>
        -: 4732:inline _LIBCPP_INLINE_VISIBILITY
        -: 4733:shared_ptr<_Tp>
        -: 4734:make_shared(_A0& __a0)
        -: 4735:{
        -: 4736:    return shared_ptr<_Tp>::make_shared(__a0);
        -: 4737:}
        -: 4738:
        -: 4739:template<class _Tp, class _A0, class _A1>
        -: 4740:inline _LIBCPP_INLINE_VISIBILITY
        -: 4741:shared_ptr<_Tp>
        -: 4742:make_shared(_A0& __a0, _A1& __a1)
        -: 4743:{
        -: 4744:    return shared_ptr<_Tp>::make_shared(__a0, __a1);
        -: 4745:}
        -: 4746:
        -: 4747:template<class _Tp, class _A0, class _A1, class _A2>
        -: 4748:inline _LIBCPP_INLINE_VISIBILITY
        -: 4749:shared_ptr<_Tp>
        -: 4750:make_shared(_A0& __a0, _A1& __a1, _A2& __a2)
        -: 4751:{
        -: 4752:    return shared_ptr<_Tp>::make_shared(__a0, __a1, __a2);
        -: 4753:}
        -: 4754:
        -: 4755:template<class _Tp, class _Alloc>
        -: 4756:inline _LIBCPP_INLINE_VISIBILITY
        -: 4757:shared_ptr<_Tp>
        -: 4758:allocate_shared(const _Alloc& __a)
        -: 4759:{
        -: 4760:    return shared_ptr<_Tp>::allocate_shared(__a);
        -: 4761:}
        -: 4762:
        -: 4763:template<class _Tp, class _Alloc, class _A0>
        -: 4764:inline _LIBCPP_INLINE_VISIBILITY
        -: 4765:shared_ptr<_Tp>
        -: 4766:allocate_shared(const _Alloc& __a, _A0& __a0)
        -: 4767:{
        -: 4768:    return shared_ptr<_Tp>::allocate_shared(__a, __a0);
        -: 4769:}
        -: 4770:
        -: 4771:template<class _Tp, class _Alloc, class _A0, class _A1>
        -: 4772:inline _LIBCPP_INLINE_VISIBILITY
        -: 4773:shared_ptr<_Tp>
        -: 4774:allocate_shared(const _Alloc& __a, _A0& __a0, _A1& __a1)
        -: 4775:{
        -: 4776:    return shared_ptr<_Tp>::allocate_shared(__a, __a0, __a1);
        -: 4777:}
        -: 4778:
        -: 4779:template<class _Tp, class _Alloc, class _A0, class _A1, class _A2>
        -: 4780:inline _LIBCPP_INLINE_VISIBILITY
        -: 4781:shared_ptr<_Tp>
        -: 4782:allocate_shared(const _Alloc& __a, _A0& __a0, _A1& __a1, _A2& __a2)
        -: 4783:{
        -: 4784:    return shared_ptr<_Tp>::allocate_shared(__a, __a0, __a1, __a2);
        -: 4785:}
        -: 4786:
        -: 4787:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 4788:
        -: 4789:template<class _Tp, class _Up>
        -: 4790:inline _LIBCPP_INLINE_VISIBILITY
        -: 4791:bool
        -: 4792:operator==(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 4793:{
        -: 4794:    return __x.get() == __y.get();
        -: 4795:}
        -: 4796:
        -: 4797:template<class _Tp, class _Up>
        -: 4798:inline _LIBCPP_INLINE_VISIBILITY
        -: 4799:bool
        -: 4800:operator!=(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 4801:{
        -: 4802:    return !(__x == __y);
        -: 4803:}
        -: 4804:
        -: 4805:template<class _Tp, class _Up>
        -: 4806:inline _LIBCPP_INLINE_VISIBILITY
        -: 4807:bool
        -: 4808:operator<(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 4809:{
        -: 4810:#if _LIBCPP_STD_VER <= 11
        -: 4811:    typedef typename common_type<_Tp*, _Up*>::type _Vp;
        -: 4812:    return less<_Vp>()(__x.get(), __y.get());
        -: 4813:#else
        -: 4814:    return less<>()(__x.get(), __y.get());
        -: 4815:#endif
        -: 4816:
        -: 4817:}
        -: 4818:
        -: 4819:template<class _Tp, class _Up>
        -: 4820:inline _LIBCPP_INLINE_VISIBILITY
        -: 4821:bool
        -: 4822:operator>(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 4823:{
        -: 4824:    return __y < __x;
        -: 4825:}
        -: 4826:
        -: 4827:template<class _Tp, class _Up>
        -: 4828:inline _LIBCPP_INLINE_VISIBILITY
        -: 4829:bool
        -: 4830:operator<=(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 4831:{
        -: 4832:    return !(__y < __x);
        -: 4833:}
        -: 4834:
        -: 4835:template<class _Tp, class _Up>
        -: 4836:inline _LIBCPP_INLINE_VISIBILITY
        -: 4837:bool
        -: 4838:operator>=(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 4839:{
        -: 4840:    return !(__x < __y);
        -: 4841:}
        -: 4842:
        -: 4843:template<class _Tp>
        -: 4844:inline _LIBCPP_INLINE_VISIBILITY
        -: 4845:bool
        -: 4846:operator==(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 4847:{
        -: 4848:    return !__x;
        -: 4849:}
        -: 4850:
        -: 4851:template<class _Tp>
        -: 4852:inline _LIBCPP_INLINE_VISIBILITY
        -: 4853:bool
        -: 4854:operator==(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 4855:{
        -: 4856:    return !__x;
        -: 4857:}
        -: 4858:
        -: 4859:template<class _Tp>
        -: 4860:inline _LIBCPP_INLINE_VISIBILITY
        -: 4861:bool
        -: 4862:operator!=(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 4863:{
        -: 4864:    return static_cast<bool>(__x);
        -: 4865:}
        -: 4866:
        -: 4867:template<class _Tp>
        -: 4868:inline _LIBCPP_INLINE_VISIBILITY
        -: 4869:bool
        -: 4870:operator!=(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 4871:{
        -: 4872:    return static_cast<bool>(__x);
        -: 4873:}
        -: 4874:
        -: 4875:template<class _Tp>
        -: 4876:inline _LIBCPP_INLINE_VISIBILITY
        -: 4877:bool
        -: 4878:operator<(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 4879:{
        -: 4880:    return less<_Tp*>()(__x.get(), nullptr);
        -: 4881:}
        -: 4882:
        -: 4883:template<class _Tp>
        -: 4884:inline _LIBCPP_INLINE_VISIBILITY
        -: 4885:bool
        -: 4886:operator<(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 4887:{
        -: 4888:    return less<_Tp*>()(nullptr, __x.get());
        -: 4889:}
        -: 4890:
        -: 4891:template<class _Tp>
        -: 4892:inline _LIBCPP_INLINE_VISIBILITY
        -: 4893:bool
        -: 4894:operator>(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 4895:{
        -: 4896:    return nullptr < __x;
        -: 4897:}
        -: 4898:
        -: 4899:template<class _Tp>
        -: 4900:inline _LIBCPP_INLINE_VISIBILITY
        -: 4901:bool
        -: 4902:operator>(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 4903:{
        -: 4904:    return __x < nullptr;
        -: 4905:}
        -: 4906:
        -: 4907:template<class _Tp>
        -: 4908:inline _LIBCPP_INLINE_VISIBILITY
        -: 4909:bool
        -: 4910:operator<=(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 4911:{
        -: 4912:    return !(nullptr < __x);
        -: 4913:}
        -: 4914:
        -: 4915:template<class _Tp>
        -: 4916:inline _LIBCPP_INLINE_VISIBILITY
        -: 4917:bool
        -: 4918:operator<=(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 4919:{
        -: 4920:    return !(__x < nullptr);
        -: 4921:}
        -: 4922:
        -: 4923:template<class _Tp>
        -: 4924:inline _LIBCPP_INLINE_VISIBILITY
        -: 4925:bool
        -: 4926:operator>=(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 4927:{
        -: 4928:    return !(__x < nullptr);
        -: 4929:}
        -: 4930:
        -: 4931:template<class _Tp>
        -: 4932:inline _LIBCPP_INLINE_VISIBILITY
        -: 4933:bool
        -: 4934:operator>=(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 4935:{
        -: 4936:    return !(nullptr < __x);
        -: 4937:}
        -: 4938:
        -: 4939:template<class _Tp>
        -: 4940:inline _LIBCPP_INLINE_VISIBILITY
        -: 4941:void
        -: 4942:swap(shared_ptr<_Tp>& __x, shared_ptr<_Tp>& __y) _NOEXCEPT
        -: 4943:{
        -: 4944:    __x.swap(__y);
        -: 4945:}
        -: 4946:
        -: 4947:template<class _Tp, class _Up>
        -: 4948:inline _LIBCPP_INLINE_VISIBILITY
        -: 4949:typename enable_if
        -: 4950:<
        -: 4951:    !is_array<_Tp>::value && !is_array<_Up>::value,
        -: 4952:    shared_ptr<_Tp>
        -: 4953:>::type
        -: 4954:static_pointer_cast(const shared_ptr<_Up>& __r) _NOEXCEPT
        -: 4955:{
    #####: 4956:    return shared_ptr<_Tp>(__r, static_cast<_Tp*>(__r.get()));
        -: 4957:}
        -: 4958:
        -: 4959:template<class _Tp, class _Up>
        -: 4960:inline _LIBCPP_INLINE_VISIBILITY
        -: 4961:typename enable_if
        -: 4962:<
        -: 4963:    !is_array<_Tp>::value && !is_array<_Up>::value,
        -: 4964:    shared_ptr<_Tp>
        -: 4965:>::type
        -: 4966:dynamic_pointer_cast(const shared_ptr<_Up>& __r) _NOEXCEPT
        -: 4967:{
        -: 4968:    _Tp* __p = dynamic_cast<_Tp*>(__r.get());
        -: 4969:    return __p ? shared_ptr<_Tp>(__r, __p) : shared_ptr<_Tp>();
        -: 4970:}
        -: 4971:
        -: 4972:template<class _Tp, class _Up>
        -: 4973:typename enable_if
        -: 4974:<
        -: 4975:    is_array<_Tp>::value == is_array<_Up>::value,
        -: 4976:    shared_ptr<_Tp>
        -: 4977:>::type
        -: 4978:const_pointer_cast(const shared_ptr<_Up>& __r) _NOEXCEPT
        -: 4979:{
        -: 4980:    typedef typename remove_extent<_Tp>::type _RTp;
        -: 4981:    return shared_ptr<_Tp>(__r, const_cast<_RTp*>(__r.get()));
        -: 4982:}
        -: 4983:
        -: 4984:#ifndef _LIBCPP_NO_RTTI
        -: 4985:
        -: 4986:template<class _Dp, class _Tp>
        -: 4987:inline _LIBCPP_INLINE_VISIBILITY
        -: 4988:_Dp*
        -: 4989:get_deleter(const shared_ptr<_Tp>& __p) _NOEXCEPT
        -: 4990:{
        -: 4991:    return __p.template __get_deleter<_Dp>();
        -: 4992:}
        -: 4993:
        -: 4994:#endif  // _LIBCPP_NO_RTTI
        -: 4995:
        -: 4996:template<class _Tp>
        -: 4997:class _LIBCPP_TEMPLATE_VIS weak_ptr
        -: 4998:{
        -: 4999:public:
        -: 5000:    typedef _Tp element_type;
        -: 5001:private:
        -: 5002:    element_type*        __ptr_;
        -: 5003:    __shared_weak_count* __cntrl_;
        -: 5004:
        -: 5005:public:
        -: 5006:    _LIBCPP_INLINE_VISIBILITY
        -: 5007:    _LIBCPP_CONSTEXPR weak_ptr() _NOEXCEPT;
        -: 5008:    template<class _Yp> _LIBCPP_INLINE_VISIBILITY weak_ptr(shared_ptr<_Yp> const& __r,
        -: 5009:                   typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type = 0)
        -: 5010:                        _NOEXCEPT;
        -: 5011:    _LIBCPP_INLINE_VISIBILITY
        -: 5012:    weak_ptr(weak_ptr const& __r) _NOEXCEPT;
        -: 5013:    template<class _Yp> _LIBCPP_INLINE_VISIBILITY weak_ptr(weak_ptr<_Yp> const& __r,
        -: 5014:                   typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type = 0)
        -: 5015:                         _NOEXCEPT;
        -: 5016:
        -: 5017:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 5018:    _LIBCPP_INLINE_VISIBILITY
        -: 5019:    weak_ptr(weak_ptr&& __r) _NOEXCEPT;
        -: 5020:    template<class _Yp> _LIBCPP_INLINE_VISIBILITY weak_ptr(weak_ptr<_Yp>&& __r,
        -: 5021:                   typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type = 0)
        -: 5022:                         _NOEXCEPT;
        -: 5023:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 5024:    ~weak_ptr();
        -: 5025:
        -: 5026:    _LIBCPP_INLINE_VISIBILITY
        -: 5027:    weak_ptr& operator=(weak_ptr const& __r) _NOEXCEPT;
        -: 5028:    template<class _Yp>
        -: 5029:        typename enable_if
        -: 5030:        <
        -: 5031:            is_convertible<_Yp*, element_type*>::value,
        -: 5032:            weak_ptr&
        -: 5033:        >::type
        -: 5034:        _LIBCPP_INLINE_VISIBILITY
        -: 5035:        operator=(weak_ptr<_Yp> const& __r) _NOEXCEPT;
        -: 5036:
        -: 5037:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 5038:
        -: 5039:    _LIBCPP_INLINE_VISIBILITY
        -: 5040:    weak_ptr& operator=(weak_ptr&& __r) _NOEXCEPT;
        -: 5041:    template<class _Yp>
        -: 5042:        typename enable_if
        -: 5043:        <
        -: 5044:            is_convertible<_Yp*, element_type*>::value,
        -: 5045:            weak_ptr&
        -: 5046:        >::type
        -: 5047:        _LIBCPP_INLINE_VISIBILITY
        -: 5048:        operator=(weak_ptr<_Yp>&& __r) _NOEXCEPT;
        -: 5049:
        -: 5050:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 5051:
        -: 5052:    template<class _Yp>
        -: 5053:        typename enable_if
        -: 5054:        <
        -: 5055:            is_convertible<_Yp*, element_type*>::value,
        -: 5056:            weak_ptr&
        -: 5057:        >::type
        -: 5058:        _LIBCPP_INLINE_VISIBILITY
        -: 5059:        operator=(shared_ptr<_Yp> const& __r) _NOEXCEPT;
        -: 5060:
        -: 5061:    _LIBCPP_INLINE_VISIBILITY
        -: 5062:    void swap(weak_ptr& __r) _NOEXCEPT;
        -: 5063:    _LIBCPP_INLINE_VISIBILITY
        -: 5064:    void reset() _NOEXCEPT;
        -: 5065:
        -: 5066:    _LIBCPP_INLINE_VISIBILITY
        -: 5067:    long use_count() const _NOEXCEPT
        -: 5068:        {return __cntrl_ ? __cntrl_->use_count() : 0;}
        -: 5069:    _LIBCPP_INLINE_VISIBILITY
        -: 5070:    bool expired() const _NOEXCEPT
        -: 5071:        {return __cntrl_ == 0 || __cntrl_->use_count() == 0;}
        -: 5072:    shared_ptr<_Tp> lock() const _NOEXCEPT;
        -: 5073:    template<class _Up>
        -: 5074:        _LIBCPP_INLINE_VISIBILITY
        -: 5075:        bool owner_before(const shared_ptr<_Up>& __r) const _NOEXCEPT
        -: 5076:        {return __cntrl_ < __r.__cntrl_;}
        -: 5077:    template<class _Up>
        -: 5078:        _LIBCPP_INLINE_VISIBILITY
        -: 5079:        bool owner_before(const weak_ptr<_Up>& __r) const _NOEXCEPT
        -: 5080:        {return __cntrl_ < __r.__cntrl_;}
        -: 5081:
        -: 5082:    template <class _Up> friend class _LIBCPP_TEMPLATE_VIS weak_ptr;
        -: 5083:    template <class _Up> friend class _LIBCPP_TEMPLATE_VIS shared_ptr;
        -: 5084:};
        -: 5085:
        -: 5086:template<class _Tp>
        -: 5087:inline
        -: 5088:_LIBCPP_CONSTEXPR
        -: 5089:weak_ptr<_Tp>::weak_ptr() _NOEXCEPT
        -: 5090:    : __ptr_(0),
        -: 5091:      __cntrl_(0)
        -: 5092:{
        -: 5093:}
        -: 5094:
        -: 5095:template<class _Tp>
        -: 5096:inline
        -: 5097:weak_ptr<_Tp>::weak_ptr(weak_ptr const& __r) _NOEXCEPT
        -: 5098:    : __ptr_(__r.__ptr_),
        -: 5099:      __cntrl_(__r.__cntrl_)
        -: 5100:{
        -: 5101:    if (__cntrl_)
        -: 5102:        __cntrl_->__add_weak();
        -: 5103:}
        -: 5104:
        -: 5105:template<class _Tp>
        -: 5106:template<class _Yp>
        -: 5107:inline
        -: 5108:weak_ptr<_Tp>::weak_ptr(shared_ptr<_Yp> const& __r,
        -: 5109:                        typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type)
        -: 5110:                         _NOEXCEPT
        -: 5111:    : __ptr_(__r.__ptr_),
        -: 5112:      __cntrl_(__r.__cntrl_)
        -: 5113:{
        -: 5114:    if (__cntrl_)
        -: 5115:        __cntrl_->__add_weak();
        -: 5116:}
        -: 5117:
        -: 5118:template<class _Tp>
        -: 5119:template<class _Yp>
        -: 5120:inline
        -: 5121:weak_ptr<_Tp>::weak_ptr(weak_ptr<_Yp> const& __r,
        -: 5122:                        typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type)
        -: 5123:         _NOEXCEPT
        -: 5124:    : __ptr_(__r.__ptr_),
        -: 5125:      __cntrl_(__r.__cntrl_)
        -: 5126:{
        -: 5127:    if (__cntrl_)
        -: 5128:        __cntrl_->__add_weak();
        -: 5129:}
        -: 5130:
        -: 5131:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 5132:
        -: 5133:template<class _Tp>
        -: 5134:inline
        -: 5135:weak_ptr<_Tp>::weak_ptr(weak_ptr&& __r) _NOEXCEPT
        -: 5136:    : __ptr_(__r.__ptr_),
        -: 5137:      __cntrl_(__r.__cntrl_)
        -: 5138:{
        -: 5139:    __r.__ptr_ = 0;
        -: 5140:    __r.__cntrl_ = 0;
        -: 5141:}
        -: 5142:
        -: 5143:template<class _Tp>
        -: 5144:template<class _Yp>
        -: 5145:inline
        -: 5146:weak_ptr<_Tp>::weak_ptr(weak_ptr<_Yp>&& __r,
        -: 5147:                        typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type)
        -: 5148:         _NOEXCEPT
        -: 5149:    : __ptr_(__r.__ptr_),
        -: 5150:      __cntrl_(__r.__cntrl_)
        -: 5151:{
        -: 5152:    __r.__ptr_ = 0;
        -: 5153:    __r.__cntrl_ = 0;
        -: 5154:}
        -: 5155:
        -: 5156:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 5157:
        -: 5158:template<class _Tp>
        -: 5159:weak_ptr<_Tp>::~weak_ptr()
        -: 5160:{
        -: 5161:    if (__cntrl_)
        -: 5162:        __cntrl_->__release_weak();
        -: 5163:}
        -: 5164:
        -: 5165:template<class _Tp>
        -: 5166:inline
        -: 5167:weak_ptr<_Tp>&
        -: 5168:weak_ptr<_Tp>::operator=(weak_ptr const& __r) _NOEXCEPT
        -: 5169:{
        -: 5170:    weak_ptr(__r).swap(*this);
        -: 5171:    return *this;
        -: 5172:}
        -: 5173:
        -: 5174:template<class _Tp>
        -: 5175:template<class _Yp>
        -: 5176:inline
        -: 5177:typename enable_if
        -: 5178:<
        -: 5179:    is_convertible<_Yp*, _Tp*>::value,
        -: 5180:    weak_ptr<_Tp>&
        -: 5181:>::type
        -: 5182:weak_ptr<_Tp>::operator=(weak_ptr<_Yp> const& __r) _NOEXCEPT
        -: 5183:{
        -: 5184:    weak_ptr(__r).swap(*this);
        -: 5185:    return *this;
        -: 5186:}
        -: 5187:
        -: 5188:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 5189:
        -: 5190:template<class _Tp>
        -: 5191:inline
        -: 5192:weak_ptr<_Tp>&
        -: 5193:weak_ptr<_Tp>::operator=(weak_ptr&& __r) _NOEXCEPT
        -: 5194:{
        -: 5195:    weak_ptr(_VSTD::move(__r)).swap(*this);
        -: 5196:    return *this;
        -: 5197:}
        -: 5198:
        -: 5199:template<class _Tp>
        -: 5200:template<class _Yp>
        -: 5201:inline
        -: 5202:typename enable_if
        -: 5203:<
        -: 5204:    is_convertible<_Yp*, _Tp*>::value,
        -: 5205:    weak_ptr<_Tp>&
        -: 5206:>::type
        -: 5207:weak_ptr<_Tp>::operator=(weak_ptr<_Yp>&& __r) _NOEXCEPT
        -: 5208:{
        -: 5209:    weak_ptr(_VSTD::move(__r)).swap(*this);
        -: 5210:    return *this;
        -: 5211:}
        -: 5212:
        -: 5213:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 5214:
        -: 5215:template<class _Tp>
        -: 5216:template<class _Yp>
        -: 5217:inline
        -: 5218:typename enable_if
        -: 5219:<
        -: 5220:    is_convertible<_Yp*, _Tp*>::value,
        -: 5221:    weak_ptr<_Tp>&
        -: 5222:>::type
        -: 5223:weak_ptr<_Tp>::operator=(shared_ptr<_Yp> const& __r) _NOEXCEPT
        -: 5224:{
        -: 5225:    weak_ptr(__r).swap(*this);
        -: 5226:    return *this;
        -: 5227:}
        -: 5228:
        -: 5229:template<class _Tp>
        -: 5230:inline
        -: 5231:void
        -: 5232:weak_ptr<_Tp>::swap(weak_ptr& __r) _NOEXCEPT
        -: 5233:{
        -: 5234:    _VSTD::swap(__ptr_, __r.__ptr_);
        -: 5235:    _VSTD::swap(__cntrl_, __r.__cntrl_);
        -: 5236:}
        -: 5237:
        -: 5238:template<class _Tp>
        -: 5239:inline _LIBCPP_INLINE_VISIBILITY
        -: 5240:void
        -: 5241:swap(weak_ptr<_Tp>& __x, weak_ptr<_Tp>& __y) _NOEXCEPT
        -: 5242:{
        -: 5243:    __x.swap(__y);
        -: 5244:}
        -: 5245:
        -: 5246:template<class _Tp>
        -: 5247:inline
        -: 5248:void
        -: 5249:weak_ptr<_Tp>::reset() _NOEXCEPT
        -: 5250:{
        -: 5251:    weak_ptr().swap(*this);
        -: 5252:}
        -: 5253:
        -: 5254:template<class _Tp>
        -: 5255:template<class _Yp>
        -: 5256:shared_ptr<_Tp>::shared_ptr(const weak_ptr<_Yp>& __r,
        -: 5257:                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type)
        -: 5258:    : __ptr_(__r.__ptr_),
        -: 5259:      __cntrl_(__r.__cntrl_ ? __r.__cntrl_->lock() : __r.__cntrl_)
        -: 5260:{
        -: 5261:    if (__cntrl_ == 0)
        -: 5262:        __throw_bad_weak_ptr();
        -: 5263:}
        -: 5264:
        -: 5265:template<class _Tp>
        -: 5266:shared_ptr<_Tp>
        -: 5267:weak_ptr<_Tp>::lock() const _NOEXCEPT
        -: 5268:{
        -: 5269:    shared_ptr<_Tp> __r;
        -: 5270:    __r.__cntrl_ = __cntrl_ ? __cntrl_->lock() : __cntrl_;
        -: 5271:    if (__r.__cntrl_)
        -: 5272:        __r.__ptr_ = __ptr_;
        -: 5273:    return __r;
        -: 5274:}
        -: 5275:
        -: 5276:#if _LIBCPP_STD_VER > 14
        -: 5277:template <class _Tp = void> struct owner_less;
        -: 5278:#else
        -: 5279:template <class _Tp> struct owner_less;
        -: 5280:#endif
        -: 5281:
        -: 5282:template <class _Tp>
        -: 5283:struct _LIBCPP_TEMPLATE_VIS owner_less<shared_ptr<_Tp> >
        -: 5284:    : binary_function<shared_ptr<_Tp>, shared_ptr<_Tp>, bool>
        -: 5285:{
        -: 5286:    typedef bool result_type;
        -: 5287:    _LIBCPP_INLINE_VISIBILITY
        -: 5288:    bool operator()(shared_ptr<_Tp> const& __x, shared_ptr<_Tp> const& __y) const _NOEXCEPT
        -: 5289:        {return __x.owner_before(__y);}
        -: 5290:    _LIBCPP_INLINE_VISIBILITY
        -: 5291:    bool operator()(shared_ptr<_Tp> const& __x,   weak_ptr<_Tp> const& __y) const _NOEXCEPT
        -: 5292:        {return __x.owner_before(__y);}
        -: 5293:    _LIBCPP_INLINE_VISIBILITY
        -: 5294:    bool operator()(  weak_ptr<_Tp> const& __x, shared_ptr<_Tp> const& __y) const _NOEXCEPT
        -: 5295:        {return __x.owner_before(__y);}
        -: 5296:};
        -: 5297:
        -: 5298:template <class _Tp>
        -: 5299:struct _LIBCPP_TEMPLATE_VIS owner_less<weak_ptr<_Tp> >
        -: 5300:    : binary_function<weak_ptr<_Tp>, weak_ptr<_Tp>, bool>
        -: 5301:{
        -: 5302:    typedef bool result_type;
        -: 5303:    _LIBCPP_INLINE_VISIBILITY
        -: 5304:    bool operator()(  weak_ptr<_Tp> const& __x,   weak_ptr<_Tp> const& __y) const _NOEXCEPT
        -: 5305:        {return __x.owner_before(__y);}
        -: 5306:    _LIBCPP_INLINE_VISIBILITY
        -: 5307:    bool operator()(shared_ptr<_Tp> const& __x,   weak_ptr<_Tp> const& __y) const _NOEXCEPT
        -: 5308:        {return __x.owner_before(__y);}
        -: 5309:    _LIBCPP_INLINE_VISIBILITY
        -: 5310:    bool operator()(  weak_ptr<_Tp> const& __x, shared_ptr<_Tp> const& __y) const _NOEXCEPT
        -: 5311:        {return __x.owner_before(__y);}
        -: 5312:};
        -: 5313:
        -: 5314:#if _LIBCPP_STD_VER > 14
        -: 5315:template <>
        -: 5316:struct _LIBCPP_TEMPLATE_VIS owner_less<void>
        -: 5317:{
        -: 5318:    template <class _Tp, class _Up>
        -: 5319:    _LIBCPP_INLINE_VISIBILITY
        -: 5320:    bool operator()( shared_ptr<_Tp> const& __x, shared_ptr<_Up> const& __y) const _NOEXCEPT
        -: 5321:        {return __x.owner_before(__y);}
        -: 5322:    template <class _Tp, class _Up>
        -: 5323:    _LIBCPP_INLINE_VISIBILITY
        -: 5324:    bool operator()( shared_ptr<_Tp> const& __x,   weak_ptr<_Up> const& __y) const _NOEXCEPT
        -: 5325:        {return __x.owner_before(__y);}
        -: 5326:    template <class _Tp, class _Up>
        -: 5327:    _LIBCPP_INLINE_VISIBILITY
        -: 5328:    bool operator()(   weak_ptr<_Tp> const& __x, shared_ptr<_Up> const& __y) const _NOEXCEPT
        -: 5329:        {return __x.owner_before(__y);}
        -: 5330:    template <class _Tp, class _Up>
        -: 5331:    _LIBCPP_INLINE_VISIBILITY
        -: 5332:    bool operator()(   weak_ptr<_Tp> const& __x,   weak_ptr<_Up> const& __y) const _NOEXCEPT
        -: 5333:        {return __x.owner_before(__y);}
        -: 5334:    typedef void is_transparent;
        -: 5335:};
        -: 5336:#endif
        -: 5337:
        -: 5338:template<class _Tp>
        -: 5339:class _LIBCPP_TEMPLATE_VIS enable_shared_from_this
        -: 5340:{
        -: 5341:    mutable weak_ptr<_Tp> __weak_this_;
        -: 5342:protected:
        -: 5343:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -: 5344:    enable_shared_from_this() _NOEXCEPT {}
        -: 5345:    _LIBCPP_INLINE_VISIBILITY
        -: 5346:    enable_shared_from_this(enable_shared_from_this const&) _NOEXCEPT {}
        -: 5347:    _LIBCPP_INLINE_VISIBILITY
        -: 5348:    enable_shared_from_this& operator=(enable_shared_from_this const&) _NOEXCEPT
        -: 5349:        {return *this;}
        -: 5350:    _LIBCPP_INLINE_VISIBILITY
        -: 5351:    ~enable_shared_from_this() {}
        -: 5352:public:
        -: 5353:    _LIBCPP_INLINE_VISIBILITY
        -: 5354:    shared_ptr<_Tp> shared_from_this()
        -: 5355:        {return shared_ptr<_Tp>(__weak_this_);}
        -: 5356:    _LIBCPP_INLINE_VISIBILITY
        -: 5357:    shared_ptr<_Tp const> shared_from_this() const
        -: 5358:        {return shared_ptr<const _Tp>(__weak_this_);}
        -: 5359:
        -: 5360:#if _LIBCPP_STD_VER > 14
        -: 5361:    _LIBCPP_INLINE_VISIBILITY
        -: 5362:    weak_ptr<_Tp> weak_from_this() _NOEXCEPT
        -: 5363:       { return __weak_this_; }
        -: 5364:
        -: 5365:    _LIBCPP_INLINE_VISIBILITY
        -: 5366:    weak_ptr<const _Tp> weak_from_this() const _NOEXCEPT
        -: 5367:        { return __weak_this_; }
        -: 5368:#endif // _LIBCPP_STD_VER > 14
        -: 5369:
        -: 5370:    template <class _Up> friend class shared_ptr;
        -: 5371:};
        -: 5372:
        -: 5373:template <class _Tp>
        -: 5374:struct _LIBCPP_TEMPLATE_VIS hash<shared_ptr<_Tp> >
        -: 5375:{
        -: 5376:    typedef shared_ptr<_Tp>      argument_type;
        -: 5377:    typedef size_t               result_type;
        -: 5378:
        -: 5379:    _LIBCPP_INLINE_VISIBILITY
        -: 5380:    result_type operator()(const argument_type& __ptr) const _NOEXCEPT
        -: 5381:    {
        -: 5382:        return hash<_Tp*>()(__ptr.get());
        -: 5383:    }
        -: 5384:};
        -: 5385:
        -: 5386:template<class _CharT, class _Traits, class _Yp>
        -: 5387:inline _LIBCPP_INLINE_VISIBILITY
        -: 5388:basic_ostream<_CharT, _Traits>&
        -: 5389:operator<<(basic_ostream<_CharT, _Traits>& __os, shared_ptr<_Yp> const& __p);
        -: 5390:
        -: 5391:
        -: 5392:#if !defined(_LIBCPP_HAS_NO_ATOMIC_HEADER)
        -: 5393:
        -: 5394:class _LIBCPP_TYPE_VIS __sp_mut
        -: 5395:{
        -: 5396:    void* __lx;
        -: 5397:public:
        -: 5398:    void lock() _NOEXCEPT;
        -: 5399:    void unlock() _NOEXCEPT;
        -: 5400:
        -: 5401:private:
        -: 5402:    _LIBCPP_CONSTEXPR __sp_mut(void*) _NOEXCEPT;
        -: 5403:    __sp_mut(const __sp_mut&);
        -: 5404:    __sp_mut& operator=(const __sp_mut&);
        -: 5405:
        -: 5406:    friend _LIBCPP_FUNC_VIS __sp_mut& __get_sp_mut(const void*);
        -: 5407:};
        -: 5408:
        -: 5409:_LIBCPP_FUNC_VIS _LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5410:__sp_mut& __get_sp_mut(const void*);
        -: 5411:
        -: 5412:template <class _Tp>
        -: 5413:inline _LIBCPP_INLINE_VISIBILITY
        -: 5414:bool
        -: 5415:atomic_is_lock_free(const shared_ptr<_Tp>*)
        -: 5416:{
        -: 5417:    return false;
        -: 5418:}
        -: 5419:
        -: 5420:template <class _Tp>
        -: 5421:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5422:shared_ptr<_Tp>
        -: 5423:atomic_load(const shared_ptr<_Tp>* __p)
        -: 5424:{
        -: 5425:    __sp_mut& __m = __get_sp_mut(__p);
        -: 5426:    __m.lock();
        -: 5427:    shared_ptr<_Tp> __q = *__p;
        -: 5428:    __m.unlock();
        -: 5429:    return __q;
        -: 5430:}
        -: 5431:
        -: 5432:template <class _Tp>
        -: 5433:inline _LIBCPP_INLINE_VISIBILITY
        -: 5434:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5435:shared_ptr<_Tp>
        -: 5436:atomic_load_explicit(const shared_ptr<_Tp>* __p, memory_order)
        -: 5437:{
        -: 5438:    return atomic_load(__p);
        -: 5439:}
        -: 5440:
        -: 5441:template <class _Tp>
        -: 5442:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5443:void
        -: 5444:atomic_store(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r)
        -: 5445:{
        -: 5446:    __sp_mut& __m = __get_sp_mut(__p);
        -: 5447:    __m.lock();
        -: 5448:    __p->swap(__r);
        -: 5449:    __m.unlock();
        -: 5450:}
        -: 5451:
        -: 5452:template <class _Tp>
        -: 5453:inline _LIBCPP_INLINE_VISIBILITY
        -: 5454:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5455:void
        -: 5456:atomic_store_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r, memory_order)
        -: 5457:{
        -: 5458:    atomic_store(__p, __r);
        -: 5459:}
        -: 5460:
        -: 5461:template <class _Tp>
        -: 5462:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5463:shared_ptr<_Tp>
        -: 5464:atomic_exchange(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r)
        -: 5465:{
        -: 5466:    __sp_mut& __m = __get_sp_mut(__p);
        -: 5467:    __m.lock();
        -: 5468:    __p->swap(__r);
        -: 5469:    __m.unlock();
        -: 5470:    return __r;
        -: 5471:}
        -: 5472:
        -: 5473:template <class _Tp>
        -: 5474:inline _LIBCPP_INLINE_VISIBILITY
        -: 5475:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5476:shared_ptr<_Tp>
        -: 5477:atomic_exchange_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r, memory_order)
        -: 5478:{
        -: 5479:    return atomic_exchange(__p, __r);
        -: 5480:}
        -: 5481:
        -: 5482:template <class _Tp>
        -: 5483:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5484:bool
        -: 5485:atomic_compare_exchange_strong(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v, shared_ptr<_Tp> __w)
        -: 5486:{
        -: 5487:    shared_ptr<_Tp> __temp;
        -: 5488:    __sp_mut& __m = __get_sp_mut(__p);
        -: 5489:    __m.lock();
        -: 5490:    if (__p->__owner_equivalent(*__v))
        -: 5491:    {
        -: 5492:        _VSTD::swap(__temp, *__p);
        -: 5493:        *__p = __w;
        -: 5494:        __m.unlock();
        -: 5495:        return true;
        -: 5496:    }
        -: 5497:    _VSTD::swap(__temp, *__v);
        -: 5498:    *__v = *__p;
        -: 5499:    __m.unlock();
        -: 5500:    return false;
        -: 5501:}
        -: 5502:
        -: 5503:template <class _Tp>
        -: 5504:inline _LIBCPP_INLINE_VISIBILITY
        -: 5505:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5506:bool
        -: 5507:atomic_compare_exchange_weak(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v, shared_ptr<_Tp> __w)
        -: 5508:{
        -: 5509:    return atomic_compare_exchange_strong(__p, __v, __w);
        -: 5510:}
        -: 5511:
        -: 5512:template <class _Tp>
        -: 5513:inline _LIBCPP_INLINE_VISIBILITY
        -: 5514:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5515:bool
        -: 5516:atomic_compare_exchange_strong_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v,
        -: 5517:                                        shared_ptr<_Tp> __w, memory_order, memory_order)
        -: 5518:{
        -: 5519:    return atomic_compare_exchange_strong(__p, __v, __w);
        -: 5520:}
        -: 5521:
        -: 5522:template <class _Tp>
        -: 5523:inline _LIBCPP_INLINE_VISIBILITY
        -: 5524:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5525:bool
        -: 5526:atomic_compare_exchange_weak_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v,
        -: 5527:                                      shared_ptr<_Tp> __w, memory_order, memory_order)
        -: 5528:{
        -: 5529:    return atomic_compare_exchange_weak(__p, __v, __w);
        -: 5530:}
        -: 5531:
        -: 5532:#endif  // !defined(_LIBCPP_HAS_NO_ATOMIC_HEADER)
        -: 5533:
        -: 5534://enum class
        -: 5535:#if defined(_LIBCPP_ABI_POINTER_SAFETY_ENUM_TYPE)
        -: 5536:# ifndef _LIBCPP_CXX03_LANG
        -: 5537:enum class pointer_safety : unsigned char {
        -: 5538:  relaxed,
        -: 5539:  preferred,
        -: 5540:  strict
        -: 5541:};
        -: 5542:# endif
        -: 5543:#else
        -: 5544:struct _LIBCPP_TYPE_VIS pointer_safety
        -: 5545:{
        -: 5546:    enum __lx
        -: 5547:    {
        -: 5548:        relaxed,
        -: 5549:        preferred,
        -: 5550:        strict
        -: 5551:    };
        -: 5552:
        -: 5553:    __lx __v_;
        -: 5554:
        -: 5555:    _LIBCPP_INLINE_VISIBILITY
        -: 5556:    pointer_safety() : __v_() {}
        -: 5557:
        -: 5558:    _LIBCPP_INLINE_VISIBILITY
        -: 5559:    pointer_safety(__lx __v) : __v_(__v) {}
        -: 5560:    _LIBCPP_INLINE_VISIBILITY
        -: 5561:    operator int() const {return __v_;}
        -: 5562:};
        -: 5563:#endif
        -: 5564:
        -: 5565:#if !defined(_LIBCPP_ABI_POINTER_SAFETY_ENUM_TYPE) && \
        -: 5566:    defined(_LIBCPP_BUILDING_LIBRARY)
        -: 5567:_LIBCPP_FUNC_VIS pointer_safety get_pointer_safety() _NOEXCEPT;
        -: 5568:#else
        -: 5569:// This function is only offered in C++03 under ABI v1.
        -: 5570:# if !defined(_LIBCPP_ABI_POINTER_SAFETY_ENUM_TYPE) || !defined(_LIBCPP_CXX03_LANG)
        -: 5571:inline _LIBCPP_INLINE_VISIBILITY
        -: 5572:pointer_safety get_pointer_safety() _NOEXCEPT {
        -: 5573:  return pointer_safety::relaxed;
        -: 5574:}
        -: 5575:# endif
        -: 5576:#endif
        -: 5577:
        -: 5578:
        -: 5579:_LIBCPP_FUNC_VIS void declare_reachable(void* __p);
        -: 5580:_LIBCPP_FUNC_VIS void declare_no_pointers(char* __p, size_t __n);
        -: 5581:_LIBCPP_FUNC_VIS void undeclare_no_pointers(char* __p, size_t __n);
        -: 5582:_LIBCPP_FUNC_VIS void* __undeclare_reachable(void* __p);
        -: 5583:
        -: 5584:template <class _Tp>
        -: 5585:inline _LIBCPP_INLINE_VISIBILITY
        -: 5586:_Tp*
        -: 5587:undeclare_reachable(_Tp* __p)
        -: 5588:{
        -: 5589:    return static_cast<_Tp*>(__undeclare_reachable(__p));
        -: 5590:}
        -: 5591:
        -: 5592:_LIBCPP_FUNC_VIS void* align(size_t __align, size_t __sz, void*& __ptr, size_t& __space);
        -: 5593:
        -: 5594:// --- Helper for container swap --
        -: 5595:template <typename _Alloc>
        -: 5596:inline _LIBCPP_INLINE_VISIBILITY
        -: 5597:void __swap_allocator(_Alloc & __a1, _Alloc & __a2)
        -: 5598:#if _LIBCPP_STD_VER >= 14
        -: 5599:    _NOEXCEPT
        -: 5600:#else
        -: 5601:    _NOEXCEPT_(__is_nothrow_swappable<_Alloc>::value)
        -: 5602:#endif
        -: 5603:{
    #####: 5604:    __swap_allocator(__a1, __a2,
        -: 5605:      integral_constant<bool, _VSTD::allocator_traits<_Alloc>::propagate_on_container_swap::value>());
    #####: 5606:}
        -: 5607:
        -: 5608:template <typename _Alloc>
        -: 5609:_LIBCPP_INLINE_VISIBILITY
        -: 5610:void __swap_allocator(_Alloc & __a1, _Alloc & __a2, true_type)
        -: 5611:#if _LIBCPP_STD_VER >= 14
        -: 5612:    _NOEXCEPT
        -: 5613:#else
        -: 5614:    _NOEXCEPT_(__is_nothrow_swappable<_Alloc>::value)
        -: 5615:#endif
        -: 5616:{
        -: 5617:    using _VSTD::swap;
        -: 5618:    swap(__a1, __a2);
        -: 5619:}
        -: 5620:
        -: 5621:template <typename _Alloc>
        -: 5622:inline _LIBCPP_INLINE_VISIBILITY
    #####: 5623:void __swap_allocator(_Alloc &, _Alloc &, false_type) _NOEXCEPT {}
        -: 5624:
        -: 5625:template <typename _Alloc, typename _Traits=allocator_traits<_Alloc> >
        -: 5626:struct __noexcept_move_assign_container : public integral_constant<bool,
        -: 5627:    _Traits::propagate_on_container_move_assignment::value
        -: 5628:#if _LIBCPP_STD_VER > 14
        -: 5629:        || _Traits::is_always_equal::value
        -: 5630:#else
        -: 5631:        && is_nothrow_move_assignable<_Alloc>::value
        -: 5632:#endif
        -: 5633:    > {};
        -: 5634:
        -: 5635:
        -: 5636:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 5637:template <class _Tp, class _Alloc>
        -: 5638:struct __temp_value {
        -: 5639:    typedef allocator_traits<_Alloc> _Traits;
        -: 5640:
        -: 5641:    typename aligned_storage<sizeof(_Tp), alignof(_Tp)>::type __v;
        -: 5642:    _Alloc &__a;
        -: 5643:
        -: 5644:    _Tp *__addr() { return reinterpret_cast<_Tp *>(addressof(__v)); }
        -: 5645:    _Tp &   get() { return *__addr(); }
        -: 5646:
        -: 5647:    template<class... _Args>
        -: 5648:    __temp_value(_Alloc &__alloc, _Args&& ... __args) : __a(__alloc)
        -: 5649:    { _Traits::construct(__a, __addr(), _VSTD::forward<_Args>(__args)...); }
        -: 5650:
        -: 5651:    ~__temp_value() { _Traits::destroy(__a, __addr()); }
        -: 5652:    };
        -: 5653:#endif
        -: 5654:
        -: 5655:template<typename _Alloc, typename = void, typename = void>
        -: 5656:struct __is_allocator : false_type {};
        -: 5657:
        -: 5658:template<typename _Alloc>
        -: 5659:struct __is_allocator<_Alloc,
        -: 5660:       typename __void_t<typename _Alloc::value_type>::type,
        -: 5661:       typename __void_t<decltype(_VSTD::declval<_Alloc&>().allocate(size_t(0)))>::type
        -: 5662:     >
        -: 5663:   : true_type {};
        -: 5664:
        -: 5665:_LIBCPP_END_NAMESPACE_STD
        -: 5666:
        -: 5667:_LIBCPP_POP_MACROS
        -: 5668:
        -: 5669:#endif  // _LIBCPP_MEMORY
